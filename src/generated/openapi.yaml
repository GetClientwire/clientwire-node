---
openapi: 3.0.3
info:
  title: Wire API (development)
  version: 1.0.0
  description: The API for the Clientwire messaging service.
  termsOfService: https://clientwire.net/terms
  contact:
    email: support@clientwire.net
    name: Support
    url: https://www.clientwire.net/
servers:
- url: https://api.production.clientwire.net
- url: https://api.staging.clientwire.net
- url: https://api.int.clientwire.net
tags:
- name: Signup
  description: Operations related to signup.
- name: Signin
  description: Operations related to signin.
- name: Password Reset
  description: Operations related to resetting the password.
- name: Conversation Types
  description: Operations for tenant-level conversation types.
- name: Conversations
  description: Operations for conversations.
- name: Participants
  description: Operations for participants.
- name: Messages
  description: Operations for conversations.
- name: Users
  description: Operations related to users.
- name: Tenants
  description: Operations related to tenants.
- name: Tenant Config
  description: Operations related to tenant configurations.
- name: API Keys
  description: Operations related to users.
- name: OIDC Configs
  description: Operations related to OIDC configurations.
- name: SMS Settings
  description: Operations for managing per-tenant Twilio SMS settings.
- name: Geocoding
  description: Operations to geocode locations.
- name: Conversation Labels
  description: Operations for conversation-level labels
- name: Message Templates
  description: Operation for message templates
- name: Tenant Color Config
- name: Tenant Domains
- name: UserPreference
  description: Operations for user preferences.
- name: Webhook Features
  description: API to manage webhook feature settings
- name: Webhooks
- name: Workflows
  description: Operation for workflows
paths:
  /api/v1/api-keys:
    get:
      summary: List the API keys for this tenant.
      operationId: listApiKeys
      tags:
      - API Keys
      responses:
        "200":
          description: List of API keys returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKeyList"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - API_KEY
        - OWNER
    post:
      summary: Create a new API key for this tenant.
      operationId: createApiKey
      tags:
      - API Keys
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateApiKeyRequest"
        required: true
      responses:
        "201":
          description: API key created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateApiKeyResponse"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - API_KEY
        - OWNER
  /api/v1/api-keys/{key_id}:
    patch:
      summary: Update an API key.
      description: Updates an API key's information by key_id for the specified tenant.
      operationId: updateApiKey
      tags:
      - API Keys
      parameters:
      - name: key_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              description: "Allowed fields are: name."
              type: object
              additionalProperties: {}
              example:
                name: new name
        required: true
      responses:
        "200":
          description: API key updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKeyListItem"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "404":
          description: Not found.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - API_KEY
        - OWNER
    delete:
      summary: Delete an API key by key_id.
      operationId: deleteApiKey
      tags:
      - API Keys
      parameters:
      - name: key_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: API key deleted successfully.
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "404":
          description: Not found.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - API_KEY
        - OWNER
  /api/v1/auth/{tenant_id}/oauth2/token:
    post:
      summary: OAuth2 Token Endpoint
      description: "OAuth2-style token endpoint. \nSupports multiple grant_type values:\n\
        \ - authorization_code  (PKCE optional) // NOT YET IMPLEMENTED\n - password\
        \            (ROPC)\n - refresh_token\n - urn:ietf:params:oauth:grant-type:token-exchange\
        \ (Token Exchange)\n \nFor the Token Exchange grant_type, the subject_token_type\
        \ can be:\n - urn:clientwire:token-type:client-participant-auth-key\n - urn:ietf:params:oauth:token-type:access_token\n\
        \ \nurn:clientwire:token-type:client-participant-auth-key is a special token\
        \ type for exchanging a client's participant auth key for an access token.\n\
        urn:ietf:params:oauth:token-type:access_token is for our token-exchange service\
        \ to exchange your access token with a Clientwire access token by verifying\
        \ it at your provided userinfo endpoint.\n"
      operationId: oauth2TokenEndpoint
      tags:
      - Signin
      parameters:
      - name: tenant_id
        in: path
        required: true
        schema:
          type: string
          nullable: true
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  nullable: true
                client_id:
                  type: string
                  nullable: true
                client_secret:
                  type: string
                  nullable: true
                scope:
                  type: string
                  nullable: true
                username:
                  type: string
                  nullable: true
                password:
                  type: string
                  nullable: true
                subject_token:
                  type: string
                  nullable: true
                subject_token_type:
                  type: string
                  nullable: true
                code:
                  type: string
                  nullable: true
                redirect_uri:
                  type: string
                  nullable: true
                code_verifier:
                  type: string
                  nullable: true
                provider_name:
                  type: string
                  nullable: true
                refresh_token:
                  type: string
                  nullable: true
        required: true
      responses:
        "200":
          description: Successful token issuance
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponseDto"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "415":
          description: Unsupported Content Type.
  /api/v1/auth/{tenant_id}/options:
    get:
      summary: Returns a list of signin options of the user.
      description: "Based on the tenant_id and the email, we lookup what options for\
        \ signin are available."
      operationId: signinOptions
      tags:
      - Signin
      parameters:
      - name: tenant_id
        in: path
        required: true
        schema:
          type: string
      - name: email
        in: query
        schema:
          type: string
        required: true
      responses:
        "200":
          description: Returns signin options.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationOptions"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "415":
          description: Unsupported Content Type.
  /api/v1/auth/{tenant_id}/password-reset:
    post:
      summary: Request a password reset.
      description: Request a password reset for the specified user.
      operationId: resetPassword
      tags:
      - Password Reset
      parameters:
      - name: tenant_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordRequest"
        required: true
      responses:
        "204":
          description: The password reset has been initiated or user not found.
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "415":
          description: Unsupported Content Type.
  /api/v1/auth/{tenant_id}/password-reset/set:
    post:
      summary: Set password after reset.
      description: Provide the token and new password to complete the reset.
      operationId: setPassword
      tags:
      - Password Reset
      parameters:
      - name: tenant_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetPasswordRequest"
        required: true
      responses:
        "204":
          description: The password has been updated.
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "415":
          description: Unsupported Content Type.
  /api/v1/client-participant/me:
    get:
      summary: Get information about the client participant and its conversation.
      description: Retrieves the participant details for the calling CLIENT_PARTICIPANT
        token.
      operationId: getClientParticipantHimself
      tags:
      - Participants
      responses:
        "200":
          description: Participant data returned successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Participant"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "415":
          description: Unsupported Content Type.
      security:
      - BearerAuth:
        - CLIENT_PARTICIPANT
  /api/v1/conversation-types:
    get:
      summary: List all conversation types for the specified tenant.
      description: Returns all conversation types for the tenant.
      operationId: getConversationTypes
      tags:
      - Conversation Types
      responses:
        "200":
          description: List of conversation types returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConversationTypeListResponse"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - USER
        - OWNER
        - API_KEY
    post:
      summary: Create a new conversation type for the specified tenant.
      description: Creates a conversation type for a tenant.
      operationId: createConversationType
      tags:
      - Conversation Types
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConversationTypePostRequest"
        required: true
      responses:
        "201":
          description: Conversation type created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConversationType"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
  /api/v1/conversation-types/{conversation_type_id}:
    patch:
      summary: Update partial fields of an existing conversation type.
      description: Allows patching only specific fields of a conversation type.
      operationId: updateConversationType
      tags:
      - Conversation Types
      parameters:
      - name: conversation_type_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The patch body for updating conversation type fields.
        required: true
        content:
          application/json:
            schema:
              description: "Allowed fields are: id, description, display_name_shared_by_users,\
                \ display_name_for_workflow_participants ,conversation_data_schema,\
                \ conversation_data_list_item_template, sms_template_name, email_template_name,\
                \ sms_sender_id"
              type: object
              additionalProperties:
                type: string
              example:
                description: new description
      responses:
        "200":
          description: Conversation type updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConversationType"
        "404":
          description: Not found.
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
    get:
      summary: Get a single conversation type.
      description: Retrieves a conversation type by its ID.
      operationId: getConversationType
      tags:
      - Conversation Types
      parameters:
      - name: conversation_type_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Conversation type found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConversationType"
        "404":
          description: Not found.
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - USER
        - OWNER
        - API_KEY
    delete:
      summary: Delete a conversation type.
      description: Removes a conversation type by its ID.
      operationId: deleteConversationType
      tags:
      - Conversation Types
      parameters:
      - name: conversation_type_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Conversation type deleted successfully.
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "404":
          description: Not found.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
    put:
      summary: Create or update a conversation type.
      description: "If not found, conversation type is created; otherwise it is updated."
      operationId: createOrUpdateConversationType
      tags:
      - Conversation Types
      parameters:
      - name: conversation_type_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConversationTypePutRequest"
        required: true
      responses:
        "201":
          description: Conversation type created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConversationType"
        "200":
          description: Conversation type updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConversationType"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
  /api/v1/conversations:
    get:
      summary: List all conversations for the specified tenant.
      description: Returns a paginated list of conversations for the tenant.
      operationId: getConversations
      tags:
      - Conversations
      parameters:
      - name: archived
        in: query
        schema:
          type: boolean
          nullable: true
      - description: Only include messages created after this date-time
        schema:
          format: date-time
        name: created_after
        in: query
      - description: Only include messages created before this date-time
        schema:
          format: date-time
        name: created_before
        in: query
      - description: Include the specified related resources in the response.
        name: includes
        schema:
          example: "PARTICIPANTS,CONVERSATION_TYPE"
        in: query
      - name: limit
        in: query
        schema:
          format: int32
          default: 10
          type: integer
      - name: offset
        in: query
        schema:
          format: int32
          default: 0
          type: integer
      - description: "Direction of the sort. Possible values: ASC, DESC. If not provided\
          \ will fallback to DESC."
        schema:
          example: created_at
        name: order
        in: query
      - description: "Sort result based on this field. Possible values: created_at,\
          \ updated_at. If not provided it will fallback to created_at"
        schema:
          example: created_at
        name: order_by
        in: query
      - name: search
        in: query
        schema:
          type: string
          nullable: true
      - description: Only include messages updated after this date-time
        schema:
          format: date-time
        name: updated_after
        in: query
      - description: Only include messages updated before this date-time
        schema:
          format: date-time
        name: updated_before
        in: query
      responses:
        "200":
          description: List of conversations returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConversationPaginatedResponse"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - USER
        - OWNER
        - API_KEY
    post:
      summary: Create a new conversation for the specified tenant.
      description: Creates a conversation and optional participants.
      operationId: createConversation
      tags:
      - Conversations
      parameters:
      - description: Include the specified related resources in the response.
        name: includes
        schema:
          example: "PARTICIPANTS,CONVERSATION_TYPE"
        in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConversationPostRequest"
        required: true
      responses:
        "201":
          description: Conversation created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
        - USER
  /api/v1/conversations/by_ids:
    post:
      summary: Get a list of conversations by their ids.
      description: Retrieves multiple conversations by their public IDs in a POST
        request body.
      operationId: getConversationsByIds
      tags:
      - Conversations
      parameters:
      - description: Include the specified related resources in the response.
        schema:
          example: "PARTICIPANTS,CONVERSATION_TYPE"
        name: includes
        in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConversationsByIdsRequest"
        required: true
      responses:
        "200":
          description: List of conversations returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConversationListResponse"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - USER
        - OWNER
        - API_KEY
  /api/v1/conversations/{conversation_id}:
    patch:
      summary: Update partial fields of an existing conversation.
      description: "Allows patching id, archived, conversation_data, etc."
      operationId: updateConversation
      tags:
      - Conversations
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
      - description: Include the specified related resources in the response.
        schema:
          example: "PARTICIPANTS,CONVERSATION_TYPE"
        name: includes
        in: query
      requestBody:
        description: The patch body for updating conversation fields.
        required: true
        content:
          application/json:
            schema:
              description: "The fields to update. Allowed fields are: id, archived,\
                \ description and conversation_data."
              type: object
              additionalProperties: {}
              example:
                conversation_data: new-data
      responses:
        "200":
          description: Conversation updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "404":
          description: Not found.
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
        - USER
    get:
      summary: Get a single conversation.
      description: Retrieves conversation details by ID.
      operationId: getConversation
      tags:
      - Conversations
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
      - description: Include the specified related resources in the response.
        schema:
          example: "PARTICIPANTS,CONVERSATION_TYPE"
        name: includes
        in: query
      responses:
        "200":
          description: Conversation found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "404":
          description: Not found.
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - USER
        - OWNER
        - API_KEY
        - CLIENT_PARTICIPANT
    delete:
      summary: Delete a conversation.
      description: Removes a conversation by ID.
      operationId: deleteConversation
      tags:
      - Conversations
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Conversation deleted successfully.
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "404":
          description: Not found.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
    put:
      summary: Create or update a conversation.
      description: "If it doesn't exist, creates it; otherwise updates it."
      operationId: createOrUpdateConversation
      tags:
      - Conversations
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
      - description: Include the specified related resources in the response.
        name: includes
        schema:
          example: "PARTICIPANTS,CONVERSATION_TYPE"
        in: query
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConversationPutRequest"
      responses:
        "201":
          description: Conversation created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "200":
          description: Conversation updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
        - USER
  /api/v1/conversations/{conversation_id}/labels:
    put:
      summary: Updates all labels for the specified conversation
      description: Updates labels for conversations
      operationId: updateConversationLabels
      tags:
      - Conversation Labels
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
      - description: Include the specified related resources in the response.
        schema:
          example: "PARTICIPANTS,CONVERSATION_TYPE"
        name: includes
        in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConversationLabelPutRequest"
        required: true
      responses:
        "200":
          description: Conversation labels updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
        - USER
    post:
      summary: Create new labels for the specified conversation
      description: Creates labels for conversations
      operationId: createConversationLabels
      tags:
      - Conversation Labels
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
      - description: Include the specified related resources in the response.
        schema:
          example: "PARTICIPANTS,CONVERSATION_TYPE"
        name: includes
        in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConversationLabelPostRequest"
        required: true
      responses:
        "201":
          description: Conversation label created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
        - USER
  /api/v1/conversations/{conversation_id}/labels/{label}:
    put:
      summary: Updates a specific label with a new one
      description: Updates a specific label
      operationId: updateConversationLabel
      tags:
      - Conversation Labels
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
      - name: label
        in: path
        required: true
        schema:
          type: string
      - description: Include the specified related resources in the response.
        schema:
          example: "PARTICIPANTS,CONVERSATION_TYPE"
        name: includes
        in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConversationLabelPutRequest"
        required: true
      responses:
        "200":
          description: Conversation labels updated successfully
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
        - USER
    delete:
      summary: Deletes a label for the specified conversation
      description: Deletes label for a conversation
      operationId: deleteConversationLabel
      tags:
      - Conversation Labels
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
      - name: label
        in: path
        required: true
        schema:
          type: string
      - description: Include the specified related resources in the response.
        schema:
          example: "PARTICIPANTS,CONVERSATION_TYPE"
        name: includes
        in: query
      responses:
        "200":
          description: Conversation label deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
        - USER
  /api/v1/conversations/{conversation_id}/lock:
    post:
      summary: Lock a conversation
      description: "Lock a conversation until a specified time, optionally create\
        \ a note also"
      operationId: lockConversation
      tags:
      - Conversations
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
      - description: Include the specified related resources in the response
        schema:
          example: "PARTICIPANTS,CONVERSATION_TYPE"
        name: includes
        in: query
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConversationLockRequest"
      responses:
        "200":
          description: Conversation locked successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - USER
        - OWNER
        - API_KEY
  /api/v1/conversations/{conversation_id}/messages:
    get:
      summary: Get messages of a conversation.
      description: Returns a paginated list of messages for the conversation.
      operationId: getMessages
      tags:
      - Messages
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
      - description: Only include messages created after this date-time
        schema:
          format: date-time
        name: created_after
        in: query
      - description: Only include messages created before this date-time
        schema:
          format: date-time
        name: created_before
        in: query
      - description: "If using sequence-based pagination, the last known sequence."
        name: last_sequence
        in: query
        schema:
          format: int32
          type: integer
          nullable: true
      - description: Max number of messages to return (page size)
        name: limit
        in: query
        schema:
          format: int32
          type: integer
          nullable: true
      - description: Starting offset for pagination
        name: offset
        in: query
        schema:
          format: int32
          type: integer
          nullable: true
      - description: Sort direction (asc/desc)
        name: order
        in: query
        schema:
          type: string
          nullable: true
      - description: "Field to sort by, e.g. 'createdAt' or 'updatedAt'"
        name: order_by
        in: query
        schema:
          type: string
          nullable: true
      - description: Only include messages updated after this date-time
        schema:
          format: date-time
        name: updated_after
        in: query
      - description: Only include messages updated before this date-time
        schema:
          format: date-time
        name: updated_before
        in: query
      responses:
        "200":
          description: Messages retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessagePaginatedResponse"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - CLIENT_PARTICIPANT
        - USER
        - OWNER
        - API_KEY
    post:
      summary: Add a new message to a conversation.
      description: Queues a message to be added to the conversation.
      operationId: createMessage
      tags:
      - Messages
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessagePostRequest"
      responses:
        "201":
          description: Message queued for adding successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - CLIENT_PARTICIPANT
        - USER
        - OWNER
        - API_KEY
  /api/v1/conversations/{conversation_id}/messages/{message_id}:
    get:
      summary: Get a single message in the specified conversation.
      description: Retrieves details of a specific message by ID.
      operationId: getMessage
      tags:
      - Messages
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
      - name: message_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Message retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "404":
          description: Not found.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - CLIENT_PARTICIPANT
        - USER
        - OWNER
        - API_KEY
  /api/v1/conversations/{conversation_id}/participants:
    get:
      summary: List all participants in the specified conversation.
      description: Returns all participants for a conversation.
      operationId: getParticipants
      tags:
      - Participants
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: A list of conversation participants.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParticipantListResponse"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - USER
        - OWNER
        - API_KEY
    post:
      summary: Create a new participant in the specified conversation.
      description: Creates a conversation participant.
      operationId: createParticipant
      tags:
      - Participants
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ParticipantPostRequest"
        required: true
      responses:
        "201":
          description: Participant created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Participant"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - USER
        - OWNER
        - API_KEY
  /api/v1/conversations/{conversation_id}/participants/notify:
    post:
      summary: Notify conversation client participants.
      description: Sends a notification to participants of the conversation.
      operationId: notifyClientParticipants
      tags:
      - Participants
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Participants notified successfully.
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - USER
        - OWNER
        - API_KEY
  /api/v1/conversations/{conversation_id}/participants/{participant_id}:
    patch:
      summary: Patch partial fields of a participant.
      description: "Allows updating only display_name, phone_number, email, etc."
      operationId: updateParticipant
      tags:
      - Participants
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
      - name: participant_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ParticipantPatchRequest"
        required: true
      responses:
        "200":
          description: Participant updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Participant"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "404":
          description: Not found.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - USER
        - OWNER
        - API_KEY
    get:
      summary: Get a single participant in the specified conversation.
      description: Retrieves participant details by ID.
      operationId: getParticipant
      tags:
      - Participants
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
      - name: participant_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The conversation participant.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Participant"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "404":
          description: Not found.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - USER
        - OWNER
        - API_KEY
    delete:
      summary: Delete a participant from the specified conversation.
      description: Removes a participant by ID.
      operationId: deleteParticipant
      tags:
      - Participants
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
      - name: participant_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Participant deleted successfully.
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "404":
          description: Not found.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - USER
        - OWNER
        - API_KEY
    put:
      summary: Create or update a participant in the specified conversation.
      description: "If participant doesn’t exist, it is created, otherwise it is fully\
        \ updated."
      operationId: createOrUpdateParticipant
      tags:
      - Participants
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
      - name: participant_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ParticipantPutRequest"
        required: true
      responses:
        "201":
          description: Participant created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Participant"
        "200":
          description: Participant updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Participant"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - USER
        - OWNER
        - API_KEY
  /api/v1/conversations/{conversation_id}/participants/{participant_id}/activity:
    post:
      summary: Record participant activity.
      description: "Update participant’s message-seen info, etc."
      operationId: updateParticipantActivity
      tags:
      - Participants
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
      - name: participant_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ParticipantActivityRequest"
        required: true
      responses:
        "200":
          description: Conversation participant activity updated successfully.
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - CLIENT_PARTICIPANT
        - USER
        - OWNER
        - API_KEY
  /api/v1/conversations/{conversation_id}/participants/{participant_id}/client-url:
    get:
      summary: Get the client participant URL
      description: Retrieves the URL for the client participant
      operationId: getClientParticipantAuthUrl
      tags:
      - Participants
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
      - name: participant_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The URL of the client participant
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParticipantClientUrlDto"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "404":
          description: Not found.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - USER
        - OWNER
        - API_KEY
  /api/v1/conversations/{conversation_id}/unlock:
    post:
      summary: Unlock a conversation
      description: Unlock a conversation
      operationId: unlockConversation
      tags:
      - Conversations
      parameters:
      - name: conversation_id
        in: path
        required: true
        schema:
          type: string
      - description: Include the specified related resources in the response.
        schema:
          example: "PARTICIPANTS,CONVERSATION_TYPE"
        name: includes
        in: query
      responses:
        "200":
          description: Conversation unlocked successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - USER
        - OWNER
        - API_KEY
  /api/v1/conversations/{user_id}/unlock:
    put:
      summary: Unlock conversations locked by user
      description: Unlock all conversations locked by this user
      operationId: unlockConversationsFromUsers
      tags:
      - Conversations
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Conversations unlocked successfully.
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
  /api/v1/geocoder/reverse:
    get:
      summary: Reverse geocode a location.
      description: "Given latitude/longitude, returns the address."
      operationId: reverseGeocode
      tags:
      - Geocoding
      parameters:
      - name: latitude
        in: query
        schema:
          format: double
          type: number
      - name: longitude
        in: query
        schema:
          format: double
          type: number
      responses:
        "200":
          description: Reverse geocoding successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationWithAddress"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - CLIENT_PARTICIPANT
        - USER
        - OWNER
        - API_KEY
  /api/v1/geocoder/search:
    get:
      summary: Search for a location.
      description: "Given a text query, returns a geocoded address."
      operationId: searchGeocode
      tags:
      - Geocoding
      parameters:
      - name: text
        in: query
        schema:
          type: string
        required: true
      responses:
        "200":
          description: Geocode search successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationWithAddress"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - CLIENT_PARTICIPANT
        - USER
        - OWNER
        - API_KEY
  /api/v1/geocoder/search/structured:
    get:
      summary: Search for a location (structured).
      description: "Given partial address fields, returns a geocoded address."
      operationId: searchStructuredGeocode
      tags:
      - Geocoding
      parameters:
      - name: country
        in: query
        schema:
          type: string
          nullable: true
      - name: postalCode
        in: query
        schema:
          format: int32
          type: integer
          nullable: true
      - name: street
        in: query
        schema:
          type: string
        required: true
      responses:
        "200":
          description: Structured geocode search successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationWithAddress"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - CLIENT_PARTICIPANT
        - USER
        - OWNER
        - API_KEY
  /api/v1/message_templates:
    get:
      summary: Paged message templates.
      description: Fetches message templates for the tenant.
      operationId: listMessageTemplates
      tags:
      - Message Templates
      parameters:
      - name: direction
        in: query
        schema:
          type: string
          nullable: true
      - description: |-
          Include the specified related resources in the response.
          Supported values: 'PARAMETERS', 'TEXTS'.
          If empty, no related resource is returned
        schema:
          example: "PARAMETERS,TEXTS"
        name: includes
        in: query
      - name: limit
        in: query
        schema:
          format: int32
          default: 2147483647
          type: integer
      - name: offset
        in: query
        schema:
          format: int32
          default: 0
          type: integer
      - name: sortBy
        in: query
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: Page of message templates returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageTemplatePaginatedResponse"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
    post:
      summary: Create a new message template for the specified tenant.
      description: Creates a message template.
      operationId: createMessageTemplate
      tags:
      - Message Templates
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageTemplatePostRequest"
        required: true
      responses:
        "201":
          description: Message template created successfully.
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
  /api/v1/message_templates/{name}:
    put:
      summary: Update a message template.
      description: Updates a message template.
      operationId: updateMessageTemplate
      tags:
      - Message Templates
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      - description: |-
          Include the specified related resources in the response.
          Supported values: 'PARAMETERS', 'TEXTS'.
          If empty, no related resource is returned
        schema:
          example: "PARAMETERS,TEXTS"
        name: includes
        in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageTemplatePutRequest"
        required: true
      responses:
        "200":
          description: Message template updated successfully.
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
    get:
      summary: Message template
      description: Fetches message templates by id.
      operationId: getMessageTemplateById
      tags:
      - Message Templates
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      - description: |-
          Include the specified related resources in the response.
          Supported values: 'PARAMETERS', 'TEXTS'.
          If empty, no related resource is returned
        schema:
          example: "PARAMETERS,TEXTS"
        name: includes
        in: query
      responses:
        "200":
          description: Message template returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageTemplate"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
    delete:
      summary: Delete a message template.
      description: Removes a message template by ID.
      operationId: deleteMessageTemplate
      tags:
      - Message Templates
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Message template deleted successfully.
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "404":
          description: Not found.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
  /api/v1/oidc-configs:
    get:
      summary: List all OIDC provider configs for the specified tenant.
      description: Retrieves all OIDC configs for the given tenant.
      operationId: listOidcProviders
      tags:
      - OIDC Configs
      responses:
        "200":
          description: All OIDC configs returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OidcConfigList"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - API_KEY
        - OWNER
    post:
      summary: Create a new OIDC provider config for the specified tenant.
      description: Creates an OIDC config if it does not already exist for that provider.
      operationId: createOidcProvider
      tags:
      - OIDC Configs
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOidcConfigRequest"
        required: true
      responses:
        "201":
          description: OIDC config created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OidcConfig"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - API_KEY
        - OWNER
  /api/v1/oidc-configs/{provider_name}:
    patch:
      summary: Update partial fields of an existing OIDC provider config.
      description: "Allows updating only certain fields like client_id, authority_url,\
        \ client_secret, scope."
      operationId: patchOidcProvider
      tags:
      - OIDC Configs
      parameters:
      - name: provider_name
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The patch body for updating OIDC provider config fields.
        required: true
        content:
          application/json:
            schema:
              description: "Allowed fields are: client_id, authority_url, client_secret,\
                \ scope."
              type: object
              additionalProperties: {}
              example:
                client_secret: new-secret
      responses:
        "200":
          description: OIDC config updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OidcConfig"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "404":
          description: Not found.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - API_KEY
        - OWNER
    get:
      summary: Get a single OIDC provider config by provider name.
      description: Finds an OIDC provider config by its provider name.
      operationId: getOidcProvider
      tags:
      - OIDC Configs
      parameters:
      - name: provider_name
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OIDC provider found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OidcConfig"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "404":
          description: Not found.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - API_KEY
        - OWNER
    delete:
      summary: Delete an OIDC provider config.
      description: Removes an OIDC provider config from the tenant’s configuration.
      operationId: deleteOidcProvider
      tags:
      - OIDC Configs
      parameters:
      - name: provider_name
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: OIDC provider config deleted successfully.
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "404":
          description: Not found.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - API_KEY
        - OWNER
  /api/v1/signup:
    post:
      summary: Create a new account and user.
      description: Tenant and user created successfully. You should now be able to
        login.
      operationId: signup
      tags:
      - Signup
      requestBody:
        description: The data needed to sign up a new tenant and user.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignupRequest"
      responses:
        "201":
          description: Tenant and user created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignupResponse"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
  /api/v1/signup/machine:
    post:
      summary: Signup for automation/machines.
      description: "Signup for automated new tenant creation. You will need an existing\
        \ 'main' tenant thathas been provisioned to allow machine setup. Instead of\
        \ creating a user, we will create anAPI key for you."
      operationId: signupAsMachine
      tags:
      - Signup
      requestBody:
        description: The data needed to sign up a new tenant with api key.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignupMachineRequest"
      responses:
        "201":
          description: Tenant and API key created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignupResponse"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
  /api/v1/sms/twilio:
    put:
      summary: Create or update Twilio SMS settings for this tenant.
      description: Upserts the Twilio SMS settings for the specified tenant.
      operationId: upsertTwilioSmsSettings
      tags:
      - SMS Settings
      requestBody:
        description: Twilio SMS settings data
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TwilioSettings"
        required: true
      responses:
        "200":
          description: Settings created or updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TwilioSettings"
        "400":
          description: Bad request.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "404":
          description: Not found.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
    get:
      summary: Get the Twilio SMS settings for this tenant.
      description: Returns the Twilio SMS settings if available.
      operationId: getTwilioSmsSettings
      tags:
      - SMS Settings
      responses:
        "200":
          description: Returned Twilio SMS settings (if any).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TwilioSettings"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "404":
          description: Not found.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
    delete:
      summary: Delete the Twilio SMS settings for this tenant.
      description: Removes the Twilio SMS settings for the tenant if they exist.
      operationId: deleteTwilioSmsSettings
      tags:
      - SMS Settings
      responses:
        "204":
          description: Deleted successfully.
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "404":
          description: Not found.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
  /api/v1/tenant:
    patch:
      summary: Update a tenant by ID.
      description: Updates tenant fields such as name or subdomain.
      operationId: updateTenant
      tags:
      - Tenants
      requestBody:
        description: The patch body for updating tenant fields.
        required: true
        content:
          application/json:
            schema:
              description: "The patch body for updating tenant fields. Allowed fields\
                \ are: name, token_exchange_userinfo_url and user_auto_provisioning_domains."
              type: object
              additionalProperties: {}
              example:
                name: new-name
      responses:
        "200":
          description: Tenant updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant"
        "404":
          description: Not found.
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - API_KEY
        - OWNER
    get:
      summary: Get a tenant by ID.
      description: Returns the tenant.
      operationId: getTenant
      tags:
      - Tenants
      responses:
        "200":
          description: Returns the tenant.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant"
        "404":
          description: Not found.
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - API_KEY
        - OWNER
  /api/v1/tenant/color/config:
    put:
      summary: Create or update tenant color config.
      description: "If it doesn't exist, creates it; otherwise updates it."
      operationId: createOrUpdateTenantColorConfig
      tags:
      - Tenant Color Config
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TenantColorConfig"
      responses:
        "201":
          description: Tenant color config created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "200":
          description: Tenant color config updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
  /api/v1/tenant/config:
    get:
      summary: Get the current config for the tenant specified via query parameters.
      description: "At least one of tenant_subdomain, tenant_id, or domain must be\
        \ provided"
      operationId: getTenantConfig
      tags:
      - Tenant Config
      parameters:
      - description: Get tenant config for the specified domain.
        required: false
        name: domain
        in: query
        schema:
          type: string
          nullable: true
      - description: Get tenant config for the specified ID.
        required: false
        name: tenant_id
        in: query
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: Returns the tenant config.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantConfig"
        "404":
          description: Not found.
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "415":
          description: Unsupported Content Type.
  /api/v1/tenants/{tenant_id}/domains:
    get:
      summary: Get all domains for a tenant
      description: List all domains (custom and system) associated with a tenant
      operationId: getDomains
      tags:
      - Tenant Domains
      parameters:
      - description: The tenant ID
        name: tenant_id
        in: path
        required: true
        schema:
          type: string
      - description: Filter domains by type (system or custom)
        required: false
        name: type
        in: query
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: List of domains for the tenant
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TenantDomain"
        "404":
          description: Not found.
        "403":
          description: Forbidden.
        "401":
          description: Not Authorized
      security:
      - BearerAuth:
        - OWNER
        - API_KEY
    post:
      summary: Create a custom domain
      description: Create a new custom domain for a tenant. Only one custom domain
        is allowed per tenant per type (client/main).
      operationId: createDomain
      tags:
      - Tenant Domains
      parameters:
      - description: The tenant ID
        name: tenant_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TenantDomainCreate"
        required: true
      responses:
        "201":
          description: Custom domain created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantDomain"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "403":
          description: Forbidden.
        "409":
          description: Domain already exists or custom domain limit reached
        "401":
          description: Not Authorized
      security:
      - BearerAuth:
        - OWNER
        - API_KEY
  /api/v1/tenants/{tenant_id}/domains/{domain_id}:
    put:
      summary: Update a custom domain
      description: Update an existing custom domain for a tenant. System domains cannot
        be updated.
      operationId: updateDomain
      tags:
      - Tenant Domains
      parameters:
      - description: The domain ID to update
        name: domain_id
        in: path
        required: true
        schema:
          type: string
      - description: The tenant ID
        name: tenant_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TenantDomainUpdate"
        required: true
      responses:
        "200":
          description: Domain updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantDomain"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "403":
          description: Forbidden.
        "404":
          description: Domain not found
        "409":
          description: Domain already exists
        "401":
          description: Not Authorized
      security:
      - BearerAuth:
        - OWNER
    delete:
      summary: Delete a custom domain
      description: Delete a custom domain for a tenant. System domains cannot be deleted.
      operationId: deleteDomain
      tags:
      - Tenant Domains
      parameters:
      - description: The domain ID to delete
        name: domain_id
        in: path
        required: true
        schema:
          type: string
      - description: The tenant ID
        name: tenant_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Domain deleted successfully
        "400":
          description: Cannot delete system domain
        "403":
          description: Forbidden.
        "404":
          description: Domain not found
        "401":
          description: Not Authorized
      security:
      - BearerAuth:
        - OWNER
  /api/v1/users:
    get:
      summary: List all users for a tenant.
      description: Returns a list of all users for the specified tenant.
      operationId: listUsers
      tags:
      - Users
      responses:
        "200":
          description: List of users returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserListResponse"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
    post:
      summary: Create a new user.
      description: Creates a new user for the specified tenant.
      operationId: createUser
      tags:
      - Users
      requestBody:
        description: The details of the user to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        "201":
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - API_KEY
        - OWNER
  /api/v1/users/me:
    get:
      summary: Get the currently authenticated user.
      description: Returns the current user for the authenticated request.
      operationId: getCurrentUser
      tags:
      - Users
      responses:
        "200":
          description: The currently authenticated user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - USER
  /api/v1/users/{user_id}:
    patch:
      summary: Update a user.
      description: Updates a user's information by ID for the specified tenant.
      operationId: updateUser
      tags:
      - Users
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The patch body for updating the users fields.
        required: true
        content:
          application/json:
            schema:
              description: "Allowed fields are: email, role, firstname, lastname."
              type: object
              additionalProperties: {}
              example:
                description: new description
      responses:
        "200":
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "404":
          description: Not found.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - API_KEY
        - OWNER
        - USER
    get:
      summary: Get a user by ID.
      description: Returns details of a user by tenant ID and user ID.
      operationId: getUser
      tags:
      - Users
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "404":
          description: Not found.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - USER
    delete:
      summary: Delete a user.
      description: Deletes a user by ID for the specified tenant.
      operationId: deleteUser
      tags:
      - Users
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: User deleted successfully.
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "404":
          description: Not found.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - API_KEY
        - OWNER
  /api/v1/users/{user_id}/preferences:
    put:
      summary: Update user preferences.
      description: Updates user preferences.
      operationId: createOrUpdateUserPreference
      tags:
      - UserPreference
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPreferencePostRequest1"
        required: true
      responses:
        "200":
          description: User preferences updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPreference"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - USER
        - OWNER
        - API_KEY
    get:
      summary: Get user preferences.
      description: Retrieves user preferences by user ID.
      operationId: getUserPreference
      tags:
      - UserPreference
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: User preference found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPreference"
        "404":
          description: Not found.
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - USER
        - OWNER
        - API_KEY
    post:
      summary: Create user preferences.
      description: Creates user preferences.
      operationId: createUserPreference
      tags:
      - UserPreference
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPreferencePostRequest"
        required: true
      responses:
        "201":
          description: User preferences created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPreference"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - USER
        - OWNER
        - API_KEY
  /api/v1/webhook-settings:
    put:
      summary: Update or create webhook settings (endpoint URL only).
      description: "Allows setting the endpoint_url field. If the row doesn't exist,\
        \ it will be created."
      operationId: setWebhookSettings
      tags:
      - Webhooks
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateWebhookSettingsRequest"
        required: true
      responses:
        "200":
          description: Endpoint URL updated (or created).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantWebhookSettings"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
    get:
      summary: Get the tenant’s webhook settings.
      description: "Returns the current endpoint URL, signature scheme, and the secret\
        \ in plain text. "
      operationId: getWebhookSettings
      tags:
      - Webhooks
      responses:
        "200":
          description: Webhook settings returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantWebhookSettings"
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
  /api/v1/webhook-settings/rotate-secret:
    post:
      summary: Rotate the webhook secret. Optionally update the signature scheme.
      description: "Generates a new random whsec_ secret, encrypts, and saves it."
      operationId: rotateWebhooksSecret
      tags:
      - Webhooks
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RotateWebhookSecretRequest"
        required: true
      responses:
        "200":
          description: "Secret rotated, new plain secret returned."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantWebhookSettings"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
  /api/v1/webhook-settings/test:
    post:
      summary: Trigger a test webhook event
      description: "\n            Enqueues a \"test.webhook\" event to be sent to\
        \ your currently configured\n            webhook endpoint. This can help you\
        \ verify your endpoint is receiving and\n            verifying Standard Webhooks\
        \ signatures correctly.\n            \n            **Important**: Make sure\
        \ you've set your webhook endpoint URL \n            via `PUT /api/v1/webhook-settings`\
        \ before calling this.\n            \n            The test event payload is:\n\
        \            ```\n            {\n              \"type\": \"test.webhook\"\
        ,\n              \"timestamp\": \"2025-01-01T12:00:00Z\",\n              \"\
        data\": {\n                \"example\": \"Hello World!\"\n              }\n\
        \            }\n            ```\n            The event is signed using your\
        \ stored secret, \n            then delivered to the endpoint URL with standard\
        \ headers:\n            - `webhook-id`: a unique message ID \n           \
        \ - `webhook-timestamp`: an integer (Unix seconds)\n            - `webhook-signature`:\
        \ the signature(s), e.g. `v1,...`\n            If the endpoint responds with\
        \ a 2xx status, the queue marks it successful. \n            Otherwise, the\
        \ queue retries automatically, up to 6 times.\n        "
      operationId: triggerTestWebhook
      tags:
      - Webhooks
      responses:
        "204":
          description: A test webhook event has been scheduled.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "415":
          description: Unsupported Content Type.
      security:
      - BearerAuth:
        - OWNER
        - API_KEY
  /api/v1/webhooks/features:
    post:
      summary: Update a webhook feature setting
      description: Updates or creates a webhook feature setting for the specified
        tenant
      operationId: updateWebhookFeature
      tags:
      - Webhook Features
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTenantWebhookFeature"
        required: true
      responses:
        "200":
          description: Webhook feature setting updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantWebhookFeature"
        "400":
          description: Invalid webhook type
        "404":
          description: Tenant not found
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
    get:
      summary: Get webhook feature settings for a tenant
      description: Returns all webhook feature settings for the specified tenant
      operationId: getWebhookFeatures
      tags:
      - Webhook Features
      responses:
        "200":
          description: List of webhook feature settings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TenantWebhookFeature"
        "404":
          description: Tenant not found
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
  /api/v1/webhooks/features/available:
    get:
      summary: Get available webhook types
      description: Returns all available webhook types from the catalog
      operationId: listAvailableWebhookTypes
      tags:
      - Webhook Features
      responses:
        "200":
          description: List of available webhook types
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
  /api/v1/webhooks/features/{webhookType}:
    delete:
      summary: Delete a webhook feature setting
      description: Deletes a webhook feature setting for the specified tenant
      operationId: deleteWebhookFeature
      tags:
      - Webhook Features
      parameters:
      - name: webhookType
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Webhook feature setting deleted successfully
        "404":
          description: Webhook feature setting not found
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
  /api/v1/workflows:
    get:
      summary: List all workflows for the specified tenant.
      description: Returns a list of workflows for the tenant.
      operationId: listWorkflows
      tags:
      - Workflows
      parameters:
      - name: conversation_type_id
        in: query
        schema:
          type: string
          nullable: true
      - name: direction
        in: query
        schema:
          type: string
          nullable: true
      - name: limit
        in: query
        schema:
          format: int32
          default: 2147483647
          type: integer
      - name: offset
        in: query
        schema:
          format: int32
          default: 0
          type: integer
      - name: sortBy
        in: query
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: List of workflows returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkflowPaginatedResponse"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
    post:
      summary: Create a new workflow for the specified tenant.
      description: Creates a workflow.
      operationId: createWorkflow
      tags:
      - Workflows
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkflowPostRequest"
        required: true
      responses:
        "201":
          description: Workflow created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workflow"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "409":
          description: Conflict. A resource with the same id/name already exists.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
  /api/v1/workflows/{workflow_id}:
    put:
      summary: Update a workflow.
      description: Updates a workflow by ID.
      operationId: updateWorkflow
      tags:
      - Workflows
      parameters:
      - name: workflow_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkflowPutRequest"
        required: true
      responses:
        "200":
          description: Workflow updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workflow"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "404":
          description: Not found.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
    patch:
      summary: Patch a workflow.
      description: Patches a workflow by ID.
      operationId: patchWorkflow
      tags:
      - Workflows
      parameters:
      - name: workflow_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The patch body for updating workflow fields.
        required: true
        content:
          application/json:
            schema:
              description: "Allowed fields are: enabled"
              type: object
              additionalProperties: {}
              example:
                enabled: "true"
      responses:
        "200":
          description: Workflow patched successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workflow"
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "404":
          description: Not found.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
    get:
      summary: Get a single workflow.
      description: Retrieves workflow by ID.
      operationId: getWorkflow
      tags:
      - Workflows
      parameters:
      - name: workflow_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Workflow found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workflow"
        "404":
          description: Not found.
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
    delete:
      summary: Delete a workflow.
      description: Removes a workflow by ID.
      operationId: deleteWorkflow
      tags:
      - Workflows
      parameters:
      - name: workflow_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Workflow deleted successfully.
        "400":
          description: Bad request. Usually means that the input data was invalid
            or misformed.
        "401":
          description: Missing or invalid credentials.
        "403":
          description: Forbidden.
        "404":
          description: Not found.
        "415":
          description: Unsupported Content Type.
      security:
      - ApiKeyAuth: []
      - BearerAuth:
        - OWNER
        - API_KEY
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Authenticate via a JWT token, issued by Wire."
    ApiKeyAuth:
      type: apiKey
      name: X-API-KEY
      in: header
      description: Authenticate via an API key.
  schemas:
    ActionKind:
      enum:
      - NOTIFY_PARTICIPANTS
      - SEND_MESSAGE
      type: string
    Activity:
      enum:
      - MESSAGE_SEEN
      - IS_TYPING
      - HAS_CONVERSATION_OPEN
      type: string
    ApiKeyList:
      description: Wrapper object for returning a list of API keys.
      required:
      - api_keys
      type: object
      properties:
        api_keys:
          description: List of API keys for this tenant.
          type: array
          items:
            $ref: "#/components/schemas/ApiKeyListItem"
    ApiKeyListItem:
      required:
      - key_id
      type: object
      properties:
        key_id:
          description: "The ID of the API key (public portion, not secret)."
          type: string
        name:
          description: An optional display name for this key
          type: string
          nullable: true
        expires_at:
          description: Optional expiration time in ISO-8601 format
          type: string
          allOf:
          - $ref: "#/components/schemas/Instant"
          example: 2025-01-01T00:00:00Z
          nullable: true
    AssetResponse:
      type: object
      properties:
        download_url:
          description: URL to download the created asset
          type: string
          example: "null"
          nullable: true
        upload_url:
          description: URL to upload a asset
          type: string
          example: "null"
          nullable: true
        status:
          description: The status of the asset.
          type: string
          allOf:
          - $ref: "#/components/schemas/Status1"
          example: UPLOAD_COMPLETED
          nullable: true
    AuthenticationOptions:
      required:
      - oidc_providers
      type: object
      properties:
        email:
          format: boolean
          description: If email login is available.
          type: boolean
          example: true
        webauthn:
          format: boolean
          description: If WebAuthN/PassKey login is available.
          type: boolean
          example: false
        oidc_providers:
          description: Which OIDC providers are available for login.
          type: array
          items:
            $ref: "#/components/schemas/LoginOptionsOidcProvider"
    ClientFrontendUrl:
      required:
      - client_id
      - url
      type: object
      properties:
        client_id:
          description: The if of the client participant.
          type: string
          example: client
        url:
          description: The url for the client to access the frontend.
          type: string
          example: wire.com/client
          nullable: true
    CompoundConditionNode:
      required:
      - kind
      - operator
      - children
      type: object
      properties:
        kind:
          description: Discriminator property to identify the node kind
          enum:
          - COMPOUND
          - LEAF
          type: string
        operator:
          $ref: "#/components/schemas/LogicalOperatorDto"
        children:
          type: array
          items:
            $ref: "#/components/schemas/ConditionNode"
    ConditionNode:
      required:
      - kind
      type: object
      properties:
        kind:
          description: Discriminator property to identify the node kind
          enum:
          - COMPOUND
          - LEAF
          type: string
      discriminator:
        propertyName: kind
        mapping:
          LEAF: "#/components/schemas/LeafConditionNode"
          COMPOUND: "#/components/schemas/CompoundConditionNode"
    ConditionOperator:
      enum:
      - EQUALS
      - CHANGED_FROM_TO
      - CHANGED
      - EXISTS
      - NOT_EXISTS
      type: string
    ConditionalBranch:
      required:
      - condition_node
      - action
      type: object
      properties:
        condition_node:
          $ref: "#/components/schemas/ConditionNode"
        action:
          $ref: "#/components/schemas/WorkflowAction"
    Conversation:
      required:
      - id
      - tenant_id
      - archived
      - conversation_type_id
      type: object
      properties:
        id:
          description: Unique identifier for a conversation.
          maxLength: 50
          pattern: "\"^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]?$\""
          type: string
          example: Abc123
        tenant_id:
          description: Unique identifier for the tenant.
          type: string
          allOf:
          - $ref: "#/components/schemas/UUID"
          example: ace00000-ace0-ace0-ace0-ace000000000
        archived:
          description: Indicates whether the conversation is archived.
          type: boolean
          example: true
        conversation_type_id:
          description: Unique identifier for a conversation type.
          maxLength: 50
          pattern: "\"^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]?$\""
          type: string
          example: breakdowncase
          nullable: true
        conversation_type:
          description: The whole conversation_type type object.
          type: object
          allOf:
          - $ref: "#/components/schemas/ConversationType"
          nullable: true
        created_at:
          description: Timestamp when the conversation was created.
          type: string
          allOf:
          - $ref: "#/components/schemas/Instant"
          example: 2022-11-03T20:26:10.344522Z
          nullable: true
        updated_at:
          description: Timestamp when the conversation was last updated. Initially
            the same as created_at.
          type: string
          allOf:
          - $ref: "#/components/schemas/Instant"
          example: 2022-11-03T20:26:10.344522Z
          nullable: true
        description:
          description: A description field that can be used to store relevant information
            for the conversation. The stored data will be used in the default list
            item template.
          type: string
          example: This is a description!
          nullable: true
        conversation_data:
          description: The data of a conversation corresponding to the conversation_data_schema
            of the conversation type.
          maxLength: 1073741824
          example:
            status: in_progress
            details: Car breakdown on highway.
        labels:
          description: The labels of the conversation.
          type: array
          items:
            type: string
          nullable: true
        template_data:
          description: The conversation data used to render the UI templates
          type: object
          allOf:
          - $ref: "#/components/schemas/TemplateData"
          example:
            list_item_template:
              conversation.id: Abc123
            client_header_template:
              conversation.id: Abc123
              conversation.description: This is a description!
          nullable: true
        conversation_data_updated_at:
          description: Timestamp when the conversation data was last updated.
          type: string
          allOf:
          - $ref: "#/components/schemas/Instant"
          example: 2022-11-03T21:26:10.344522Z
          nullable: true
        participants:
          description: The list of participants in the conversation.
          type: array
          items:
            $ref: "#/components/schemas/Participant"
          example: "null"
          nullable: true
        read_status:
          description: The read status for the conversation. If the permission context
            is CLIENT we always return the read status of the client. If the permission
            context is API_KEY we return the shared_read_status. If the permission
            context is USER and the conversation_type has shared_read_status_for_user_participants=true
            we return the shared_read_status. If the permission context is USER but
            user is not part of the conversation we return the shared_read_status.
          type: object
          allOf:
          - $ref: "#/components/schemas/ReadStatusDto"
          nullable: true
        lock_expires_at:
          description: The date when the lock expires
          type: string
          allOf:
          - $ref: "#/components/schemas/Instant"
          example: 2022-11-03T21:26:10.344522Z
          nullable: true
        lock_note:
          description: The note for the lock
          type: string
          example: Locked until consulted with the mechanic
          nullable: true
        client_frontend_urls:
          description: The list of participants in the conversation.
          type: array
          items:
            $ref: "#/components/schemas/ClientFrontendUrl"
          example: "null"
          nullable: true
    ConversationCreatedTrigger:
      description: Trigger fired when a conversation is created
      required:
      - kind
      - action
      type: object
      properties:
        kind:
          description: Discriminator property to identify the trigger type
          enum:
          - MESSAGE_ADDED_TO_CONVERSATION
          - CONVERSATION_CREATED
          - CONVERSATION_DATA_CHANGED
          type: string
          allOf:
          - $ref: "#/components/schemas/TriggerKind"
        action:
          description: Action to be executed when trigger happens.
          type: object
          allOf:
          - $ref: "#/components/schemas/WorkflowAction"
          example: NOTIFY_PARTICIPANTS
          nullable: true
    ConversationDataChangedTrigger:
      description: Trigger fired when conversation data changes
      required:
      - kind
      - action
      - branches
      type: object
      properties:
        kind:
          description: Discriminator property to identify the trigger type
          enum:
          - MESSAGE_ADDED_TO_CONVERSATION
          - CONVERSATION_CREATED
          - CONVERSATION_DATA_CHANGED
          type: string
          allOf:
          - $ref: "#/components/schemas/TriggerKind"
        action:
          description: Action to be executed when trigger happens.
          type: object
          allOf:
          - $ref: "#/components/schemas/WorkflowAction"
          example: NOTIFY_PARTICIPANTS
          nullable: true
        branches:
          type: array
          items:
            $ref: "#/components/schemas/ConditionalBranch"
    ConversationIncludeOption:
      enum:
      - PARTICIPANTS
      - CONVERSATION_TYPE
      - LIST_ITEM_TEMPLATE_DATA
      - CLIENT_HEADER_TEMPLATE_DATA
      - CONVERSATION_DATA
      - CURRENT_USER_READ_STATUS
      - CLIENT_PARTICIPANT_FRONTEND_URL
      type: string
    ConversationLabelPostRequest:
      required:
      - labels
      type: object
      properties:
        labels:
          description: "Labels for the conversation. If one label contains : it means\
            \ its a scoped label"
          type: array
          items:
            type: string
          example: "[flag:blue,critical]"
    ConversationLabelPutRequest:
      required:
      - labels
      type: object
      properties:
        labels:
          description: "Labels for the conversation. If one label contains : it means\
            \ its a scoped label"
          type: array
          items:
            type: string
          example: "[flag:blue,critical]"
    ConversationListResponse:
      type: object
      properties:
        conversations:
          description: ""
          type: array
          items:
            $ref: "#/components/schemas/Conversation"
          example: "null"
          nullable: true
    ConversationLockRequest:
      required:
      - lock_expires_at
      type: object
      properties:
        lock_expires_at:
          description: The date when the lock expires
          type: string
          allOf:
          - $ref: "#/components/schemas/Instant"
          example: 2022-11-03T21:26:10.344522Z
        lock_note:
          description: The note for the lock
          type: string
          example: Locked until consulted with the mechanic
          nullable: true
        locked_by:
          description: The id of the USER/OWNER who locked the conversation
          type: string
          example: C8E62D56-80BE-437E-A967-6861803729B9
          nullable: true
    ConversationPaginatedResponse:
      required:
      - has_more
      - total_elements
      - limit
      - conversations
      type: object
      properties:
        has_more:
          description: Indicates if there are more pages to fetch.
          type: boolean
          example: "null"
        total_elements:
          format: int32
          description: Total number of elements across all pages.
          type: integer
          example: "null"
          nullable: true
        limit:
          format: int32
          description: The maximum number of elements in this page.
          type: integer
          example: "null"
          nullable: true
        conversations:
          description: ""
          type: array
          items:
            $ref: "#/components/schemas/Conversation"
          example: "null"
        offset:
          format: int32
          description: The offset of the first element in this page (for offset-based
            pagination). Either offset or last_sequence must be set.
          type: integer
          example: "null"
          nullable: true
        last_sequence:
          format: int32
          description: The sequence (or key) of the last element in this page (for
            key-based pagination). Either offset or last_sequence must be set.
          type: integer
          example: "null"
          nullable: true
    ConversationPostRequest:
      required:
      - id
      - conversation_type_id
      type: object
      properties:
        id:
          description: Unique identifier for a conversation.
          maxLength: 50
          pattern: "\"^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]?$\""
          type: string
          example: Abc123
          nullable: true
        conversation_type_id:
          description: The id of the conversation type to be assigned to this conversation.
          maxLength: 50
          pattern: "\"^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]?$\""
          type: string
          example: breakdowncase
        description:
          description: A description field that can be used to store relevant information
            for the conversation. The stored data will be used in the default list
            item template.
          type: string
          example: This is a description!
          nullable: true
        conversation_data:
          description: The data of a conversation corresponding to the conversation_data_schema
            of the conversation type.
          maxLength: 1073741824
          example:
            status: in_progress
            details: Car breakdown on highway.
        participants:
          description: ""
          type: array
          items:
            $ref: "#/components/schemas/ParticipantPostRequest"
          example: "null"
          nullable: true
    ConversationPutRequest:
      required:
      - id
      - conversation_type_id
      type: object
      properties:
        id:
          description: "Unique identifier for a conversation. If the conversation\
            \ is created, this field will be ignored. The id from the URL takes precedence."
          type: string
          example: Abc123
        conversation_type_id:
          description: "Unique identifier for a conversation type. If the conversation\
            \ already exists, this field will be ignored."
          maxLength: 50
          pattern: "\"^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]?$\""
          type: string
          example: breakdowncase
        description:
          description: A description field that can be used to store relevant information
            for the conversation. The stored data will be used in the default list
            item template.
          type: string
          example: This is a description!
          nullable: true
        conversation_data:
          description: The data of a conversation corresponding to the conversation_data_schema
            of the conversation type.
          maxLength: 1073741824
          example:
            status: in_progress
            details: Car breakdown on highway.
        archived:
          description: Indicates whether the conversation is archived. This can only
            be set to false if the conversation already exists.
          type: boolean
          example: true
        participants:
          description: ""
          type: array
          items:
            $ref: "#/components/schemas/ParticipantPostRequest"
          example: "null"
          nullable: true
    ConversationType:
      required:
      - id
      - tenant_id
      - created_at
      - updated_at
      type: object
      properties:
        id:
          description: Unique identifier for a conversation type.
          maxLength: 50
          pattern: "\"^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]?$\""
          type: string
          example: breakdowncase
        tenant_id:
          description: Unique identifier for the tenant.
          type: string
          allOf:
          - $ref: "#/components/schemas/UUID"
          example: ace00000-ace0-ace0-ace0-ace000000000
        created_at:
          description: Timestamp when the conversation type was created.
          type: string
          allOf:
          - $ref: "#/components/schemas/Instant"
          example: 2022-11-03T20:26:10.344522Z
        updated_at:
          description: Timestamp when the conversation type was last updated. Initially
            the same as created_at.
          type: string
          allOf:
          - $ref: "#/components/schemas/Instant"
          example: 2022-11-03T20:26:10.344522Z
        description:
          description: A description of what this conversation type is used for.
          type: string
          example: A conversation type for handling breakdown cases.
          nullable: true
        display_name_shared_by_users:
          description: "If set, all user participants will appear as the same user\
            \ in the conversation to client participants."
          type: string
          example: "true"
          nullable: true
        shared_read_status_for_user_participants:
          description: "If set, all user participants share the read status"
          type: boolean
          example: true
          nullable: true
        display_name_for_workflow_participants:
          description: "If set, all workflow participants will appear with this name\
            \ in the conversation to client participants."
          type: string
          example: Workflow
          nullable: true
        conversation_data_schema:
          description: A JSON Schema describing the data expected in the conversation.
          maxLength: 1073741824
          example:
            type: object
            properties:
              status:
                type: string
        conversation_data_list_item_template:
          description: A handlebars template string used to render the conversation
            data in a list view. The template can contain placeholders for data in
            the conversation data schema.
          maxLength: 1073741824
          type: string
          example: "{{status}} - {{created_at}}"
          nullable: true
        client_app_header_template:
          description: An HTML template to reader the header in the client app which
            has dynamic values based on the conversation_data
          maxLength: 1073741824
          type: string
          example: "<div>{{client}}</div>"
          nullable: true
        sms_sender_id:
          description: "If set, the SMS messages will have this value as sender"
          type: string
          example: Customer Support
          nullable: true
        sms_template_name:
          description: The name of the message template that should be used to render
            the sms text used to notify the client participants.
          type: string
          example: MyTemplate
          nullable: true
        email_template_name:
          description: The name of the message template that should be used to render
            the email body used to notify the client participants.
          type: string
          example: MyTemplate
          nullable: true
    ConversationTypeListResponse:
      required:
      - conversation_types
      type: object
      properties:
        conversation_types:
          description: A list of conversation types.
          type: array
          items:
            $ref: "#/components/schemas/ConversationType"
          example:
          - id: breakdowncase
            tenant_id: ace00000-ace0-ace0-ace0-ace000000000
            created_at: 2022-11-03T20:26:10.344522Z
            updated_at: 2022-11-03T20:26:10.344522Z
            description: A conversation type for handling breakdown cases.
            conversation_data_schema:
              type: object
              properties:
                status:
                  type: string
            conversation_data_list_item_template: "{{status}} - {{created_at}}"
    ConversationTypePostRequest:
      required:
      - id
      - conversation_data_list_item_template
      type: object
      properties:
        id:
          description: Unique identifier for a conversation type.
          maxLength: 50
          pattern: "\"^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]?$\""
          type: string
          example: breakdowncase
        description:
          description: A description of what this conversation type is used for.
          type: string
          example: A conversation type for handling breakdown cases.
          nullable: true
        displayNameSharedByUsers:
          description: "If set, all user participants will appear as the same user\
            \ in the conversation to client participants."
          type: string
          example: "true"
          nullable: true
        displayNameForWorkflowParticipants:
          description: "If set, all workflow participants will appear with this name\
            \ in the conversation to client participants."
          type: string
          example: Workflow
          nullable: true
        conversation_data_schema:
          description: A JSON Schema describing the data expected in the conversation.
          maxLength: 1073741824
          example:
            type: object
            properties:
              status:
                type: string
        conversation_data_list_item_template:
          description: "A handlebars template string used to render the conversation\
            \ data in a list view. The template can contain placeholders for data\
            \ in the conversation data schema, or one of the allowed values: conversation_id,\
            \ conversation_description, conversation_unread_count."
          maxLength: 1073741824
          type: string
          example: "{{conversation_id}} - {{conversation_data.title}}"
        client_app_header_template:
          description: An HTML template to reader the header in the client app which
            has dynamic values based on the conversation_data
          maxLength: 1073741824
          type: string
          example: "<div>{{client}}</div>"
          nullable: true
        sms_sender_id:
          description: "If set, the SMS messages will have this value as sender"
          pattern: "^(?=.*[a-zA-Z])[a-zA-Z0-9 ]{1,11}$"
          type: string
          example: Customer Support
          nullable: true
        sms_template_name:
          description: The name of the message template that should be used to render
            the sms text used to notify the client participants.
          type: string
          example: MyTemplate
          nullable: true
        email_template_name:
          description: The name of the message template that should be used to render
            the email body used to notify the client participants.
          type: string
          example: MyTemplate
          nullable: true
    ConversationTypePutRequest:
      required:
      - id
      - conversation_data_list_item_template
      type: object
      properties:
        id:
          description: Unique identifier for a conversation type.
          maxLength: 50
          pattern: "\"^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]?$\""
          type: string
          example: breakdowncase
        description:
          description: A description of what this conversation type is used for.
          type: string
          example: A conversation type for handling breakdown cases.
          nullable: true
        display_name_shared_by_users:
          description: "If set, all user participants will appear as the same user\
            \ in the conversation to client participants."
          type: string
          example: Dispatcher
          nullable: true
        shared_read_status_for_user_participants:
          description: "If set, all user participants share the read status"
          type: boolean
          example: true
          nullable: true
        display_name_for_workflow_participants:
          description: "If set, all workflow participants will appear with this name\
            \ in the conversation to client participants."
          type: string
          example: Workflow
          nullable: true
        conversation_data_schema:
          description: A JSON Schema describing the data expected in the conversation.
          maxLength: 1073741824
          example:
            type: object
            properties:
              status:
                type: string
        conversation_data_list_item_template:
          description: A handlebars template string used to render the conversation
            data in a list view. The template can contain placeholders for data in
            the conversation data schema.
          maxLength: 1073741824
          type: string
          example: "{{status}} - {{created_at}}"
        client_app_header_template:
          description: An HTML template to reader the header in the client app which
            has dynamic values based on the conversation_data
          maxLength: 1073741824
          type: string
          example: "<div>{{client}}</div>"
          nullable: true
        sms_sender_id:
          description: "If set, the SMS messages will have this value as sender"
          pattern: "^(?=.*[a-zA-Z])[a-zA-Z0-9 ]{1,11}$"
          type: string
          example: Customer Support
          nullable: true
        sms_template_name:
          description: The name of the message template that should be used to render
            the sms text used to notify the client participants.
          type: string
          example: MyTemplate
          nullable: true
        email_template_name:
          description: The name of the message template that should be used to render
            the email body used to notify the client participants.
          type: string
          example: MyTemplate
          nullable: true
    ConversationsByIdsRequest:
      required:
      - ids
      type: object
      properties:
        ids:
          description: Array of needed ids
          type: array
          items:
            type: string
          example:
          - convo-1
          - convo-2
    CreateApiKeyRequest:
      type: object
      properties:
        name:
          description: An optional display name for this key
          type: string
          nullable: true
        expires_at:
          description: Optional expiration time in ISO-8601 format
          type: string
          allOf:
          - $ref: "#/components/schemas/Instant"
          example: 2025-01-01T00:00:00Z
          nullable: true
    CreateApiKeyResponse:
      required:
      - key_id
      - api_key
      type: object
      properties:
        key_id:
          description: "The ID of the API key (public portion, not secret)."
          type: string
        api_key:
          description: The API key itself. You cannot retrieve the API key again.
          type: string
        name:
          description: Optional display name.
          type: string
          nullable: true
        expires_at:
          description: "When this key expires, if any."
          type: string
          allOf:
          - $ref: "#/components/schemas/Instant"
          example: 2022-03-10T16:15:50Z
          nullable: true
    CreateOidcConfigRequest:
      description: DTO for creating or updating a Tenant OIDC configuration
      required:
      - provider_name
      - authority_url
      - client_id
      - client_secret
      type: object
      properties:
        provider_name:
          description: "The provider name, e.g. 'microsoft' or 'google'"
          type: string
          example: microsoft
        authority_url:
          description: "Authority/issuer URL, e.g. 'https://login.microsoftonline.com/<tenant>/v2.0'"
          type: string
          example: https://login.microsoftonline.com/1234-abcd/v2.0
        client_id:
          description: Client ID for this OIDC application
          type: string
          example: 00000000-0000-0000-0000-000000000000
        client_secret:
          description: Client Secret in plaintext. Will be encrypted at rest.
          type: string
          example: super-secret
        scope:
          description: Scopes to request from the OIDC provider
          type: string
          example: openid profile email offline_access
          nullable: true
    CreateUserRequest:
      description: Request body used to create a new user.
      required:
      - email
      - password
      - firstname
      - lastname
      type: object
      properties:
        email:
          format: email
          description: User's email address.
          type: string
          example: user@example.com
        password:
          description: Plain-text password. Will be hashed before storage.
          type: string
          example: mySecretPassword
        firstname:
          description: The first name of the user to create.
          type: string
          example: Philipp
        lastname:
          description: The last name of the user to create.
          type: string
          example: Schmid
        role:
          description: The role assigned to the user. OWNER or USER
          default: USER
          type: string
          allOf:
          - $ref: "#/components/schemas/UserRole"
          example: OWNER
          nullable: true
    ErrorResponse:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorWithCode"
          nullable: true
    ErrorWithCode:
      description: Describes a single error encountered during request processing.
      required:
      - code
      - message
      type: object
      properties:
        code:
          description: An error code specific to the application.
          type: string
          example: errors.validation.failed
        message:
          description: The error message related to the field or general error.
          type: string
          example: Name is required
        path:
          description: The path to the field where the error occurred.
          type: string
          example: name
          nullable: true
        details:
          description: Additional details about the error.
          type: object
          additionalProperties: {}
          example:
            info: Additional detail about the error
          nullable: true
    IncludeOption:
      enum:
      - TEXTS
      - PARAMETERS
      type: string
    Instant:
      format: date-time
      type: string
    Language:
      enum:
      - EN
      - DE
      type: string
    LeafConditionNode:
      required:
      - kind
      - target_identifier
      - operator
      type: object
      properties:
        kind:
          description: Discriminator property to identify the node kind
          enum:
          - COMPOUND
          - LEAF
          type: string
        target_identifier:
          type: string
        operator:
          $ref: "#/components/schemas/ConditionOperator"
        compare_value:
          type: string
          nullable: true
        old_value:
          type: string
          nullable: true
    Location:
      required:
      - latitude
      - longitude
      type: object
      properties:
        latitude:
          description: Latitude of the location
          type: number
          example: 16.8
        longitude:
          description: Longitude of the location
          type: number
          example: 14.8
        accuracy:
          format: int32
          description: Location accuracy in meters
          type: integer
          example: 5
          nullable: true
        positioned_at:
          description: ""
          type: string
          allOf:
          - $ref: "#/components/schemas/Instant"
          example: 2024-09-01T23:59:59.999Z
          nullable: true
        source:
          description: "The location source, if it was from the phone it's GPS, if\
            \ the user moves it's MANUAL"
          type: string
          allOf:
          - $ref: "#/components/schemas/LocationSource"
          example: MANUAL
          nullable: true
    LocationSource:
      enum:
      - MANUAL
      - GPS
      type: string
    LocationWithAddress:
      type: object
      properties:
        formatted_address:
          description: ""
          type: string
          example: "Biberstraße 9, 1010 Wien, Austria"
          nullable: true
        location:
          description: ""
          type: object
          allOf:
          - $ref: "#/components/schemas/Location"
          example: "null"
          nullable: true
    LogicalOperatorDto:
      enum:
      - AND
      - OR
      - NOT
      type: string
    LoginOptionsOidcProvider:
      required:
      - provider_name
      - authority_url
      - client_id
      type: object
      properties:
        provider_name:
          description: "The provider name, e.g. 'microsoft' or 'google'"
          type: string
          example: microsoft
        authority_url:
          description: "Authority/issuer URL, e.g. 'https://login.microsoftonline.com/<tenant>/v2.0'"
          type: string
          example: https://login.microsoftonline.com/1234-abcd/v2.0
        client_id:
          description: Client ID for this OIDC application
          type: string
          example: 00000000-0000-0000-0000-000000000000
    Message:
      required:
      - id
      - tenant_id
      - created_at
      - updated_at
      - conversation_id
      - participant_id
      - sequence
      - kind
      type: object
      properties:
        id:
          description: Unique identifier for a message.
          type: string
          example: eee00000-eee0000-eee00-eee00-eee000000
        tenant_id:
          format: uuid
          description: Unique identifier for the tenant.
          type: string
          example: ace00000-ace0-ace0-ace0-ace000000000
        created_at:
          description: Timestamp when the conversation was created.
          type: string
          allOf:
          - $ref: "#/components/schemas/Instant"
          example: 2022-11-03T20:26:10.344522Z
        updated_at:
          description: Timestamp when the conversation was last updated. Initially
            the same as created_at.
          type: string
          allOf:
          - $ref: "#/components/schemas/Instant"
          example: 2022-11-03T20:26:10.344522Z
        conversation_id:
          description: Unique identifier for a conversation type.
          maxLength: 50
          pattern: "\"^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]?$\""
          type: string
          example: Abc123
        participant_id:
          description: The id of the participant this messages is posted by.
          maxLength: 50
          pattern: "\"^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]?$\""
          type: string
          example: client123
        sequence:
          format: int32
          description: The sequence of the message in the conversation. This will
            be null if the message has not been processed yet.
          type: integer
          example: 0
          nullable: true
        kind:
          description: The kind of message.
          type: string
          allOf:
          - $ref: "#/components/schemas/MessageKind"
          example: TEXT
        text:
          description: "The text of the message. If kind is TEXT or REQUEST_LOCATION,\
            \ this field is required."
          maxLength: 4096
          minLength: 1
          type: string
          example: "Hello, how can I help you?"
          nullable: true
        location:
          description: ""
          type: object
          allOf:
          - $ref: "#/components/schemas/Location"
          nullable: true
        formatted_address:
          description: The formatted address of the location.
          type: string
          example: "Biberstraße 9, 1010 Vienna, Austria"
          nullable: true
        asset:
          description: ""
          type: object
          allOf:
          - $ref: "#/components/schemas/AssetResponse"
          nullable: true
        source_id:
          description: Source id of the message.
          type: string
          example: 0193df26-54b2-7142-ab2b-faba1babd679
          nullable: true
    MessageAddedToConversationTrigger:
      required:
      - kind
      - action
      - message_sequence
      type: object
      properties:
        kind:
          description: Discriminator property to identify the trigger type
          enum:
          - MESSAGE_ADDED_TO_CONVERSATION
          - CONVERSATION_CREATED
          - CONVERSATION_DATA_CHANGED
          type: string
          allOf:
          - $ref: "#/components/schemas/TriggerKind"
        action:
          description: Action to be executed when trigger happens.
          type: object
          allOf:
          - $ref: "#/components/schemas/WorkflowAction"
          example: NOTIFY_PARTICIPANTS
          nullable: true
        message_sequence:
          format: int32
          description: The sequence of the message in the conversation that should
            trigger the workflow.
          type: integer
          example: 0
        participant_kind:
          description: "The participant kind of the message that should trigger the\
            \ workflow. When missing, the workflow will be executed regardless of\
            \ the participant kind"
          type: string
          example: CLIENT
          nullable: true
    MessageKind:
      enum:
      - TEXT
      - LOCATION
      - IMAGE
      - VIDEO
      - AUDIO
      - REQUEST_LOCATION
      type: string
    MessagePaginatedResponse:
      required:
      - has_more
      - total_elements
      - limit
      - messages
      type: object
      properties:
        has_more:
          description: Indicates if there are more pages to fetch.
          type: boolean
          example: "null"
        total_elements:
          format: int32
          description: Total number of elements across all pages.
          type: integer
          example: "null"
          nullable: true
        limit:
          format: int32
          description: The maximum number of elements in this page.
          type: integer
          example: "null"
          nullable: true
        messages:
          description: ""
          type: array
          items:
            $ref: "#/components/schemas/Message"
          example: "null"
        offset:
          format: int32
          description: The offset of the first element in this page (for offset-based
            pagination). Either offset or last_sequence must be set.
          type: integer
          example: "null"
          nullable: true
        last_sequence:
          format: int32
          description: The sequence (or key) of the last element in this page (for
            key-based pagination). Either offset or last_sequence must be set.
          type: integer
          example: "null"
          nullable: true
    MessagePostRequest:
      required:
      - participant_id
      - kind
      type: object
      properties:
        participant_id:
          description: The id of the participant this messages is posted by.
          maxLength: 50
          pattern: "\"^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]?$\""
          type: string
          example: client123
        kind:
          description: The kind of message.
          type: string
          allOf:
          - $ref: "#/components/schemas/MessageKind"
          example: TEXT
        text:
          description: "The text of the message. If kind is TEXT or REQUEST_LOCATION,\
            \ this field is required."
          maxLength: 4096
          minLength: 1
          type: string
          example: "Hello, how can I help you?"
          nullable: true
        location:
          description: ""
          type: object
          allOf:
          - $ref: "#/components/schemas/Location"
          example: "null"
          nullable: true
        formatted_address:
          description: The formatted address of the location.
          type: string
          example: "Biberstraße 9, 1010 Vienna, Austria"
          nullable: true
        source_id:
          description: "Source id of the message, if not provided a random UUID will\
            \ be used."
          maxLength: 100
          pattern: "\"^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]?$\""
          type: string
          example: 0193df26-54b2-7142-ab2b-faba1babd679
          nullable: true
    MessageTemplate:
      required:
      - name
      - kind
      - texts
      - is_system_template
      - parameters
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        kind:
          $ref: "#/components/schemas/MessageTemplateKind"
        texts:
          type: object
          additionalProperties:
            type: string
        is_system_template:
          type: boolean
        created_at:
          allOf:
          - $ref: "#/components/schemas/Instant"
          nullable: true
        updated_at:
          allOf:
          - $ref: "#/components/schemas/Instant"
          nullable: true
        parameters:
          type: array
          items:
            $ref: "#/components/schemas/MessageTemplateParameter"
    MessageTemplateKind:
      enum:
      - TEXT
      - REQUEST_LOCATION
      type: string
    MessageTemplatePaginatedResponse:
      required:
      - has_more
      - total_elements
      - limit
      - message_templates
      type: object
      properties:
        has_more:
          description: Indicates if there are more pages to fetch.
          type: boolean
          example: "null"
        total_elements:
          format: int32
          description: Total number of elements across all pages.
          type: integer
          example: "null"
          nullable: true
        limit:
          format: int32
          description: The maximum number of elements in this page.
          type: integer
          example: "null"
          nullable: true
        message_templates:
          description: List of message templates.
          type: array
          items:
            $ref: "#/components/schemas/MessageTemplate"
        offset:
          format: int32
          description: The offset of the first element in this page (for offset-based
            pagination). Either offset or last_sequence must be set.
          type: integer
          example: "null"
          nullable: true
        last_sequence:
          format: int32
          description: The sequence (or key) of the last element in this page (for
            key-based pagination). Either offset or last_sequence must be set.
          type: integer
          example: "null"
          nullable: true
    MessageTemplateParameter:
      required:
      - name
      - kind
      type: object
      properties:
        name:
          type: string
        kind:
          $ref: "#/components/schemas/ParameterKind"
        value_path:
          type: string
          nullable: true
    MessageTemplatePostRequest:
      required:
      - name
      - kind
      - texts
      - parameters
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        kind:
          $ref: "#/components/schemas/MessageTemplateKind"
        texts:
          type: object
          additionalProperties:
            type: string
        parameters:
          type: array
          items:
            $ref: "#/components/schemas/MessageTemplateParameter"
    MessageTemplatePutRequest:
      required:
      - kind
      - texts
      - parameters
      type: object
      properties:
        description:
          type: string
          nullable: true
        kind:
          $ref: "#/components/schemas/MessageTemplateKind"
        texts:
          type: object
          additionalProperties:
            type: string
        parameters:
          type: array
          items:
            $ref: "#/components/schemas/MessageTemplateParameter"
    OidcConfig:
      description: Represents a Tenant OIDC configuration object as returned by the
        API
      required:
      - provider_name
      - authority_url
      - client_id
      type: object
      properties:
        provider_name:
          description: "The provider name, e.g. 'microsoft' or 'google'"
          type: string
          example: microsoft
        authority_url:
          description: "Authority/issuer URL, e.g. 'https://login.microsoftonline.com/<tenant>/v2.0'"
          type: string
          example: https://login.microsoftonline.com/1234-abcd/v2.0
        client_id:
          description: Client ID for this OIDC application
          type: string
          example: 00000000-0000-0000-0000-000000000000
        scope:
          description: Scopes requested from the OIDC provider
          type: string
          example: openid profile email offline_access
          nullable: true
    OidcConfigList:
      description: Wrapper object for returning a list of OIDC configs.
      required:
      - oidc_configs
      type: object
      properties:
        oidc_configs:
          description: List of OIDC provider configurations for this tenant.
          type: array
          items:
            $ref: "#/components/schemas/OidcConfig"
    OptionalInput:
      type: string
      nullable: true
    OptionalInputString:
      type: string
      nullable: true
    ParameterKind:
      enum:
      - CURRENT_TIMESTAMP
      - CONVERSATION_DATA
      - APP_URL
      - WORKFLOW_ID
      - ERROR
      type: string
    Participant:
      description: "Represents a participant in a conversation. There are three kinds\
        \ of participants: USER, CLIENT."
      required:
      - id
      - tenant_id
      - conversation_id
      - kind
      type: object
      properties:
        id:
          description: Unique identifier for a conversation.
          maxLength: 50
          pattern: "\"^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]?$\""
          type: string
          example: Abc123
        tenant_id:
          format: uuid
          description: Unique identifier for the tenant.
          type: string
          example: ace00000-ace0-ace0-ace0-ace000000000
        conversation_id:
          description: Unique identifier for a conversation.
          maxLength: 50
          pattern: "\"^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]?$\""
          type: string
          example: Abc123
        created_at:
          description: Timestamp when the conversation was created.
          type: string
          allOf:
          - $ref: "#/components/schemas/Instant"
          example: 2022-11-03T20:26:10.344522Z
          nullable: true
        updated_at:
          description: Timestamp when the conversation was last updated. Initially
            the same as created_at.
          type: string
          allOf:
          - $ref: "#/components/schemas/Instant"
          example: 2022-11-03T20:26:10.344522Z
          nullable: true
        kind:
          description: The kind of the participant.
          type: string
          allOf:
          - $ref: "#/components/schemas/ParticipantKind"
          example: "null"
        display_name:
          description: The display name of the participant.
          maxLength: 50
          minLength: 1
          type: string
          example: John Doe
          nullable: true
        preferred_language:
          description: The preferred language of the participant.
          type: string
          example: en
          nullable: true
        phone_number:
          description: The phone number of a participant if he is a CLIENT. The field
            is otherwise always null.
          type: string
          example: "+4369912345678"
          nullable: true
        email:
          format: email
          description: The email of a participant if he is a CLIENT. The field is
            otherwise always null.
          type: string
          example: user@example.com
          nullable: true
        user_id:
          format: uuid
          description: "If has kind USER, this is the user id of this participant.\
            \ The field is otherwise always null."
          type: string
          example: EDA089DA-7940-46EB-97B5-3F18F1396844
          nullable: true
        last_message_sequence_seen:
          format: int32
          description: ""
          type: integer
          example: 5
          nullable: true
        unread_messages_count:
          format: int32
          description: Number of unread messages.
          type: integer
          example: 2
          nullable: true
        had_conversation_open_at:
          description: The last time the participant had the conversation open.
          type: string
          allOf:
          - $ref: "#/components/schemas/Instant"
          example: 2025-11-03T20:26:10.344522Z
          nullable: true
        was_typing_at:
          description: The last time the participant was seen typing.
          type: string
          allOf:
          - $ref: "#/components/schemas/Instant"
          example: 2025-11-03T20:26:10.344522Z
          nullable: true
    ParticipantActivityRequest:
      required:
      - activity
      type: object
      properties:
        activity:
          description: The activity of the participant.
          type: string
          allOf:
          - $ref: "#/components/schemas/Activity"
          example: MESSAGE_SEEN
        last_message_sequence_seen:
          format: int32
          description: last_message_sequence_seen is required for MESSAGE_SEEN activity.
          type: integer
          example: 5
          nullable: true
        source_id:
          description: source_id is required for IS_TYPING activity.
          type: string
          example: "5"
          nullable: true
    ParticipantClientUrlDto:
      type: object
      properties:
        url:
          description: URL for the client participant
          type: string
          example: https://test.wire.net/encrypted-key
          nullable: true
    ParticipantKind:
      enum:
      - NONE
      - USER
      - CLIENT
      - SHARED
      - WORKFLOW
      type: string
    ParticipantListResponse:
      required:
      - participants
      type: object
      properties:
        participants:
          description: A list of conversation participants.
          type: array
          items:
            $ref: "#/components/schemas/Participant"
          example:
          - id: Abc123
            tenant_id: ace00000-ace0-ace0-ace0-ace000000000
            conversation_id: breakdowncase
            created_at: 2022-11-03T20:26:10.344522Z
            updated_at: 2022-11-03T20:26:10.344522Z
            kind: USER
            display_name: John Doe
    ParticipantPatchRequest:
      type: object
      properties:
        display_name:
          description: The display name of the participant. The display name can not
            be empty or null.
          maxLength: 50
          minLength: 1
          type: object
          allOf:
          - $ref: "#/components/schemas/OptionalInputString"
          example: John Doe
          nullable: true
        preferred_language:
          description: The preferred language of the participant. The preferred language
            can not be empty or null.
          type: object
          allOf:
          - $ref: "#/components/schemas/OptionalInputString"
          example: en
          nullable: true
        phone_number:
          description: The phone number of a participant if he is a CLIENT; otherwise
            always null.
          type: object
          allOf:
          - $ref: "#/components/schemas/OptionalInputString"
          example: "+4369912345678"
          nullable: true
        email:
          format: email
          description: The email of a participant if he is a CLIENT; otherwise always
            null.
          type: string
          allOf:
          - $ref: "#/components/schemas/OptionalInputString"
          example: user@example.com
          nullable: true
    ParticipantPostRequest:
      required:
      - id
      - kind
      type: object
      properties:
        id:
          description: Unique identifier for a conversation participant.
          type: string
          example: Abc123
        kind:
          description: The kind of the participant.
          type: string
          allOf:
          - $ref: "#/components/schemas/ParticipantKind"
          example: "null"
        display_name:
          description: "The display name of the participant. If empty or null, the\
            \ display name will be generated from the id."
          maxLength: 50
          minLength: 1
          type: string
          example: John Doe
          nullable: true
        phone_number:
          description: The phone number of a participant if he is a CLIENT. The field
            is otherwise always null.
          type: string
          example: "+4369912345678"
          nullable: true
        email:
          format: email
          description: The email of a participant if he is a CLIENT. The field is
            otherwise always null.
          type: string
          example: user@example.com
          nullable: true
        user_id:
          format: uuid
          description: The userId of a participant if he is a USER. The field is otherwise
            always null.
          type: string
          example: C8E62D56-80BE-437E-A967-6861803729B8
          nullable: true
    ParticipantPutRequest:
      required:
      - conversation_id
      - kind
      type: object
      properties:
        id:
          description: "Unique identifier for a conversation participant. If the conversation\
            \ participant is created, this field will be ignored. The id from the\
            \ URL takes precedence."
          type: string
          example: Abc123
          nullable: true
        conversation_id:
          description: "Unique identifier for a conversation participant. If the conversation\
            \ participant already exists, this field will be ignored."
          maxLength: 50
          pattern: "\"^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]?$\""
          type: string
          example: Abc123
        kind:
          description: The kind of the participant. This can only be set if the conversation
            participant does not exist yet.
          type: string
          allOf:
          - $ref: "#/components/schemas/ParticipantKind"
          example: "null"
        display_name:
          description: The display name of the participant. The display name can not
            be empty or null.
          maxLength: 50
          minLength: 1
          type: string
          example: John Doe
          nullable: true
        preferred_language:
          description: The preferred language of the participant. The preferred language
            can not be empty or null.
          type: string
          example: en
          nullable: true
        phone_number:
          description: The phone number of a participant if he is a CLIENT. The field
            is otherwise always null.
          type: string
          example: "+4369912345678"
          nullable: true
        email:
          format: email
          description: The email of a participant if he is a CLIENT. The field is
            otherwise always null.
          type: string
          example: user@example.com
          nullable: true
        user_id:
          format: uuid
          description: The userId of a participant if he is a USER. The field is otherwise
            always null.
          type: string
          example: C8E62D56-80BE-437E-A967-6861803729B8
          nullable: true
    ReadStatusDto:
      type: object
      properties:
        last_message_seen:
          format: int32
          description: The last seen message sequence number.
          type: integer
          example: 0
        unread_message_count:
          format: int32
          description: The unread message count.
          type: integer
          example: 0
    ResetPasswordRequest:
      required:
      - email
      type: object
      properties:
        email:
          description: The email of the user.
          type: string
          example: owner@autoclubmars.com
    RotateWebhookSecretRequest:
      description: "Request to rotate the secret you can specify the signature schema,\
        \ currently only v1 is supported."
      type: object
      properties:
        signature_scheme:
          description: "If provided, uses the signature_scheme to generate the secrets.\
            \ Default and only supported is 'v1'."
          type: string
          allOf:
          - $ref: "#/components/schemas/WebhookSignatureScheme"
          example: v1
          nullable: true
    SetPasswordRequest:
      required:
      - email
      - password
      - token
      type: object
      properties:
        email:
          description: The user’s email address.
          type: string
          example: owner@autoclubmars.com
        password:
          description: The new password.
          type: string
          example: secret
        token:
          description: The plaintext token from the password reset link.
          type: string
          example: abcdefg
    SignupMachineRequest:
      description: The data needed to create a new tenant and an owner user.
      required:
      - tenant_name
      - tenant_subdomain
      type: object
      properties:
        tenant_name:
          description: The name of the tenant to create.
          maxLength: 20
          minLength: 3
          pattern: "^[\\p{L}0-9][\\p{L}0-9 \\p{L}]+[\\p{L}0-9]$"
          type: string
          example: Autoclub of Mars
        tenant_subdomain:
          description: The subdomain of the tenant to create. Used as the subdomain
            in the URL.
          maxLength: 20
          minLength: 3
          pattern: "^[a-z0-9][a-z0-9_-]+[a-z0-9]?$"
          type: string
          example: autoclubmars
    SignupMachineResponse:
      description: The data returned after a successful signup.
      required:
      - tenant_id
      - api_key
      type: object
      properties:
        tenant_id:
          description: The tenant idt.
          type: string
          allOf:
          - $ref: "#/components/schemas/UUID"
        api_key:
          description: The api key for the newly created tenant.
          type: string
    SignupRequest:
      description: The data needed to create a new tenant and an owner user.
      required:
      - tenant_name
      - tenant_subdomain
      - user_firstname
      - user_lastname
      - preferred_language
      - user_email
      - user_password
      - user_firstname
      - user_lastname
      - preferred_language
      type: object
      properties:
        tenant_name:
          description: The name of the tenant to create.
          maxLength: 20
          minLength: 3
          pattern: "^[\\p{L}0-9][\\p{L}0-9 \\p{L}]+[\\p{L}0-9]$"
          type: string
          example: Autoclub of Mars
        tenant_subdomain:
          description: The domain of the tenant to create.
          maxLength: 20
          minLength: 3
          pattern: "^[a-z0-9][a-z0-9_-]+[a-z0-9]?$"
          type: string
          example: autoclubmars
        user_email:
          format: email
          description: The email of the user to create (receives 'OWNER' role). Email
            confirmation is required.
          type: string
          example: philipp@autoclubmars.com
        user_password:
          description: "The password for the new user account. (In real scenarios,\
            \ note security concerns around plain-text passwords.)"
          type: string
          example: yourpassword123
        user_firstname:
          description: The first name of the user to create.
          type: string
          example: Philipp
        user_lastname:
          description: The last name of the user to create.
          type: string
          example: Schmid
        signup_invite_code:
          description: The invite code to use for signing up.
          type: string
          example: Ji9sllks
          nullable: true
        preferred_language:
          description: The preferred language for the tenant.
          type: string
          example: en
    SignupResponse:
      description: The data returned after a successful signup.
      required:
      - tenant_id
      type: object
      properties:
        tenant_id:
          description: The tenant idt.
          type: string
          allOf:
          - $ref: "#/components/schemas/UUID"
    Status:
      enum:
      - UPLOAD_PENDING
      - UPLOAD_COMPLETED
      - UPLOAD_COMPLETED_MISSING
      - UPLOAD_FAILED
      - UNKNOWN
      type: string
    Status1:
      enum:
      - UPLOAD_PENDING
      - UPLOAD_COMPLETED
      - UPLOAD_COMPLETED_MISSING
      - UPLOAD_FAILED
      - UNKNOWN
      type: string
    TemplateData:
      required:
      - list_item
      - client_header
      type: object
      properties:
        list_item:
          description: 'The data required to render the list item UI template '
          type: object
          additionalProperties: {}
          example:
            conversation.id: Abc123
          nullable: true
        client_header:
          description: 'The data required to render the client header UI template '
          type: object
          additionalProperties: {}
          example:
            conversation.id: Abc123
            conversation.description: This is a description!
          nullable: true
    Tenant:
      description: "Represents a tenant with a unique ID, subdomain, and metadata."
      required:
      - id
      - name
      - subdomain
      - preferred_language
      - domain
      type: object
      properties:
        id:
          description: Unique identifier for the tenant.
          type: string
          allOf:
          - $ref: "#/components/schemas/UUID"
          example: ace00000-ace0-ace0-ace0-ace000000000
        name:
          description: The name of the tenant.
          maxLength: 20
          minLength: 3
          pattern: "^[\\p{L}0-9][\\p{L}0-9 \\p{L}]+[\\p{L}0-9]$"
          type: string
          example: Autoclub of Mars
        preferred_language:
          description: The preferred language of the tenant.
          type: string
          example: en
        domain:
          description: The subdomain of the tenant. Used as the subdomain in the URL.
          type: string
          example: autoclubmars.com
        tenant_creation_allowed:
          description: Is your tenant allowed to create new tenants via the API?
          type: boolean
          example: false
        token_exchange_userinfo_url:
          format: url
          description: The endpoint that should be used to verify the token if you
            want to enable token-exchange flow and. It must be a oauth2 userinfo endpoint.
          type: string
          example: https://auth.autoclubmars.com/oauth2/userinfo
          nullable: true
        user_auto_provisioning_domains:
          format: array
          description: "If a user logs in with an email address that matches one of\
            \ these domains, a new user will be created automatically."
          type: array
          items:
            type: string
          example:
          - autoclubmars.com
          nullable: true
    TenantColorConfig:
      description: Tenant color config
      type: object
      properties:
        header_color:
          description: The header color of the main app
          type: string
          example: "#00000"
          nullable: true
        button_color:
          description: The button color of the main app.
          type: string
          example: "#00000"
          nullable: true
        button_hover_color:
          description: The button hover color of the main app.
          type: string
          example: "#00000"
          nullable: true
        button_label_color:
          description: The button hover color of the main app.
          type: string
          example: "#00000"
          nullable: true
        client_button_color:
          description: The button color of the client app.
          type: string
          example: "#00000"
          nullable: true
        client_button_hover_color:
          description: The button hover color of the client app.
          type: string
          example: "#00000"
          nullable: true
        client_button_label_color:
          description: The button label color of the client app.
          type: string
          example: "#00000"
          nullable: true
        sender_chat_bubble_color:
          description: The color of the chat bubble of the sender in the main app.
          type: string
          example: "#00000"
          nullable: true
        participant_chat_bubble_color:
          description: The color of the chat bubble of the participant in the main
            app.
          type: string
          example: "#00000"
          nullable: true
        sender_chat_bubble_text_color:
          description: The color of the text in chat bubble of the sender in the main
            app.
          type: string
          example: "#00000"
          nullable: true
        participant_chat_bubble_text_color:
          description: The color of the text in chat bubble of the participant in
            the main app.
          type: string
          example: "#00000"
          nullable: true
        client_sender_chat_bubble_color:
          description: The color of the chat bubble of the sender in the client app.
          type: string
          example: "#00000"
          nullable: true
        client_participant_chat_bubble_color:
          description: The color of the chat bubble of the participant in the client
            app.
          type: string
          example: "#00000"
          nullable: true
        client_sender_chat_bubble_text_color:
          description: The color of the text in chat bubble of the sender in the client
            app.
          type: string
          example: "#00000"
          nullable: true
        client_participant_chat_bubble_text_color:
          description: The color of the text in chat bubble of the participant in
            the client app.
          type: string
          example: "#00000"
          nullable: true
    TenantConfig:
      description: Configuration object for a specific tenant.
      required:
      - id
      - subdomain
      - frontendUrl
      - name
      - enabled
      - frontend_url
      - preferred_language
      type: object
      properties:
        id:
          description: Unique identifier for the tenant.
          type: string
          allOf:
          - $ref: "#/components/schemas/UUID"
          example: ace00000-ace0-ace0-ace0-ace000000000
        frontend_url:
          description: The URL of the frontend application.
          type: string
          example: https://autoclubmars.clientwire.net
        name:
          description: The name of the tenant.
          maxLength: 20
          minLength: 3
          pattern: "^[\\p{L}0-9][\\p{L}0-9 \\p{L}]+[\\p{L}0-9]$"
          type: string
          example: Autoclub of Mars
        preferred_language:
          description: The preferred language of the tenant.
          type: string
          example: en
        enabled:
          description: Indicates whether the tenant is enabled.
          type: boolean
          example: true
        color_config:
          description: The color configuration for the tenant.
          type: object
          allOf:
          - $ref: "#/components/schemas/TenantColorConfig"
          nullable: true
    TenantDomain:
      description: Domain information for a tenant
      required:
      - id
      - tenantId
      - domain
      - status
      type: object
      properties:
        id:
          description: Unique identifier for the domain record
          type: string
          allOf:
          - $ref: "#/components/schemas/UUID"
          example: ace00000-ace0-ace0-ace0-ace000000000
        tenantId:
          description: The tenant ID associated with this domain
          type: string
          allOf:
          - $ref: "#/components/schemas/UUID"
          example: ace00000-ace0-ace0-ace0-ace000000000
        domain:
          description: The full domain name
          type: string
          example: autoclubmars.wire.com or custom-domain.example.com
        is_client_app:
          description: Whether this domain is for the client app (true) or main app
            (false)
          type: boolean
          example: true
        is_system_domain:
          description: Whether this is a system-provided domain (true) or a custom
            domain (false)
          type: boolean
          example: true
        status:
          description: Whether the domain is created or requested
          type: string
          example: CREATED
    TenantDomainCreate:
      description: Request to create a custom domain for a tenant
      required:
      - domain
      type: object
      properties:
        domain:
          description: The full domain name
          pattern: "^([a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,}$"
          type: string
          example: custom-domain.example.com
        is_client_app:
          description: Whether this domain is for the client app (true) or main app
            (false)
          type: boolean
          example: false
    TenantDomainUpdate:
      description: Request to update a custom domain for a tenant
      required:
      - domain
      type: object
      properties:
        domain:
          description: The full domain name
          pattern: "^([a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,}$"
          type: string
          example: custom-domain.example.com
    TenantWebhookFeature:
      description: Represents a webhook feature configuration for a tenant
      required:
      - webhook_type
      type: object
      properties:
        webhook_type:
          description: The webhook type identifier
          type: string
          example: conversation.created
        enabled:
          description: Whether this webhook type is enabled for the tenant
          type: boolean
          example: true
    TenantWebhookSettings:
      description: Represents the webhook settings for a tenant.
      required:
      - tenant_id
      type: object
      properties:
        tenant_id:
          description: Tenant ID (UUID) as a string.
          type: string
          example: fa22b16e-2722-42c3-9106-d4c431ecd2ef
        signature_scheme:
          description: "Scheme used for signing webhooks, e.g. 'v1'."
          type: string
          allOf:
          - $ref: "#/components/schemas/WebhookSignatureScheme"
          example: v1
          nullable: true
        endpoint_url:
          description: The URL where webhooks will be posted.
          type: string
          example: https://example.com/webhooks
          nullable: true
        secret:
          description: "The plain (decrypted) secret, prefixed with whsec_. This is\
            \ only returned by certain endpoints."
          type: string
          example: whsec_ABC123...
          nullable: true
    TokenResponseDto:
      required:
      - access_token
      type: object
      properties:
        access_token:
          description: The access token.
          type: string
        id_token:
          description: The ID token (JWT).
          type: string
          nullable: true
        refresh_token:
          description: "Refresh token, if available."
          type: string
          nullable: true
        token_type:
          description: "Token type, typically 'Bearer'."
          type: string
          nullable: true
        expires_in:
          format: int32
          description: "Seconds until expiration, e.g. 3600."
          type: integer
          nullable: true
    TriggerKind:
      enum:
      - MESSAGE_ADDED_TO_CONVERSATION
      - CONVERSATION_CREATED
      - CONVERSATION_DATA_CHANGED
      type: string
    TwilioSettings:
      required:
      - username
      - account_sid
      type: object
      properties:
        username:
          description: The username of the Twilio account.
          type: string
        auth_token:
          description: The auth token of the Twilio account.
          type: string
          nullable: true
        account_sid:
          description: The account SID of the Twilio account.
          type: string
        account_auth_token:
          description: The account auth token of the Twilio account.
          type: string
          nullable: true
        message_service_sid:
          description: The message service SID of the Twilio account.
          type: string
          nullable: true
        phone_number:
          description: The phone number of the Twilio account.
          type: string
          nullable: true
    UUID:
      format: uuid
      pattern: "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
      type: string
    UpdateTenantWebhookFeature:
      description: Request body for updating a webhook feature configuration
      required:
      - webhook_type
      - enabled
      type: object
      properties:
        webhook_type:
          description: The webhook type identifier
          type: string
          example: conversation.created
        enabled:
          description: Whether this webhook type is enabled for the tenant
          type: boolean
          example: true
    UpdateWebhookSettingsRequest:
      description: Request for updating only the endpoint URL.
      required:
      - endpoint_url
      type: object
      properties:
        endpoint_url:
          description: The new endpoint URL for receiving webhooks
          pattern: "^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]"
          type: string
          example: https://myapp.com/webhooks
    User:
      description: Represents a user with an ID and email address.
      required:
      - id
      - email
      - role
      - firstname
      - lastname
      type: object
      properties:
        id:
          description: Unique identifier for the user.
          type: string
          allOf:
          - $ref: "#/components/schemas/UUID"
          example: ace00000-ace0-ace0-ace0-ace000000000
        email:
          format: email
          description: The email address of the user.
          type: string
          example: user@example.com
        role:
          description: The role assigned to the user. OWNER or USER
          default: USER
          type: string
          allOf:
          - $ref: "#/components/schemas/UserRole"
          example: OWNER
        firstname:
          description: The first name of the user to create.
          type: string
          example: Philipp
        lastname:
          description: The last name of the user to create.
          type: string
          example: Schmid
    UserListResponse:
      required:
      - users
      type: object
      properties:
        users:
          description: A list of users.
          type: array
          items:
            $ref: "#/components/schemas/User"
    UserPreference:
      required:
      - user_id
      type: object
      properties:
        user_id:
          description: Unique identifier for the user.
          type: string
          allOf:
          - $ref: "#/components/schemas/UUID"
          example: ace00000-ace0-ace0-ace0-ace000000000
          nullable: true
        preferred_conversation_type_id:
          description: Unique identifier for the preferred conversation type.
          maxLength: 50
          pattern: "\"^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]?$\""
          type: string
          example: breakdowncase
          nullable: true
        preferred_language:
          description: "Identifier for the preferred language. Possible values: en,\
            \ de"
          type: string
          allOf:
          - $ref: "#/components/schemas/Language"
          example: EN
          nullable: true
        created_at:
          description: Timestamp when the user preferences were created.
          type: string
          allOf:
          - $ref: "#/components/schemas/Instant"
          example: 2022-11-03T20:26:10.344522Z
          nullable: true
        updated_at:
          description: Timestamp when the user preferences were last updated. Initially
            the same as created_at.
          type: string
          allOf:
          - $ref: "#/components/schemas/Instant"
          example: 2022-11-03T20:26:10.344522Z
          nullable: true
    UserPreferencePostRequest:
      type: object
      properties:
        preferred_conversation_type_id:
          description: Unique identifier for the preferred conversation type.
          maxLength: 50
          pattern: "\"^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]?$\""
          type: string
          example: breakdowncase
          nullable: true
        preferred_language:
          description: "Unique identifier for the language. Possible values: en, de"
          type: string
          allOf:
          - $ref: "#/components/schemas/Language"
          example: en
          nullable: true
    UserPreferencePostRequest1:
      type: object
      properties:
        preferred_conversation_type_id:
          description: Unique identifier for the preferred conversation type.
          maxLength: 50
          pattern: "\"^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]?$\""
          type: string
          example: breakdowncase
          nullable: true
        preferred_language:
          description: "Unique identifier for the language. Possible values: en, de"
          type: string
          allOf:
          - $ref: "#/components/schemas/Language"
          example: en
          nullable: true
    UserRole:
      enum:
      - OWNER
      - USER
      type: string
    WebhookAssetResponse:
      type: object
      properties:
        download_url:
          description: URL to download the created asset
          type: string
          example: "null"
          nullable: true
        upload_url:
          description: URL to upload a asset
          type: string
          example: "null"
          nullable: true
        status:
          description: The status of the asset.
          type: string
          allOf:
          - $ref: "#/components/schemas/Status"
          example: UPLOAD_COMPLETED
          nullable: true
    WebhookConversation:
      required:
      - id
      - archived
      - conversation_type_id
      type: object
      properties:
        id:
          description: Unique identifier for a conversation.
          type: string
          example: Abc123
        archived:
          description: Indicates whether the conversation is archived.
          type: boolean
          example: true
        conversation_type_id:
          description: Unique identifier for a conversation type.
          type: string
          example: breakdowncase
          nullable: true
    WebhookConversationSharedUserParticipantReadStatus:
      required:
      - id
      type: object
      properties:
        id:
          description: Unique identifier for a conversation.
          type: string
          example: Abc123
        last_message_seen:
          format: int32
          description: The last seen message sequence number for all user participants
            in the conversation.
          type: integer
          example: 0
        unread_message_count:
          format: int32
          description: The unread message count for all user participants in the conversation.
          type: integer
          example: 0
    WebhookMessage:
      required:
      - id
      - tenant_id
      - created_at
      - updated_at
      - conversation_id
      - participant_id
      - sequence
      - kind
      type: object
      properties:
        id:
          description: Unique identifier for a message.
          type: string
          example: eee00000-eee0000-eee00-eee00-eee000000
        tenant_id:
          format: uuid
          description: Unique identifier for the tenant.
          type: string
          example: ace00000-ace0-ace0-ace0-ace000000000
        created_at:
          description: Timestamp when the conversation was created.
          type: string
          allOf:
          - $ref: "#/components/schemas/Instant"
          example: 2022-11-03T20:26:10.344522Z
        updated_at:
          description: Timestamp when the conversation was last updated. Initially
            the same as created_at.
          type: string
          allOf:
          - $ref: "#/components/schemas/Instant"
          example: 2022-11-03T20:26:10.344522Z
        conversation_id:
          description: Unique identifier for a conversation type.
          maxLength: 50
          pattern: "\"^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]?$\""
          type: string
          example: Abc123
        participant_id:
          description: The id of the participant this messages is posted by.
          maxLength: 50
          pattern: "\"^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]?$\""
          type: string
          example: client123
        sequence:
          format: int32
          description: The sequence of the message in the conversation. This will
            be null if the message has not been processed yet.
          type: integer
          example: 0
          nullable: true
        kind:
          description: The kind of message.
          type: string
          allOf:
          - $ref: "#/components/schemas/WebhookMessageKind"
          example: TEXT
        text:
          description: "The text of the message. If kind is TEXT or REQUEST_LOCATION,\
            \ this field is required."
          maxLength: 4096
          minLength: 1
          type: string
          example: "Hello, how can I help you?"
          nullable: true
        location:
          description: ""
          type: object
          allOf:
          - $ref: "#/components/schemas/Location"
          nullable: true
        formatted_address:
          description: The formatted address of the location.
          type: string
          example: "Biberstraße 9, 1010 Vienna, Austria"
          nullable: true
        asset:
          description: ""
          type: object
          allOf:
          - $ref: "#/components/schemas/WebhookAssetResponse"
          nullable: true
        source_id:
          description: Source id of the message.
          type: string
          example: 0193df26-54b2-7142-ab2b-faba1babd679
          nullable: true
    WebhookMessageKind:
      enum:
      - TEXT
      - LOCATION
      - IMAGE
      - VIDEO
      - AUDIO
      - REQUEST_LOCATION
      type: string
    WebhookSignatureScheme:
      description: Schemes for signing webhooks. Currently only `v1` is supported.
      enum:
      - v1
      type: string
    Workflow:
      required:
      - id
      - trigger
      - createdAt
      - updatedAt
      type: object
      properties:
        id:
          format: uuid
          description: Unique identifier for the workflow.
          type: string
          example: ace00000-ace0-ace0-ace0-ace000000000
          nullable: true
        conversation_type_id:
          description: The id of the conversation type to be assigned to this conversation.
          maxLength: 50
          pattern: "\"^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]?$\""
          type: string
          example: breakdowncase
          nullable: true
        trigger:
          $ref: "#/components/schemas/WorkflowTrigger"
        createdAt:
          type: string
          allOf:
          - $ref: "#/components/schemas/Instant"
          example: 2023-09-10T12:34:56.789Z
          nullable: true
        updatedAt:
          type: string
          allOf:
          - $ref: "#/components/schemas/Instant"
          example: 2023-09-10T12:35:00.123Z
          nullable: true
        enabled:
          description: The workflow status. The workflow will run only if it is enabled.
          type: boolean
    WorkflowAction:
      required:
      - kind
      type: object
      properties:
        kind:
          description: What should happen when a workflow is triggered.
          type: string
          allOf:
          - $ref: "#/components/schemas/ActionKind"
          example: NOTIFY_PARTICIPANTS
        template_name:
          description: The name of the message template that should be used to build
            the message if relevant.
          type: string
          example: MyTemplate
          nullable: true
    WorkflowPaginatedResponse:
      required:
      - has_more
      - total_elements
      - limit
      - workflows
      type: object
      properties:
        has_more:
          description: Indicates if there are more pages to fetch.
          type: boolean
          example: "null"
        total_elements:
          format: int32
          description: Total number of elements across all pages.
          type: integer
          example: "null"
          nullable: true
        limit:
          format: int32
          description: The maximum number of elements in this page.
          type: integer
          example: "null"
          nullable: true
        workflows:
          description: List of workflows.
          type: array
          items:
            $ref: "#/components/schemas/Workflow"
        offset:
          format: int32
          description: The offset of the first element in this page (for offset-based
            pagination). Either offset or last_sequence must be set.
          type: integer
          example: "null"
          nullable: true
        last_sequence:
          format: int32
          description: The sequence (or key) of the last element in this page (for
            key-based pagination). Either offset or last_sequence must be set.
          type: integer
          example: "null"
          nullable: true
    WorkflowPostRequest:
      required:
      - trigger
      type: object
      properties:
        conversation_type_id:
          description: The id of the conversation type to be assigned to this conversation.
          maxLength: 50
          pattern: "\"^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]?$\""
          type: string
          example: breakdowncase
          nullable: true
        trigger:
          $ref: "#/components/schemas/WorkflowTrigger"
    WorkflowPutRequest:
      required:
      - trigger
      type: object
      properties:
        conversation_type_id:
          description: The id of the conversation type to be assigned to this conversation.
          maxLength: 50
          pattern: "\"^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]?$\""
          type: string
          example: breakdowncase
          nullable: true
        trigger:
          $ref: "#/components/schemas/WorkflowTrigger"
        enabled:
          description: The workflow status. The workflow will run only if it is enabled.
          type: boolean
    WorkflowTrigger:
      description: Base interface for workflow triggers
      required:
      - kind
      - action
      type: object
      properties:
        kind:
          description: Discriminator property to identify the trigger type
          enum:
          - MESSAGE_ADDED_TO_CONVERSATION
          - CONVERSATION_CREATED
          - CONVERSATION_DATA_CHANGED
          type: string
          allOf:
          - $ref: "#/components/schemas/TriggerKind"
        action:
          description: Action to be executed when trigger happens.
          type: object
          allOf:
          - $ref: "#/components/schemas/WorkflowAction"
          example: NOTIFY_PARTICIPANTS
          nullable: true
      discriminator:
        propertyName: kind
        mapping:
          MESSAGE_ADDED_TO_CONVERSATION: "#/components/schemas/MessageAddedToConversationTrigger"
          CONVERSATION_CREATED: "#/components/schemas/ConversationCreatedTrigger"
          CONVERSATION_DATA_CHANGED: "#/components/schemas/ConversationDataChangedTrigger"
    WsAuthenticate:
      type: object
      properties:
        type:
          description: Type of the message
          default: AUTHENTICATE
          type: string
          example: AUTHENTICATE
          nullable: true
        token:
          description: Access Token
          type: string
          nullable: true
    WsConversationArchived:
      required:
      - type
      - conversation_id
      - archived
      type: object
      properties:
        type:
          description: Type of the message
          default: CONVERSATION_ARCHIVED
          type: string
          example: CONVERSATION_ARCHIVED
        conversation_id:
          description: The conversation ID
          type: string
          example: ccc00000-ccc0000-ccc00-ccc00-ccc000000
        archived:
          description: Indicates whether the conversation is archived.
          type: boolean
          example: true
    WsConversationReadStatus:
      required:
      - conversation_id
      type: object
      properties:
        type:
          description: Type of the message
          default: CONVERSATION_READ_STATUS
          type: string
          example: CONVERSATION_READ_STATUS
          nullable: true
        conversation_id:
          description: The id of the conversation.
          maxLength: 50
          pattern: "\"^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]?$\""
          type: string
          example: Abc123
        last_message_sequence_seen:
          format: int32
          description: Last message sequence seen by any of the user participants
          type: integer
        unread_messages_count:
          format: int32
          description: The minimum of unread messages from all user participants.
          type: integer
          example: 3
          nullable: true
    WsConversationUpdated:
      required:
      - conversation
      type: object
      properties:
        type:
          description: Type of the message
          default: CONVERSATION_UPDATED
          type: string
          example: CONVERSATION_UPDATED
          nullable: true
        conversation:
          $ref: "#/components/schemas/Conversation"
    WsMessageUpdated:
      required:
      - message
      type: object
      properties:
        type:
          description: Type of the message
          default: MESSAGE_UPDATED
          type: string
          example: MESSAGE_UPDATED
          nullable: true
        message:
          $ref: "#/components/schemas/Message"
    WsNewConversation:
      required:
      - conversation_id
      type: object
      properties:
        type:
          description: Type of the message
          default: NEW_CONVERSATION
          type: string
          example: NEW_CONVERSATION
          nullable: true
        conversation_id:
          description: The conversation ID
          type: string
          example: ccc00000-ccc0000-ccc00-ccc00-ccc000000
    WsNewMessage:
      required:
      - message
      type: object
      properties:
        type:
          description: Type of the message
          default: NEW_MESSAGE
          type: string
          example: NEW_MESSAGE
          nullable: true
        message:
          $ref: "#/components/schemas/Message"
    WsParticipantHadConversationOpen:
      required:
      - participant_id
      - conversation_id
      - had_conversation_open_at
      type: object
      properties:
        type:
          description: Type of the message
          default: PARTICIPANT_HAD_CONVERSATION_OPEN
          type: string
          example: PARTICIPANT_HAD_CONVERSATION_OPEN
          nullable: true
        participant_id:
          description: Participant ID
          type: string
        conversation_id:
          description: Conversation ID
          type: string
        had_conversation_open_at:
          description: The participant had the conversation open at this time
          type: string
          allOf:
          - $ref: "#/components/schemas/Instant"
          example: 2022-03-10T16:15:50Z
    WsParticipantReadStatus:
      required:
      - participant_id
      - conversation_id
      type: object
      properties:
        type:
          description: Type of the message
          default: PARTICIPANT_READ_STATUS
          type: string
          example: PARTICIPANT_READ_STATUS
          nullable: true
        participant_id:
          description: Participant ID
          type: string
        conversation_id:
          description: Conversation ID
          type: string
        last_message_sequence_seen:
          format: int32
          description: Last message sequence seen by the participant in the conversation
          type: integer
        unread_messages_count:
          format: int32
          description: How many unread messages has the participant in the conversation
          type: integer
    WsParticipantWasTyping:
      required:
      - participant_id
      - conversation_id
      - wasTypingAt
      - sourceId
      type: object
      properties:
        type:
          description: Type of the message
          default: PARTICIPANT_WAS_TYPING
          type: string
          example: PARTICIPANT_WAS_TYPING
          nullable: true
        participant_id:
          description: Participant ID
          type: string
        conversation_id:
          description: Conversation ID
          type: string
        wasTypingAt:
          description: The participant has been typing at this time
          type: string
          allOf:
          - $ref: "#/components/schemas/Instant"
          example: 2022-03-10T16:15:50Z
        sourceId:
          description: The participant has been typing for this message_source_id
          type: string
    WsPing:
      type: object
      properties:
        type:
          description: Type of the message
          default: PING
          type: string
          example: PING
          nullable: true
    WsPong:
      type: object
      properties:
        type:
          description: Type of the message
          default: PONG
          type: string
          example: PONG
          nullable: true
    WsSubscribe:
      required:
      - address
      type: object
      properties:
        type:
          description: Type of the message
          default: SUBSCRIBE
          type: string
          example: SUBSCRIBE
          nullable: true
        address:
          type: string
    WsUnsubscribe:
      required:
      - address
      type: object
      properties:
        type:
          description: Type of the message
          default: UNSUBSCRIBE
          type: string
          example: UNSUBSCRIBE
          nullable: true
        address:
          type: string
