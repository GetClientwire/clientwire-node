/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ParticipantPostRequest } from './participant-post-request';
import {
    ParticipantPostRequestFromJSON,
    ParticipantPostRequestFromJSONTyped,
    ParticipantPostRequestToJSON,
    ParticipantPostRequestToJSONTyped,
} from './participant-post-request';

/**
 * 
 * @export
 * @interface ConversationPutRequest
 */
export interface ConversationPutRequest {
    /**
     * Unique identifier for a conversation. If the conversation is created, this field will be ignored. The id from the URL takes precedence.
     * @type {string}
     * @memberof ConversationPutRequest
     */
    id: string;
    /**
     * Unique identifier for a conversation type. If the conversation already exists, this field will be ignored.
     * @type {string}
     * @memberof ConversationPutRequest
     */
    conversationTypeId: string;
    /**
     * The data of a conversation corresponding to the conversation_data_schema of the conversation type.
     * @type {any}
     * @memberof ConversationPutRequest
     */
    conversationData?: any | null;
    /**
     * Indicates whether the conversation is archived. This can only be set to false if the conversation already exists.
     * @type {boolean}
     * @memberof ConversationPutRequest
     */
    archived?: boolean;
    /**
     * 
     * @type {Array<ParticipantPostRequest>}
     * @memberof ConversationPutRequest
     */
    participants?: Array<ParticipantPostRequest> | null;
}

/**
 * Check if a given object implements the ConversationPutRequest interface.
 */
export function instanceOfConversationPutRequest(value: object): value is ConversationPutRequest {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('conversationTypeId' in value) || value['conversationTypeId'] === undefined) return false;
    return true;
}

export function ConversationPutRequestFromJSON(json: any): ConversationPutRequest {
    return ConversationPutRequestFromJSONTyped(json, false);
}

export function ConversationPutRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConversationPutRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'conversationTypeId': json['conversation_type_id'],
        'conversationData': json['conversation_data'] == null ? undefined : json['conversation_data'],
        'archived': json['archived'] == null ? undefined : json['archived'],
        'participants': json['participants'] == null ? undefined : ((json['participants'] as Array<any>).map(ParticipantPostRequestFromJSON)),
    };
}

export function ConversationPutRequestToJSON(json: any): ConversationPutRequest {
    return ConversationPutRequestToJSONTyped(json, false);
}

export function ConversationPutRequestToJSONTyped(value?: ConversationPutRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'conversation_type_id': value['conversationTypeId'],
        'conversation_data': value['conversationData'],
        'archived': value['archived'],
        'participants': value['participants'] == null ? undefined : ((value['participants'] as Array<any>).map(ParticipantPostRequestToJSON)),
    };
}

