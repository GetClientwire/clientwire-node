/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserRole } from './user-role';
import {
    UserRoleFromJSON,
    UserRoleFromJSONTyped,
    UserRoleToJSON,
    UserRoleToJSONTyped,
} from './user-role';

/**
 * Request body used to create a new user.
 * @export
 * @interface CreateUserRequest
 */
export interface CreateUserRequest {
    /**
     * User's email address.
     * @type {string}
     * @memberof CreateUserRequest
     */
    email: string;
    /**
     * Plain-text password. Will be hashed before storage.
     * @type {string}
     * @memberof CreateUserRequest
     */
    password: string;
    /**
     * The first name of the user to create.
     * @type {string}
     * @memberof CreateUserRequest
     */
    firstname?: string | null;
    /**
     * The last name of the user to create.
     * @type {string}
     * @memberof CreateUserRequest
     */
    lastname?: string | null;
    /**
     * The role assigned to the user. OWNER or USER
     * @type {UserRole}
     * @memberof CreateUserRequest
     */
    role?: UserRole | null;
}



/**
 * Check if a given object implements the CreateUserRequest interface.
 */
export function instanceOfCreateUserRequest(value: object): value is CreateUserRequest {
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('password' in value) || value['password'] === undefined) return false;
    return true;
}

export function CreateUserRequestFromJSON(json: any): CreateUserRequest {
    return CreateUserRequestFromJSONTyped(json, false);
}

export function CreateUserRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateUserRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'email': json['email'],
        'password': json['password'],
        'firstname': json['firstname'] == null ? undefined : json['firstname'],
        'lastname': json['lastname'] == null ? undefined : json['lastname'],
        'role': json['role'] == null ? undefined : UserRoleFromJSON(json['role']),
    };
}

export function CreateUserRequestToJSON(json: any): CreateUserRequest {
    return CreateUserRequestToJSONTyped(json, false);
}

export function CreateUserRequestToJSONTyped(value?: CreateUserRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'email': value['email'],
        'password': value['password'],
        'firstname': value['firstname'],
        'lastname': value['lastname'],
        'role': UserRoleToJSON(value['role']),
    };
}

