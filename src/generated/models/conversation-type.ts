/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ConversationType
 */
export interface ConversationType {
    /**
     * Unique identifier for a conversation type.
     * @type {string}
     * @memberof ConversationType
     */
    id: string;
    /**
     * Unique identifier for the tenant.
     * @type {string}
     * @memberof ConversationType
     */
    tenantId: string;
    /**
     * Timestamp when the conversation type was created.
     * @type {Date}
     * @memberof ConversationType
     */
    createdAt: Date;
    /**
     * Timestamp when the conversation type was last updated. Initially the same as created_at.
     * @type {Date}
     * @memberof ConversationType
     */
    updatedAt: Date;
    /**
     * A description of what this conversation type is used for.
     * @type {string}
     * @memberof ConversationType
     */
    description?: string | null;
    /**
     * If set, all user participants will appear as the same user in the conversation to client participants.
     * @type {string}
     * @memberof ConversationType
     */
    displayNameSharedByUsers?: string | null;
    /**
     * If set, all user participants share the read status
     * @type {boolean}
     * @memberof ConversationType
     */
    sharedReadStatusForUserParticipants?: boolean | null;
    /**
     * If set, all workflow participants will appear with this name in the conversation to client participants.
     * @type {string}
     * @memberof ConversationType
     */
    displayNameForWorkflowParticipants?: string | null;
    /**
     * A JSON Schema describing the data expected in the conversation.
     * @type {any}
     * @memberof ConversationType
     */
    conversationDataSchema?: any | null;
    /**
     * A handlebars template string used to render the conversation data in a list view. The template can contain placeholders for data in the conversation data schema.
     * @type {string}
     * @memberof ConversationType
     */
    conversationDataListItemTemplate?: string | null;
    /**
     * An HTML template to reader the header in the client app which has dynamic values based on the conversation_data
     * @type {string}
     * @memberof ConversationType
     */
    clientAppHeaderTemplate?: string | null;
    /**
     * If set, the SMS messages will have this value as sender
     * @type {string}
     * @memberof ConversationType
     */
    smsSenderId?: string | null;
    /**
     * The name of the message template that should be used to render the sms text used to notify the client participants.
     * @type {string}
     * @memberof ConversationType
     */
    smsTemplateName?: string | null;
    /**
     * The name of the message template that should be used to render the email body used to notify the client participants.
     * @type {string}
     * @memberof ConversationType
     */
    emailTemplateName?: string | null;
}

/**
 * Check if a given object implements the ConversationType interface.
 */
export function instanceOfConversationType(value: object): value is ConversationType {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('tenantId' in value) || value['tenantId'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function ConversationTypeFromJSON(json: any): ConversationType {
    return ConversationTypeFromJSONTyped(json, false);
}

export function ConversationTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConversationType {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'tenantId': json['tenant_id'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'description': json['description'] == null ? undefined : json['description'],
        'displayNameSharedByUsers': json['display_name_shared_by_users'] == null ? undefined : json['display_name_shared_by_users'],
        'sharedReadStatusForUserParticipants': json['shared_read_status_for_user_participants'] == null ? undefined : json['shared_read_status_for_user_participants'],
        'displayNameForWorkflowParticipants': json['display_name_for_workflow_participants'] == null ? undefined : json['display_name_for_workflow_participants'],
        'conversationDataSchema': json['conversation_data_schema'] == null ? undefined : json['conversation_data_schema'],
        'conversationDataListItemTemplate': json['conversation_data_list_item_template'] == null ? undefined : json['conversation_data_list_item_template'],
        'clientAppHeaderTemplate': json['client_app_header_template'] == null ? undefined : json['client_app_header_template'],
        'smsSenderId': json['sms_sender_id'] == null ? undefined : json['sms_sender_id'],
        'smsTemplateName': json['sms_template_name'] == null ? undefined : json['sms_template_name'],
        'emailTemplateName': json['email_template_name'] == null ? undefined : json['email_template_name'],
    };
}

export function ConversationTypeToJSON(json: any): ConversationType {
    return ConversationTypeToJSONTyped(json, false);
}

export function ConversationTypeToJSONTyped(value?: ConversationType | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'tenant_id': value['tenantId'],
        'created_at': ((value['createdAt']).toISOString()),
        'updated_at': ((value['updatedAt']).toISOString()),
        'description': value['description'],
        'display_name_shared_by_users': value['displayNameSharedByUsers'],
        'shared_read_status_for_user_participants': value['sharedReadStatusForUserParticipants'],
        'display_name_for_workflow_participants': value['displayNameForWorkflowParticipants'],
        'conversation_data_schema': value['conversationDataSchema'],
        'conversation_data_list_item_template': value['conversationDataListItemTemplate'],
        'client_app_header_template': value['clientAppHeaderTemplate'],
        'sms_sender_id': value['smsSenderId'],
        'sms_template_name': value['smsTemplateName'],
        'email_template_name': value['emailTemplateName'],
    };
}

