/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * The data needed to create a new tenant and an owner user.
 * @export
 * @interface SignupRequest
 */
export interface SignupRequest {
    /**
     * The name of the tenant to create.
     * @type {string}
     * @memberof SignupRequest
     */
    tenantName: string;
    /**
     * The subdomain of the tenant to create. Used as the subdomain in the URL.
     * @type {string}
     * @memberof SignupRequest
     */
    tenantSubdomain: string;
    /**
     * The email of the user to create (receives 'OWNER' role). Email confirmation is required.
     * @type {string}
     * @memberof SignupRequest
     */
    userEmail: string;
    /**
     * The password for the new user account. (In real scenarios, note security concerns around plain-text passwords.)
     * @type {string}
     * @memberof SignupRequest
     */
    userPassword: string;
    /**
     * The first name of the user to create.
     * @type {string}
     * @memberof SignupRequest
     */
    userFirstname?: string | null;
    /**
     * The last name of the user to create.
     * @type {string}
     * @memberof SignupRequest
     */
    userLastname?: string | null;
}

/**
 * Check if a given object implements the SignupRequest interface.
 */
export function instanceOfSignupRequest(value: object): value is SignupRequest {
    if (!('tenantName' in value) || value['tenantName'] === undefined) return false;
    if (!('tenantSubdomain' in value) || value['tenantSubdomain'] === undefined) return false;
    if (!('userEmail' in value) || value['userEmail'] === undefined) return false;
    if (!('userPassword' in value) || value['userPassword'] === undefined) return false;
    return true;
}

export function SignupRequestFromJSON(json: any): SignupRequest {
    return SignupRequestFromJSONTyped(json, false);
}

export function SignupRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): SignupRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'tenantName': json['tenant_name'],
        'tenantSubdomain': json['tenant_subdomain'],
        'userEmail': json['user_email'],
        'userPassword': json['user_password'],
        'userFirstname': json['user_firstname'] == null ? undefined : json['user_firstname'],
        'userLastname': json['user_lastname'] == null ? undefined : json['user_lastname'],
    };
}

export function SignupRequestToJSON(json: any): SignupRequest {
    return SignupRequestToJSONTyped(json, false);
}

export function SignupRequestToJSONTyped(value?: SignupRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'tenant_name': value['tenantName'],
        'tenant_subdomain': value['tenantSubdomain'],
        'user_email': value['userEmail'],
        'user_password': value['userPassword'],
        'user_firstname': value['userFirstname'],
        'user_lastname': value['userLastname'],
    };
}

