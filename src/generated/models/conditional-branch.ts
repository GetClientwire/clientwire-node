/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { WorkflowAction } from './workflow-action';
import {
    WorkflowActionFromJSON,
    WorkflowActionFromJSONTyped,
    WorkflowActionToJSON,
    WorkflowActionToJSONTyped,
} from './workflow-action';
import type { ConditionNode } from './condition-node';
import {
    ConditionNodeFromJSON,
    ConditionNodeFromJSONTyped,
    ConditionNodeToJSON,
    ConditionNodeToJSONTyped,
} from './condition-node';

/**
 * 
 * @export
 * @interface ConditionalBranch
 */
export interface ConditionalBranch {
    /**
     * 
     * @type {ConditionNode}
     * @memberof ConditionalBranch
     */
    conditionNode: ConditionNode;
    /**
     * 
     * @type {WorkflowAction}
     * @memberof ConditionalBranch
     */
    action: WorkflowAction;
}

/**
 * Check if a given object implements the ConditionalBranch interface.
 */
export function instanceOfConditionalBranch(value: object): value is ConditionalBranch {
    if (!('conditionNode' in value) || value['conditionNode'] === undefined) return false;
    if (!('action' in value) || value['action'] === undefined) return false;
    return true;
}

export function ConditionalBranchFromJSON(json: any): ConditionalBranch {
    return ConditionalBranchFromJSONTyped(json, false);
}

export function ConditionalBranchFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConditionalBranch {
    if (json == null) {
        return json;
    }
    return {
        
        'conditionNode': ConditionNodeFromJSON(json['condition_node']),
        'action': WorkflowActionFromJSON(json['action']),
    };
}

export function ConditionalBranchToJSON(json: any): ConditionalBranch {
    return ConditionalBranchToJSONTyped(json, false);
}

export function ConditionalBranchToJSONTyped(value?: ConditionalBranch | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'condition_node': ConditionNodeToJSON(value['conditionNode']),
        'action': WorkflowActionToJSON(value['action']),
    };
}

