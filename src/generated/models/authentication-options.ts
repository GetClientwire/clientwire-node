/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LoginOptionsOidcProvider } from './login-options-oidc-provider';
import {
    LoginOptionsOidcProviderFromJSON,
    LoginOptionsOidcProviderFromJSONTyped,
    LoginOptionsOidcProviderToJSON,
    LoginOptionsOidcProviderToJSONTyped,
} from './login-options-oidc-provider';

/**
 * 
 * @export
 * @interface AuthenticationOptions
 */
export interface AuthenticationOptions {
    /**
     * If email login is available.
     * @type {boolean}
     * @memberof AuthenticationOptions
     */
    email?: boolean;
    /**
     * If WebAuthN/PassKey login is available.
     * @type {boolean}
     * @memberof AuthenticationOptions
     */
    webauthn?: boolean;
    /**
     * Which OIDC providers are available for login.
     * @type {Array<LoginOptionsOidcProvider>}
     * @memberof AuthenticationOptions
     */
    oidcProviders: Array<LoginOptionsOidcProvider>;
}

/**
 * Check if a given object implements the AuthenticationOptions interface.
 */
export function instanceOfAuthenticationOptions(value: object): value is AuthenticationOptions {
    if (!('oidcProviders' in value) || value['oidcProviders'] === undefined) return false;
    return true;
}

export function AuthenticationOptionsFromJSON(json: any): AuthenticationOptions {
    return AuthenticationOptionsFromJSONTyped(json, false);
}

export function AuthenticationOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthenticationOptions {
    if (json == null) {
        return json;
    }
    return {
        
        'email': json['email'] == null ? undefined : json['email'],
        'webauthn': json['webauthn'] == null ? undefined : json['webauthn'],
        'oidcProviders': ((json['oidc_providers'] as Array<any>).map(LoginOptionsOidcProviderFromJSON)),
    };
}

export function AuthenticationOptionsToJSON(json: any): AuthenticationOptions {
    return AuthenticationOptionsToJSONTyped(json, false);
}

export function AuthenticationOptionsToJSONTyped(value?: AuthenticationOptions | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'email': value['email'],
        'webauthn': value['webauthn'],
        'oidc_providers': ((value['oidcProviders'] as Array<any>).map(LoginOptionsOidcProviderToJSON)),
    };
}

