/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import { CompoundConditionNode, CompoundConditionNodeFromJSONTyped, CompoundConditionNodeToJSON, CompoundConditionNodeToJSONTyped } from './compound-condition-node';
import { LeafConditionNode, LeafConditionNodeFromJSONTyped, LeafConditionNodeToJSON, LeafConditionNodeToJSONTyped } from './leaf-condition-node';
/**
 * 
 * @export
 * @interface ConditionNode
 */
export interface ConditionNode {
    /**
     * Discriminator property to identify the node kind
     * @type {string}
     * @memberof ConditionNode
     */
    kind: ConditionNodeKindEnum;
}


/**
 * @export
 */
export const ConditionNodeKindEnum = {
    Compound: 'COMPOUND',
    Leaf: 'LEAF'
} as const;
export type ConditionNodeKindEnum = typeof ConditionNodeKindEnum[keyof typeof ConditionNodeKindEnum];


/**
 * Check if a given object implements the ConditionNode interface.
 */
export function instanceOfConditionNode(value: object): value is ConditionNode {
    if (!('kind' in value) || value['kind'] === undefined) return false;
    return true;
}

export function ConditionNodeFromJSON(json: any): ConditionNode {
    return ConditionNodeFromJSONTyped(json, false);
}

export function ConditionNodeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConditionNode {
    if (json == null) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['kind'] === 'COMPOUND') {
            return CompoundConditionNodeFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['kind'] === 'LEAF') {
            return LeafConditionNodeFromJSONTyped(json, ignoreDiscriminator);
        }
    }
    return {
        
        'kind': json['kind'],
    };
}

export function ConditionNodeToJSON(json: any): ConditionNode {
    return ConditionNodeToJSONTyped(json, false);
}

export function ConditionNodeToJSONTyped(value?: ConditionNode | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    if (!ignoreDiscriminator) {
        switch (value['kind']) {
            case 'COMPOUND':
                return CompoundConditionNodeToJSONTyped(value as CompoundConditionNode, ignoreDiscriminator);
            case 'LEAF':
                return LeafConditionNodeToJSONTyped(value as LeafConditionNode, ignoreDiscriminator);
            default:
                throw new Error(`No variant of ConditionNode exists with 'kind=${value['kind']}'`);
        }
    }

    return {
        
        'kind': value['kind'],
    };
}

