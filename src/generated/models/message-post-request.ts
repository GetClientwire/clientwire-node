/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MessageKind } from './message-kind';
import {
    MessageKindFromJSON,
    MessageKindFromJSONTyped,
    MessageKindToJSON,
    MessageKindToJSONTyped,
} from './message-kind';
import type { Location } from './location';
import {
    LocationFromJSON,
    LocationFromJSONTyped,
    LocationToJSON,
    LocationToJSONTyped,
} from './location';

/**
 * 
 * @export
 * @interface MessagePostRequest
 */
export interface MessagePostRequest {
    /**
     * The id of the participant this messages is posted by.
     * @type {string}
     * @memberof MessagePostRequest
     */
    participantId: string;
    /**
     * The kind of message.
     * @type {MessageKind}
     * @memberof MessagePostRequest
     */
    kind: MessageKind;
    /**
     * The text of the message. If kind is TEXT or REQUEST_LOCATION, this field is required.
     * @type {string}
     * @memberof MessagePostRequest
     */
    text?: string | null;
    /**
     * 
     * @type {Location}
     * @memberof MessagePostRequest
     */
    location?: Location | null;
    /**
     * The formatted address of the location.
     * @type {string}
     * @memberof MessagePostRequest
     */
    formattedAddress?: string | null;
    /**
     * Source id of the message, if not provided a random UUID will be used.
     * @type {string}
     * @memberof MessagePostRequest
     */
    sourceId?: string | null;
}



/**
 * Check if a given object implements the MessagePostRequest interface.
 */
export function instanceOfMessagePostRequest(value: object): value is MessagePostRequest {
    if (!('participantId' in value) || value['participantId'] === undefined) return false;
    if (!('kind' in value) || value['kind'] === undefined) return false;
    return true;
}

export function MessagePostRequestFromJSON(json: any): MessagePostRequest {
    return MessagePostRequestFromJSONTyped(json, false);
}

export function MessagePostRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessagePostRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'participantId': json['participant_id'],
        'kind': MessageKindFromJSON(json['kind']),
        'text': json['text'] == null ? undefined : json['text'],
        'location': json['location'] == null ? undefined : LocationFromJSON(json['location']),
        'formattedAddress': json['formatted_address'] == null ? undefined : json['formatted_address'],
        'sourceId': json['source_id'] == null ? undefined : json['source_id'],
    };
}

export function MessagePostRequestToJSON(json: any): MessagePostRequest {
    return MessagePostRequestToJSONTyped(json, false);
}

export function MessagePostRequestToJSONTyped(value?: MessagePostRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'participant_id': value['participantId'],
        'kind': MessageKindToJSON(value['kind']),
        'text': value['text'],
        'location': LocationToJSON(value['location']),
        'formatted_address': value['formattedAddress'],
        'source_id': value['sourceId'],
    };
}

