/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ConditionNode } from './condition-node';
import {
    ConditionNodeFromJSON,
    ConditionNodeFromJSONTyped,
    ConditionNodeToJSON,
    ConditionNodeToJSONTyped,
} from './condition-node';
import type { LogicalOperatorDto } from './logical-operator-dto';
import {
    LogicalOperatorDtoFromJSON,
    LogicalOperatorDtoFromJSONTyped,
    LogicalOperatorDtoToJSON,
    LogicalOperatorDtoToJSONTyped,
} from './logical-operator-dto';

/**
 * 
 * @export
 * @interface CompoundConditionNode
 */
export interface CompoundConditionNode {
    /**
     * Discriminator property to identify the node kind
     * @type {string}
     * @memberof CompoundConditionNode
     */
    kind: CompoundConditionNodeKindEnum;
    /**
     * 
     * @type {LogicalOperatorDto}
     * @memberof CompoundConditionNode
     */
    operator: LogicalOperatorDto;
    /**
     * 
     * @type {Array<ConditionNode>}
     * @memberof CompoundConditionNode
     */
    children: Array<ConditionNode>;
}


/**
 * @export
 */
export const CompoundConditionNodeKindEnum = {
    Compound: 'COMPOUND',
    Leaf: 'LEAF'
} as const;
export type CompoundConditionNodeKindEnum = typeof CompoundConditionNodeKindEnum[keyof typeof CompoundConditionNodeKindEnum];


/**
 * Check if a given object implements the CompoundConditionNode interface.
 */
export function instanceOfCompoundConditionNode(value: object): value is CompoundConditionNode {
    if (!('kind' in value) || value['kind'] === undefined) return false;
    if (!('operator' in value) || value['operator'] === undefined) return false;
    if (!('children' in value) || value['children'] === undefined) return false;
    return true;
}

export function CompoundConditionNodeFromJSON(json: any): CompoundConditionNode {
    return CompoundConditionNodeFromJSONTyped(json, false);
}

export function CompoundConditionNodeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CompoundConditionNode {
    if (json == null) {
        return json;
    }
    return {
        
        'kind': json['kind'],
        'operator': LogicalOperatorDtoFromJSON(json['operator']),
        'children': ((json['children'] as Array<any>).map(ConditionNodeFromJSON)),
    };
}

export function CompoundConditionNodeToJSON(json: any): CompoundConditionNode {
    return CompoundConditionNodeToJSONTyped(json, false);
}

export function CompoundConditionNodeToJSONTyped(value?: CompoundConditionNode | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'kind': value['kind'],
        'operator': LogicalOperatorDtoToJSON(value['operator']),
        'children': ((value['children'] as Array<any>).map(ConditionNodeToJSON)),
    };
}

