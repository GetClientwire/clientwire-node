/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { WebhookMessageKind } from './webhook-message-kind';
import {
    WebhookMessageKindFromJSON,
    WebhookMessageKindFromJSONTyped,
    WebhookMessageKindToJSON,
    WebhookMessageKindToJSONTyped,
} from './webhook-message-kind';
import type { WebhookAssetResponse } from './webhook-asset-response';
import {
    WebhookAssetResponseFromJSON,
    WebhookAssetResponseFromJSONTyped,
    WebhookAssetResponseToJSON,
    WebhookAssetResponseToJSONTyped,
} from './webhook-asset-response';
import type { Location } from './location';
import {
    LocationFromJSON,
    LocationFromJSONTyped,
    LocationToJSON,
    LocationToJSONTyped,
} from './location';

/**
 * 
 * @export
 * @interface WebhookMessage
 */
export interface WebhookMessage {
    /**
     * Unique identifier for a message.
     * @type {string}
     * @memberof WebhookMessage
     */
    id: string;
    /**
     * Unique identifier for the tenant.
     * @type {string}
     * @memberof WebhookMessage
     */
    tenantId: string;
    /**
     * Timestamp when the conversation was created.
     * @type {Date}
     * @memberof WebhookMessage
     */
    createdAt: Date;
    /**
     * Timestamp when the conversation was last updated. Initially the same as created_at.
     * @type {Date}
     * @memberof WebhookMessage
     */
    updatedAt: Date;
    /**
     * Unique identifier for a conversation type.
     * @type {string}
     * @memberof WebhookMessage
     */
    conversationId: string;
    /**
     * The id of the participant this messages is posted by.
     * @type {string}
     * @memberof WebhookMessage
     */
    participantId: string;
    /**
     * The sequence of the message in the conversation. This will be null if the message has not been processed yet.
     * @type {number}
     * @memberof WebhookMessage
     */
    sequence: number | null;
    /**
     * The kind of message.
     * @type {WebhookMessageKind}
     * @memberof WebhookMessage
     */
    kind: WebhookMessageKind;
    /**
     * The text of the message. If kind is TEXT or REQUEST_LOCATION, this field is required.
     * @type {string}
     * @memberof WebhookMessage
     */
    text?: string | null;
    /**
     * 
     * @type {Location}
     * @memberof WebhookMessage
     */
    location?: Location | null;
    /**
     * The formatted address of the location.
     * @type {string}
     * @memberof WebhookMessage
     */
    formattedAddress?: string | null;
    /**
     * 
     * @type {WebhookAssetResponse}
     * @memberof WebhookMessage
     */
    asset?: WebhookAssetResponse | null;
    /**
     * Source id of the message.
     * @type {string}
     * @memberof WebhookMessage
     */
    sourceId?: string | null;
}



/**
 * Check if a given object implements the WebhookMessage interface.
 */
export function instanceOfWebhookMessage(value: object): value is WebhookMessage {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('tenantId' in value) || value['tenantId'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('conversationId' in value) || value['conversationId'] === undefined) return false;
    if (!('participantId' in value) || value['participantId'] === undefined) return false;
    if (!('sequence' in value) || value['sequence'] === undefined) return false;
    if (!('kind' in value) || value['kind'] === undefined) return false;
    return true;
}

export function WebhookMessageFromJSON(json: any): WebhookMessage {
    return WebhookMessageFromJSONTyped(json, false);
}

export function WebhookMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebhookMessage {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'tenantId': json['tenant_id'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'conversationId': json['conversation_id'],
        'participantId': json['participant_id'],
        'sequence': json['sequence'],
        'kind': WebhookMessageKindFromJSON(json['kind']),
        'text': json['text'] == null ? undefined : json['text'],
        'location': json['location'] == null ? undefined : LocationFromJSON(json['location']),
        'formattedAddress': json['formatted_address'] == null ? undefined : json['formatted_address'],
        'asset': json['asset'] == null ? undefined : WebhookAssetResponseFromJSON(json['asset']),
        'sourceId': json['source_id'] == null ? undefined : json['source_id'],
    };
}

export function WebhookMessageToJSON(json: any): WebhookMessage {
    return WebhookMessageToJSONTyped(json, false);
}

export function WebhookMessageToJSONTyped(value?: WebhookMessage | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'tenant_id': value['tenantId'],
        'created_at': ((value['createdAt']).toISOString()),
        'updated_at': ((value['updatedAt']).toISOString()),
        'conversation_id': value['conversationId'],
        'participant_id': value['participantId'],
        'sequence': value['sequence'],
        'kind': WebhookMessageKindToJSON(value['kind']),
        'text': value['text'],
        'location': LocationToJSON(value['location']),
        'formatted_address': value['formattedAddress'],
        'asset': WebhookAssetResponseToJSON(value['asset']),
        'source_id': value['sourceId'],
    };
}

