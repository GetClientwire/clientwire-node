/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { WorkflowAction } from './workflow-action';
import {
    WorkflowActionFromJSON,
    WorkflowActionFromJSONTyped,
    WorkflowActionToJSON,
    WorkflowActionToJSONTyped,
} from './workflow-action';
import type { WorkflowTrigger } from './workflow-trigger';
import {
    WorkflowTriggerFromJSON,
    WorkflowTriggerFromJSONTyped,
    WorkflowTriggerToJSON,
    WorkflowTriggerToJSONTyped,
} from './workflow-trigger';

/**
 * 
 * @export
 * @interface Workflow
 */
export interface Workflow {
    /**
     * Unique identifier for the workflow.
     * @type {string}
     * @memberof Workflow
     */
    id: string | null;
    /**
     * The id of the conversation type to be assigned to this conversation.
     * @type {string}
     * @memberof Workflow
     */
    conversationTypeId?: string | null;
    /**
     * 
     * @type {WorkflowTrigger}
     * @memberof Workflow
     */
    trigger: WorkflowTrigger;
    /**
     * Action to be executed when trigger happens.
     * @type {WorkflowAction}
     * @memberof Workflow
     */
    action: WorkflowAction;
    /**
     * 
     * @type {Date}
     * @memberof Workflow
     */
    createdAt: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof Workflow
     */
    updatedAt: Date | null;
    /**
     * The workflow status. The workflow will run only if it is enabled.
     * @type {boolean}
     * @memberof Workflow
     */
    enabled?: boolean;
}

/**
 * Check if a given object implements the Workflow interface.
 */
export function instanceOfWorkflow(value: object): value is Workflow {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('trigger' in value) || value['trigger'] === undefined) return false;
    if (!('action' in value) || value['action'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function WorkflowFromJSON(json: any): Workflow {
    return WorkflowFromJSONTyped(json, false);
}

export function WorkflowFromJSONTyped(json: any, ignoreDiscriminator: boolean): Workflow {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'conversationTypeId': json['conversation_type_id'] == null ? undefined : json['conversation_type_id'],
        'trigger': WorkflowTriggerFromJSON(json['trigger']),
        'action': WorkflowActionFromJSON(json['action']),
        'createdAt': (json['createdAt'] == null ? null : new Date(json['createdAt'])),
        'updatedAt': (json['updatedAt'] == null ? null : new Date(json['updatedAt'])),
        'enabled': json['enabled'] == null ? undefined : json['enabled'],
    };
}

export function WorkflowToJSON(json: any): Workflow {
    return WorkflowToJSONTyped(json, false);
}

export function WorkflowToJSONTyped(value?: Workflow | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'conversation_type_id': value['conversationTypeId'],
        'trigger': WorkflowTriggerToJSON(value['trigger']),
        'action': WorkflowActionToJSON(value['action']),
        'createdAt': (value['createdAt'] == null ? null : (value['createdAt'] as any).toISOString()),
        'updatedAt': (value['updatedAt'] == null ? null : (value['updatedAt'] as any).toISOString()),
        'enabled': value['enabled'],
    };
}

