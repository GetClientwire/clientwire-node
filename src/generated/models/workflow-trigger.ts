/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TriggerKind } from './trigger-kind';
import {
    TriggerKindFromJSON,
    TriggerKindFromJSONTyped,
    TriggerKindToJSON,
    TriggerKindToJSONTyped,
} from './trigger-kind';

import { ConversationCreatedTrigger, ConversationCreatedTriggerFromJSONTyped, ConversationCreatedTriggerToJSON, ConversationCreatedTriggerToJSONTyped } from './conversation-created-trigger';
import { ConversationDataChangedTrigger, ConversationDataChangedTriggerFromJSONTyped, ConversationDataChangedTriggerToJSON, ConversationDataChangedTriggerToJSONTyped } from './conversation-data-changed-trigger';
import { MessageAddedToConversationTrigger, MessageAddedToConversationTriggerFromJSONTyped, MessageAddedToConversationTriggerToJSON, MessageAddedToConversationTriggerToJSONTyped } from './message-added-to-conversation-trigger';
/**
 * Base interface for workflow triggers
 * @export
 * @interface WorkflowTrigger
 */
export interface WorkflowTrigger {
    /**
     * Discriminator property to identify the trigger type
     * @type {TriggerKind}
     * @memberof WorkflowTrigger
     */
    kind: TriggerKind;
}



/**
 * Check if a given object implements the WorkflowTrigger interface.
 */
export function instanceOfWorkflowTrigger(value: object): value is WorkflowTrigger {
    if (!('kind' in value) || value['kind'] === undefined) return false;
    return true;
}

export function WorkflowTriggerFromJSON(json: any): WorkflowTrigger {
    return WorkflowTriggerFromJSONTyped(json, false);
}

export function WorkflowTriggerFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkflowTrigger {
    if (json == null) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['kind'] === 'CONVERSATION_CREATED') {
            return ConversationCreatedTriggerFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['kind'] === 'CONVERSATION_DATA_CHANGED') {
            return ConversationDataChangedTriggerFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['kind'] === 'MESSAGE_ADDED_TO_CONVERSATION') {
            return MessageAddedToConversationTriggerFromJSONTyped(json, ignoreDiscriminator);
        }
    }
    return {
        
        'kind': TriggerKindFromJSON(json['kind']),
    };
}

export function WorkflowTriggerToJSON(json: any): WorkflowTrigger {
    return WorkflowTriggerToJSONTyped(json, false);
}

export function WorkflowTriggerToJSONTyped(value?: WorkflowTrigger | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    if (!ignoreDiscriminator) {
        switch (value['kind']) {
            case 'CONVERSATION_CREATED':
                return ConversationCreatedTriggerToJSONTyped(value as ConversationCreatedTrigger, ignoreDiscriminator);
            case 'CONVERSATION_DATA_CHANGED':
                return ConversationDataChangedTriggerToJSONTyped(value as ConversationDataChangedTrigger, ignoreDiscriminator);
            case 'MESSAGE_ADDED_TO_CONVERSATION':
                return MessageAddedToConversationTriggerToJSONTyped(value as MessageAddedToConversationTrigger, ignoreDiscriminator);
            default:
                throw new Error(`No variant of WorkflowTrigger exists with 'kind=${value['kind']}'`);
        }
    }

    return {
        
        'kind': TriggerKindToJSON(value['kind']),
    };
}

