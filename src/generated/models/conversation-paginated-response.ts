/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Conversation } from './conversation';
import {
    ConversationFromJSON,
    ConversationFromJSONTyped,
    ConversationToJSON,
    ConversationToJSONTyped,
} from './conversation';

/**
 * 
 * @export
 * @interface ConversationPaginatedResponse
 */
export interface ConversationPaginatedResponse {
    /**
     * Indicates if there are more pages to fetch.
     * @type {boolean}
     * @memberof ConversationPaginatedResponse
     */
    hasMore: boolean;
    /**
     * Total number of elements across all pages.
     * @type {number}
     * @memberof ConversationPaginatedResponse
     */
    totalElements: number | null;
    /**
     * The maximum number of elements in this page.
     * @type {number}
     * @memberof ConversationPaginatedResponse
     */
    limit: number | null;
    /**
     * 
     * @type {Array<Conversation>}
     * @memberof ConversationPaginatedResponse
     */
    conversations: Array<Conversation>;
    /**
     * The offset of the first element in this page (for offset-based pagination). Either offset or last_sequence must be set.
     * @type {number}
     * @memberof ConversationPaginatedResponse
     */
    offset?: number | null;
    /**
     * The sequence (or key) of the last element in this page (for key-based pagination). Either offset or last_sequence must be set.
     * @type {number}
     * @memberof ConversationPaginatedResponse
     */
    lastSequence?: number | null;
}

/**
 * Check if a given object implements the ConversationPaginatedResponse interface.
 */
export function instanceOfConversationPaginatedResponse(value: object): value is ConversationPaginatedResponse {
    if (!('hasMore' in value) || value['hasMore'] === undefined) return false;
    if (!('totalElements' in value) || value['totalElements'] === undefined) return false;
    if (!('limit' in value) || value['limit'] === undefined) return false;
    if (!('conversations' in value) || value['conversations'] === undefined) return false;
    return true;
}

export function ConversationPaginatedResponseFromJSON(json: any): ConversationPaginatedResponse {
    return ConversationPaginatedResponseFromJSONTyped(json, false);
}

export function ConversationPaginatedResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConversationPaginatedResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'hasMore': json['has_more'],
        'totalElements': json['total_elements'],
        'limit': json['limit'],
        'conversations': ((json['conversations'] as Array<any>).map(ConversationFromJSON)),
        'offset': json['offset'] == null ? undefined : json['offset'],
        'lastSequence': json['last_sequence'] == null ? undefined : json['last_sequence'],
    };
}

export function ConversationPaginatedResponseToJSON(json: any): ConversationPaginatedResponse {
    return ConversationPaginatedResponseToJSONTyped(json, false);
}

export function ConversationPaginatedResponseToJSONTyped(value?: ConversationPaginatedResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'has_more': value['hasMore'],
        'total_elements': value['totalElements'],
        'limit': value['limit'],
        'conversations': ((value['conversations'] as Array<any>).map(ConversationToJSON)),
        'offset': value['offset'],
        'last_sequence': value['lastSequence'],
    };
}

