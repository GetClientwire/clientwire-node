/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TenantColorConfig } from './tenant-color-config';
import {
    TenantColorConfigFromJSON,
    TenantColorConfigFromJSONTyped,
    TenantColorConfigToJSON,
    TenantColorConfigToJSONTyped,
} from './tenant-color-config';

/**
 * Configuration object for a specific tenant.
 * @export
 * @interface TenantConfig
 */
export interface TenantConfig {
    /**
     * Unique identifier for the tenant.
     * @type {string}
     * @memberof TenantConfig
     */
    id: string;
    /**
     * The URL of the frontend application.
     * @type {string}
     * @memberof TenantConfig
     */
    frontendUrl: string;
    /**
     * The name of the tenant.
     * @type {string}
     * @memberof TenantConfig
     */
    name: string;
    /**
     * The preferred language of the tenant.
     * @type {string}
     * @memberof TenantConfig
     */
    preferredLanguage: string;
    /**
     * Indicates whether the tenant is enabled.
     * @type {boolean}
     * @memberof TenantConfig
     */
    enabled: boolean;
    /**
     * The color configuration for the tenant.
     * @type {TenantColorConfig}
     * @memberof TenantConfig
     */
    colorConfig?: TenantColorConfig | null;
}

/**
 * Check if a given object implements the TenantConfig interface.
 */
export function instanceOfTenantConfig(value: object): value is TenantConfig {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('frontendUrl' in value) || value['frontendUrl'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('preferredLanguage' in value) || value['preferredLanguage'] === undefined) return false;
    if (!('enabled' in value) || value['enabled'] === undefined) return false;
    return true;
}

export function TenantConfigFromJSON(json: any): TenantConfig {
    return TenantConfigFromJSONTyped(json, false);
}

export function TenantConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): TenantConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'frontendUrl': json['frontend_url'],
        'name': json['name'],
        'preferredLanguage': json['preferred_language'],
        'enabled': json['enabled'],
        'colorConfig': json['color_config'] == null ? undefined : TenantColorConfigFromJSON(json['color_config']),
    };
}

export function TenantConfigToJSON(json: any): TenantConfig {
    return TenantConfigToJSONTyped(json, false);
}

export function TenantConfigToJSONTyped(value?: TenantConfig | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'frontend_url': value['frontendUrl'],
        'name': value['name'],
        'preferred_language': value['preferredLanguage'],
        'enabled': value['enabled'],
        'color_config': TenantColorConfigToJSON(value['colorConfig']),
    };
}

