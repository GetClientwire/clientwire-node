/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ErrorWithCode } from './error-with-code';
import {
    ErrorWithCodeFromJSON,
    ErrorWithCodeFromJSONTyped,
    ErrorWithCodeToJSON,
    ErrorWithCodeToJSONTyped,
} from './error-with-code';

/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    message: string;
    /**
     * 
     * @type {Array<ErrorWithCode>}
     * @memberof ErrorResponse
     */
    errors?: Array<ErrorWithCode> | null;
}

/**
 * Check if a given object implements the ErrorResponse interface.
 */
export function instanceOfErrorResponse(value: object): value is ErrorResponse {
    if (!('code' in value) || value['code'] === undefined) return false;
    if (!('message' in value) || value['message'] === undefined) return false;
    return true;
}

export function ErrorResponseFromJSON(json: any): ErrorResponse {
    return ErrorResponseFromJSONTyped(json, false);
}

export function ErrorResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ErrorResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'code': json['code'],
        'message': json['message'],
        'errors': json['errors'] == null ? undefined : ((json['errors'] as Array<any>).map(ErrorWithCodeFromJSON)),
    };
}

export function ErrorResponseToJSON(json: any): ErrorResponse {
    return ErrorResponseToJSONTyped(json, false);
}

export function ErrorResponseToJSONTyped(value?: ErrorResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'code': value['code'],
        'message': value['message'],
        'errors': value['errors'] == null ? undefined : ((value['errors'] as Array<any>).map(ErrorWithCodeToJSON)),
    };
}

