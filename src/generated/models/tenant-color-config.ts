/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Tenant color config
 * @export
 * @interface TenantColorConfig
 */
export interface TenantColorConfig {
    /**
     * The header color of the main app
     * @type {string}
     * @memberof TenantColorConfig
     */
    headerColor?: string | null;
    /**
     * The button color of the main app.
     * @type {string}
     * @memberof TenantColorConfig
     */
    buttonColor?: string | null;
    /**
     * The button hover color of the main app.
     * @type {string}
     * @memberof TenantColorConfig
     */
    buttonHoverColor?: string | null;
    /**
     * The button hover color of the main app.
     * @type {string}
     * @memberof TenantColorConfig
     */
    buttonLabelColor?: string | null;
    /**
     * The button color of the client app.
     * @type {string}
     * @memberof TenantColorConfig
     */
    clientButtonColor?: string | null;
    /**
     * The button hover color of the client app.
     * @type {string}
     * @memberof TenantColorConfig
     */
    clientButtonHoverColor?: string | null;
    /**
     * The button label color of the client app.
     * @type {string}
     * @memberof TenantColorConfig
     */
    clientButtonLabelColor?: string | null;
    /**
     * The color of the chat bubble of the sender in the main app.
     * @type {string}
     * @memberof TenantColorConfig
     */
    senderChatBubbleColor?: string | null;
    /**
     * The color of the chat bubble of the participant in the main app.
     * @type {string}
     * @memberof TenantColorConfig
     */
    participantChatBubbleColor?: string | null;
    /**
     * The color of the text in chat bubble of the sender in the main app.
     * @type {string}
     * @memberof TenantColorConfig
     */
    senderChatBubbleTextColor?: string | null;
    /**
     * The color of the text in chat bubble of the participant in the main app.
     * @type {string}
     * @memberof TenantColorConfig
     */
    participantChatBubbleTextColor?: string | null;
    /**
     * The color of the chat bubble of the sender in the client app.
     * @type {string}
     * @memberof TenantColorConfig
     */
    clientSenderChatBubbleColor?: string | null;
    /**
     * The color of the chat bubble of the participant in the client app.
     * @type {string}
     * @memberof TenantColorConfig
     */
    clientParticipantChatBubbleColor?: string | null;
    /**
     * The color of the text in chat bubble of the sender in the client app.
     * @type {string}
     * @memberof TenantColorConfig
     */
    clientSenderChatBubbleTextColor?: string | null;
    /**
     * The color of the text in chat bubble of the participant in the client app.
     * @type {string}
     * @memberof TenantColorConfig
     */
    clientParticipantChatBubbleTextColor?: string | null;
}

/**
 * Check if a given object implements the TenantColorConfig interface.
 */
export function instanceOfTenantColorConfig(value: object): value is TenantColorConfig {
    return true;
}

export function TenantColorConfigFromJSON(json: any): TenantColorConfig {
    return TenantColorConfigFromJSONTyped(json, false);
}

export function TenantColorConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): TenantColorConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'headerColor': json['header_color'] == null ? undefined : json['header_color'],
        'buttonColor': json['button_color'] == null ? undefined : json['button_color'],
        'buttonHoverColor': json['button_hover_color'] == null ? undefined : json['button_hover_color'],
        'buttonLabelColor': json['button_label_color'] == null ? undefined : json['button_label_color'],
        'clientButtonColor': json['client_button_color'] == null ? undefined : json['client_button_color'],
        'clientButtonHoverColor': json['client_button_hover_color'] == null ? undefined : json['client_button_hover_color'],
        'clientButtonLabelColor': json['client_button_label_color'] == null ? undefined : json['client_button_label_color'],
        'senderChatBubbleColor': json['sender_chat_bubble_color'] == null ? undefined : json['sender_chat_bubble_color'],
        'participantChatBubbleColor': json['participant_chat_bubble_color'] == null ? undefined : json['participant_chat_bubble_color'],
        'senderChatBubbleTextColor': json['sender_chat_bubble_text_color'] == null ? undefined : json['sender_chat_bubble_text_color'],
        'participantChatBubbleTextColor': json['participant_chat_bubble_text_color'] == null ? undefined : json['participant_chat_bubble_text_color'],
        'clientSenderChatBubbleColor': json['client_sender_chat_bubble_color'] == null ? undefined : json['client_sender_chat_bubble_color'],
        'clientParticipantChatBubbleColor': json['client_participant_chat_bubble_color'] == null ? undefined : json['client_participant_chat_bubble_color'],
        'clientSenderChatBubbleTextColor': json['client_sender_chat_bubble_text_color'] == null ? undefined : json['client_sender_chat_bubble_text_color'],
        'clientParticipantChatBubbleTextColor': json['client_participant_chat_bubble_text_color'] == null ? undefined : json['client_participant_chat_bubble_text_color'],
    };
}

export function TenantColorConfigToJSON(json: any): TenantColorConfig {
    return TenantColorConfigToJSONTyped(json, false);
}

export function TenantColorConfigToJSONTyped(value?: TenantColorConfig | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'header_color': value['headerColor'],
        'button_color': value['buttonColor'],
        'button_hover_color': value['buttonHoverColor'],
        'button_label_color': value['buttonLabelColor'],
        'client_button_color': value['clientButtonColor'],
        'client_button_hover_color': value['clientButtonHoverColor'],
        'client_button_label_color': value['clientButtonLabelColor'],
        'sender_chat_bubble_color': value['senderChatBubbleColor'],
        'participant_chat_bubble_color': value['participantChatBubbleColor'],
        'sender_chat_bubble_text_color': value['senderChatBubbleTextColor'],
        'participant_chat_bubble_text_color': value['participantChatBubbleTextColor'],
        'client_sender_chat_bubble_color': value['clientSenderChatBubbleColor'],
        'client_participant_chat_bubble_color': value['clientParticipantChatBubbleColor'],
        'client_sender_chat_bubble_text_color': value['clientSenderChatBubbleTextColor'],
        'client_participant_chat_bubble_text_color': value['clientParticipantChatBubbleTextColor'],
    };
}

