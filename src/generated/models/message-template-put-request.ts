/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MessageTemplateParameter } from './message-template-parameter';
import {
    MessageTemplateParameterFromJSON,
    MessageTemplateParameterFromJSONTyped,
    MessageTemplateParameterToJSON,
    MessageTemplateParameterToJSONTyped,
} from './message-template-parameter';

/**
 * 
 * @export
 * @interface MessageTemplatePutRequest
 */
export interface MessageTemplatePutRequest {
    /**
     * 
     * @type {string}
     * @memberof MessageTemplatePutRequest
     */
    description?: string | null;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof MessageTemplatePutRequest
     */
    texts: { [key: string]: string; };
    /**
     * 
     * @type {Array<MessageTemplateParameter>}
     * @memberof MessageTemplatePutRequest
     */
    parameters: Array<MessageTemplateParameter>;
}

/**
 * Check if a given object implements the MessageTemplatePutRequest interface.
 */
export function instanceOfMessageTemplatePutRequest(value: object): value is MessageTemplatePutRequest {
    if (!('texts' in value) || value['texts'] === undefined) return false;
    if (!('parameters' in value) || value['parameters'] === undefined) return false;
    return true;
}

export function MessageTemplatePutRequestFromJSON(json: any): MessageTemplatePutRequest {
    return MessageTemplatePutRequestFromJSONTyped(json, false);
}

export function MessageTemplatePutRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageTemplatePutRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'description': json['description'] == null ? undefined : json['description'],
        'texts': json['texts'],
        'parameters': ((json['parameters'] as Array<any>).map(MessageTemplateParameterFromJSON)),
    };
}

export function MessageTemplatePutRequestToJSON(json: any): MessageTemplatePutRequest {
    return MessageTemplatePutRequestToJSONTyped(json, false);
}

export function MessageTemplatePutRequestToJSONTyped(value?: MessageTemplatePutRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'description': value['description'],
        'texts': value['texts'],
        'parameters': ((value['parameters'] as Array<any>).map(MessageTemplateParameterToJSON)),
    };
}

