/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserRole } from './user-role';
import {
    UserRoleFromJSON,
    UserRoleFromJSONTyped,
    UserRoleToJSON,
    UserRoleToJSONTyped,
} from './user-role';

/**
 * Represents a user with an ID and email address.
 * @export
 * @interface User
 */
export interface User {
    /**
     * Unique identifier for the user.
     * @type {string}
     * @memberof User
     */
    id: string;
    /**
     * The email address of the user.
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     * The role assigned to the user. OWNER or USER
     * @type {UserRole}
     * @memberof User
     */
    role: UserRole;
    /**
     * The first name of the user to create.
     * @type {string}
     * @memberof User
     */
    firstname?: string | null;
    /**
     * The last name of the user to create.
     * @type {string}
     * @memberof User
     */
    lastname?: string | null;
}



/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): value is User {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('role' in value) || value['role'] === undefined) return false;
    return true;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'email': json['email'],
        'role': UserRoleFromJSON(json['role']),
        'firstname': json['firstname'] == null ? undefined : json['firstname'],
        'lastname': json['lastname'] == null ? undefined : json['lastname'],
    };
}

export function UserToJSON(json: any): User {
    return UserToJSONTyped(json, false);
}

export function UserToJSONTyped(value?: User | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'email': value['email'],
        'role': UserRoleToJSON(value['role']),
        'firstname': value['firstname'],
        'lastname': value['lastname'],
    };
}

