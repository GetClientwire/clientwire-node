/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Language } from './language';
import {
    LanguageFromJSON,
    LanguageFromJSONTyped,
    LanguageToJSON,
    LanguageToJSONTyped,
} from './language';

/**
 * 
 * @export
 * @interface UserPreference
 */
export interface UserPreference {
    /**
     * Unique identifier for the user.
     * @type {string}
     * @memberof UserPreference
     */
    userId: string | null;
    /**
     * Unique identifier for the preferred conversation type.
     * @type {string}
     * @memberof UserPreference
     */
    preferredConversationTypeId?: string | null;
    /**
     * Identifier for the preferred language. Possible values: en, de
     * @type {Language}
     * @memberof UserPreference
     */
    preferredLanguage?: Language | null;
    /**
     * Timestamp when the user preferences were created.
     * @type {Date}
     * @memberof UserPreference
     */
    createdAt?: Date | null;
    /**
     * Timestamp when the user preferences were last updated. Initially the same as created_at.
     * @type {Date}
     * @memberof UserPreference
     */
    updatedAt?: Date | null;
}



/**
 * Check if a given object implements the UserPreference interface.
 */
export function instanceOfUserPreference(value: object): value is UserPreference {
    if (!('userId' in value) || value['userId'] === undefined) return false;
    return true;
}

export function UserPreferenceFromJSON(json: any): UserPreference {
    return UserPreferenceFromJSONTyped(json, false);
}

export function UserPreferenceFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserPreference {
    if (json == null) {
        return json;
    }
    return {
        
        'userId': json['user_id'],
        'preferredConversationTypeId': json['preferred_conversation_type_id'] == null ? undefined : json['preferred_conversation_type_id'],
        'preferredLanguage': json['preferred_language'] == null ? undefined : LanguageFromJSON(json['preferred_language']),
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
    };
}

export function UserPreferenceToJSON(json: any): UserPreference {
    return UserPreferenceToJSONTyped(json, false);
}

export function UserPreferenceToJSONTyped(value?: UserPreference | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'user_id': value['userId'],
        'preferred_conversation_type_id': value['preferredConversationTypeId'],
        'preferred_language': LanguageToJSON(value['preferredLanguage']),
        'created_at': value['createdAt'] == null ? undefined : ((value['createdAt'] as any).toISOString()),
        'updated_at': value['updatedAt'] == null ? undefined : ((value['updatedAt'] as any).toISOString()),
    };
}

