/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TemplateData } from './template-data';
import {
    TemplateDataFromJSON,
    TemplateDataFromJSONTyped,
    TemplateDataToJSON,
    TemplateDataToJSONTyped,
} from './template-data';
import type { Participant } from './participant';
import {
    ParticipantFromJSON,
    ParticipantFromJSONTyped,
    ParticipantToJSON,
    ParticipantToJSONTyped,
} from './participant';
import type { ReadStatusDto } from './read-status-dto';
import {
    ReadStatusDtoFromJSON,
    ReadStatusDtoFromJSONTyped,
    ReadStatusDtoToJSON,
    ReadStatusDtoToJSONTyped,
} from './read-status-dto';
import type { ConversationType } from './conversation-type';
import {
    ConversationTypeFromJSON,
    ConversationTypeFromJSONTyped,
    ConversationTypeToJSON,
    ConversationTypeToJSONTyped,
} from './conversation-type';

/**
 * 
 * @export
 * @interface Conversation
 */
export interface Conversation {
    /**
     * Unique identifier for a conversation.
     * @type {string}
     * @memberof Conversation
     */
    id: string;
    /**
     * Unique identifier for the tenant.
     * @type {string}
     * @memberof Conversation
     */
    tenantId: string;
    /**
     * Indicates whether the conversation is archived.
     * @type {boolean}
     * @memberof Conversation
     */
    archived: boolean;
    /**
     * Unique identifier for a conversation type.
     * @type {string}
     * @memberof Conversation
     */
    conversationTypeId: string | null;
    /**
     * The whole conversation_type type object.
     * @type {ConversationType}
     * @memberof Conversation
     */
    conversationType?: ConversationType | null;
    /**
     * Timestamp when the conversation was created.
     * @type {Date}
     * @memberof Conversation
     */
    createdAt?: Date | null;
    /**
     * Timestamp when the conversation was last updated. Initially the same as created_at.
     * @type {Date}
     * @memberof Conversation
     */
    updatedAt?: Date | null;
    /**
     * A description field that can be used to store relevant information for the conversation. The stored data will be used in the default list item template.
     * @type {string}
     * @memberof Conversation
     */
    description?: string | null;
    /**
     * The data of a conversation corresponding to the conversation_data_schema of the conversation type.
     * @type {any}
     * @memberof Conversation
     */
    conversationData?: any | null;
    /**
     * The labels of the conversation.
     * @type {Array<string>}
     * @memberof Conversation
     */
    labels?: Array<string> | null;
    /**
     * The conversation data used to render the UI templates
     * @type {TemplateData}
     * @memberof Conversation
     */
    templateData?: TemplateData | null;
    /**
     * Timestamp when the conversation data was last updated.
     * @type {Date}
     * @memberof Conversation
     */
    conversationDataUpdatedAt?: Date | null;
    /**
     * The list of participants in the conversation.
     * @type {Array<Participant>}
     * @memberof Conversation
     */
    participants?: Array<Participant> | null;
    /**
     * The read status for the conversation. If the permission context is CLIENT we always return the read status of the client. If the permission context is API_KEY we return the shared_read_status. If the permission context is USER and the conversation_type has shared_read_status_for_user_participants=true we return the shared_read_status. If the permission context is USER but user is not part of the conversation we return the shared_read_status.
     * @type {ReadStatusDto}
     * @memberof Conversation
     */
    readStatus?: ReadStatusDto | null;
    /**
     * The date when the lock expires
     * @type {Date}
     * @memberof Conversation
     */
    lockExpiresAt?: Date | null;
    /**
     * The note for the lock
     * @type {string}
     * @memberof Conversation
     */
    lockNote?: string | null;
}

/**
 * Check if a given object implements the Conversation interface.
 */
export function instanceOfConversation(value: object): value is Conversation {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('tenantId' in value) || value['tenantId'] === undefined) return false;
    if (!('archived' in value) || value['archived'] === undefined) return false;
    if (!('conversationTypeId' in value) || value['conversationTypeId'] === undefined) return false;
    return true;
}

export function ConversationFromJSON(json: any): Conversation {
    return ConversationFromJSONTyped(json, false);
}

export function ConversationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Conversation {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'tenantId': json['tenant_id'],
        'archived': json['archived'],
        'conversationTypeId': json['conversation_type_id'],
        'conversationType': json['conversation_type'] == null ? undefined : ConversationTypeFromJSON(json['conversation_type']),
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'description': json['description'] == null ? undefined : json['description'],
        'conversationData': json['conversation_data'] == null ? undefined : json['conversation_data'],
        'labels': json['labels'] == null ? undefined : json['labels'],
        'templateData': json['template_data'] == null ? undefined : TemplateDataFromJSON(json['template_data']),
        'conversationDataUpdatedAt': json['conversation_data_updated_at'] == null ? undefined : (new Date(json['conversation_data_updated_at'])),
        'participants': json['participants'] == null ? undefined : ((json['participants'] as Array<any>).map(ParticipantFromJSON)),
        'readStatus': json['read_status'] == null ? undefined : ReadStatusDtoFromJSON(json['read_status']),
        'lockExpiresAt': json['lock_expires_at'] == null ? undefined : (new Date(json['lock_expires_at'])),
        'lockNote': json['lock_note'] == null ? undefined : json['lock_note'],
    };
}

export function ConversationToJSON(json: any): Conversation {
    return ConversationToJSONTyped(json, false);
}

export function ConversationToJSONTyped(value?: Conversation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'tenant_id': value['tenantId'],
        'archived': value['archived'],
        'conversation_type_id': value['conversationTypeId'],
        'conversation_type': ConversationTypeToJSON(value['conversationType']),
        'created_at': value['createdAt'] == null ? undefined : ((value['createdAt'] as any).toISOString()),
        'updated_at': value['updatedAt'] == null ? undefined : ((value['updatedAt'] as any).toISOString()),
        'description': value['description'],
        'conversation_data': value['conversationData'],
        'labels': value['labels'],
        'template_data': TemplateDataToJSON(value['templateData']),
        'conversation_data_updated_at': value['conversationDataUpdatedAt'] == null ? undefined : ((value['conversationDataUpdatedAt'] as any).toISOString()),
        'participants': value['participants'] == null ? undefined : ((value['participants'] as Array<any>).map(ParticipantToJSON)),
        'read_status': ReadStatusDtoToJSON(value['readStatus']),
        'lock_expires_at': value['lockExpiresAt'] == null ? undefined : ((value['lockExpiresAt'] as any).toISOString()),
        'lock_note': value['lockNote'],
    };
}

