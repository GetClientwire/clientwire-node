/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Participant } from './participant';
import {
    ParticipantFromJSON,
    ParticipantFromJSONTyped,
    ParticipantToJSON,
    ParticipantToJSONTyped,
} from './participant';

/**
 * 
 * @export
 * @interface Conversation
 */
export interface Conversation {
    /**
     * Unique identifier for a conversation.
     * @type {string}
     * @memberof Conversation
     */
    id: string;
    /**
     * Unique identifier for the tenant.
     * @type {string}
     * @memberof Conversation
     */
    tenantId: string;
    /**
     * Indicates whether the conversation is archived.
     * @type {boolean}
     * @memberof Conversation
     */
    archived: boolean;
    /**
     * Unique identifier for a conversation type.
     * @type {string}
     * @memberof Conversation
     */
    conversationTypeId: string;
    /**
     * 
     * @type {Date}
     * @memberof Conversation
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Conversation
     */
    updatedAt?: Date;
    /**
     * The data of a conversation corresponding to the conversation_data_schema of the conversation type.
     * @type {any}
     * @memberof Conversation
     */
    conversationData?: any | null;
    /**
     * 
     * @type {Date}
     * @memberof Conversation
     */
    conversationDataUpdatedAt?: Date;
    /**
     * 
     * @type {Array<Participant>}
     * @memberof Conversation
     */
    participants: Array<Participant>;
    /**
     * Number of unread messages.
     * @type {number}
     * @memberof Conversation
     */
    newMessageCount?: number | null;
    /**
     * Number of unread messages.
     * @type {number}
     * @memberof Conversation
     */
    lastMessageSequenceSeen?: number | null;
}

/**
 * Check if a given object implements the Conversation interface.
 */
export function instanceOfConversation(value: object): value is Conversation {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('tenantId' in value) || value['tenantId'] === undefined) return false;
    if (!('archived' in value) || value['archived'] === undefined) return false;
    if (!('conversationTypeId' in value) || value['conversationTypeId'] === undefined) return false;
    if (!('participants' in value) || value['participants'] === undefined) return false;
    return true;
}

export function ConversationFromJSON(json: any): Conversation {
    return ConversationFromJSONTyped(json, false);
}

export function ConversationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Conversation {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'tenantId': json['tenant_id'],
        'archived': json['archived'],
        'conversationTypeId': json['conversation_type_id'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'conversationData': json['conversation_data'] == null ? undefined : json['conversation_data'],
        'conversationDataUpdatedAt': json['conversation_data_updated_at'] == null ? undefined : (new Date(json['conversation_data_updated_at'])),
        'participants': ((json['participants'] as Array<any>).map(ParticipantFromJSON)),
        'newMessageCount': json['new_message_count'] == null ? undefined : json['new_message_count'],
        'lastMessageSequenceSeen': json['last_message_sequence_seen'] == null ? undefined : json['last_message_sequence_seen'],
    };
}

export function ConversationToJSON(json: any): Conversation {
    return ConversationToJSONTyped(json, false);
}

export function ConversationToJSONTyped(value?: Conversation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'tenant_id': value['tenantId'],
        'archived': value['archived'],
        'conversation_type_id': value['conversationTypeId'],
        'created_at': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'updated_at': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
        'conversation_data': value['conversationData'],
        'conversation_data_updated_at': value['conversationDataUpdatedAt'] == null ? undefined : ((value['conversationDataUpdatedAt']).toISOString()),
        'participants': ((value['participants'] as Array<any>).map(ParticipantToJSON)),
        'new_message_count': value['newMessageCount'],
        'last_message_sequence_seen': value['lastMessageSequenceSeen'],
    };
}

