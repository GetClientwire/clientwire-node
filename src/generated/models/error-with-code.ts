/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Describes a single error encountered during request processing.
 * @export
 * @interface ErrorWithCode
 */
export interface ErrorWithCode {
    /**
     * An error code specific to the application.
     * @type {string}
     * @memberof ErrorWithCode
     */
    code: string;
    /**
     * The error message related to the field or general error.
     * @type {string}
     * @memberof ErrorWithCode
     */
    message: string;
    /**
     * The path to the field where the error occurred.
     * @type {string}
     * @memberof ErrorWithCode
     */
    path?: string | null;
    /**
     * Additional details about the error.
     * @type {{ [key: string]: any; }}
     * @memberof ErrorWithCode
     */
    details?: { [key: string]: any; } | null;
}

/**
 * Check if a given object implements the ErrorWithCode interface.
 */
export function instanceOfErrorWithCode(value: object): value is ErrorWithCode {
    if (!('code' in value) || value['code'] === undefined) return false;
    if (!('message' in value) || value['message'] === undefined) return false;
    return true;
}

export function ErrorWithCodeFromJSON(json: any): ErrorWithCode {
    return ErrorWithCodeFromJSONTyped(json, false);
}

export function ErrorWithCodeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ErrorWithCode {
    if (json == null) {
        return json;
    }
    return {
        
        'code': json['code'],
        'message': json['message'],
        'path': json['path'] == null ? undefined : json['path'],
        'details': json['details'] == null ? undefined : json['details'],
    };
}

export function ErrorWithCodeToJSON(json: any): ErrorWithCode {
    return ErrorWithCodeToJSONTyped(json, false);
}

export function ErrorWithCodeToJSONTyped(value?: ErrorWithCode | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'code': value['code'],
        'message': value['message'],
        'path': value['path'],
        'details': value['details'],
    };
}

