/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ConversationPatchRequest
 */
export interface ConversationPatchRequest {
    /**
     * Unique identifier for a conversation.
     * @type {string}
     * @memberof ConversationPatchRequest
     */
    id?: string | null;
    /**
     * A description field that can be used to store relevant information for the conversation. The stored data will be used in the default list item template.
     * @type {string}
     * @memberof ConversationPatchRequest
     */
    description?: string | null;
    /**
     * The data of a conversation corresponding to the conversation_data_schema of the conversation type.
     * @type {string}
     * @memberof ConversationPatchRequest
     */
    conversationData?: string | null;
    /**
     * Indicates whether the conversation is archived. This can only be set to false if the conversation already exists.
     * @type {boolean}
     * @memberof ConversationPatchRequest
     */
    archived?: boolean | null;
}

/**
 * Check if a given object implements the ConversationPatchRequest interface.
 */
export function instanceOfConversationPatchRequest(value: object): value is ConversationPatchRequest {
    return true;
}

export function ConversationPatchRequestFromJSON(json: any): ConversationPatchRequest {
    return ConversationPatchRequestFromJSONTyped(json, false);
}

export function ConversationPatchRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConversationPatchRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'description': json['description'] == null ? undefined : json['description'],
        'conversationData': json['conversation_data'] == null ? undefined : json['conversation_data'],
        'archived': json['archived'] == null ? undefined : json['archived'],
    };
}

export function ConversationPatchRequestToJSON(json: any): ConversationPatchRequest {
    return ConversationPatchRequestToJSONTyped(json, false);
}

export function ConversationPatchRequestToJSONTyped(value?: ConversationPatchRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'description': value['description'],
        'conversation_data': value['conversationData'],
        'archived': value['archived'],
    };
}

