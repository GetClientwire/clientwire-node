/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ConditionOperator } from './condition-operator';
import {
    ConditionOperatorFromJSON,
    ConditionOperatorFromJSONTyped,
    ConditionOperatorToJSON,
    ConditionOperatorToJSONTyped,
} from './condition-operator';

/**
 * 
 * @export
 * @interface LeafConditionNode
 */
export interface LeafConditionNode {
    /**
     * Discriminator property to identify the node kind
     * @type {string}
     * @memberof LeafConditionNode
     */
    kind: LeafConditionNodeKindEnum;
    /**
     * 
     * @type {string}
     * @memberof LeafConditionNode
     */
    targetIdentifier: string;
    /**
     * 
     * @type {ConditionOperator}
     * @memberof LeafConditionNode
     */
    operator: ConditionOperator;
    /**
     * 
     * @type {string}
     * @memberof LeafConditionNode
     */
    compareValue?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LeafConditionNode
     */
    oldValue?: string | null;
}


/**
 * @export
 */
export const LeafConditionNodeKindEnum = {
    Compound: 'COMPOUND',
    Leaf: 'LEAF'
} as const;
export type LeafConditionNodeKindEnum = typeof LeafConditionNodeKindEnum[keyof typeof LeafConditionNodeKindEnum];


/**
 * Check if a given object implements the LeafConditionNode interface.
 */
export function instanceOfLeafConditionNode(value: object): value is LeafConditionNode {
    if (!('kind' in value) || value['kind'] === undefined) return false;
    if (!('targetIdentifier' in value) || value['targetIdentifier'] === undefined) return false;
    if (!('operator' in value) || value['operator'] === undefined) return false;
    return true;
}

export function LeafConditionNodeFromJSON(json: any): LeafConditionNode {
    return LeafConditionNodeFromJSONTyped(json, false);
}

export function LeafConditionNodeFromJSONTyped(json: any, ignoreDiscriminator: boolean): LeafConditionNode {
    if (json == null) {
        return json;
    }
    return {
        
        'kind': json['kind'],
        'targetIdentifier': json['target_identifier'],
        'operator': ConditionOperatorFromJSON(json['operator']),
        'compareValue': json['compare_value'] == null ? undefined : json['compare_value'],
        'oldValue': json['old_value'] == null ? undefined : json['old_value'],
    };
}

export function LeafConditionNodeToJSON(json: any): LeafConditionNode {
    return LeafConditionNodeToJSONTyped(json, false);
}

export function LeafConditionNodeToJSONTyped(value?: LeafConditionNode | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'kind': value['kind'],
        'target_identifier': value['targetIdentifier'],
        'operator': ConditionOperatorToJSON(value['operator']),
        'compare_value': value['compareValue'],
        'old_value': value['oldValue'],
    };
}

