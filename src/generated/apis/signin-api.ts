/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EmailCredentialsRequest,
  OidcCallbackRequest,
  ParticipantAuthKeyRequest,
  PassthroughRequestDto,
  ResetPasswordRequest,
  SetPasswordRequest,
  TokenResponseDto,
} from '../models/index';
import {
    EmailCredentialsRequestFromJSON,
    EmailCredentialsRequestToJSON,
    OidcCallbackRequestFromJSON,
    OidcCallbackRequestToJSON,
    ParticipantAuthKeyRequestFromJSON,
    ParticipantAuthKeyRequestToJSON,
    PassthroughRequestDtoFromJSON,
    PassthroughRequestDtoToJSON,
    ResetPasswordRequestFromJSON,
    ResetPasswordRequestToJSON,
    SetPasswordRequestFromJSON,
    SetPasswordRequestToJSON,
    TokenResponseDtoFromJSON,
    TokenResponseDtoToJSON,
} from '../models/index';

export interface OidcCallbackOperationRequest {
    providerName: string;
    oidcCallbackRequest: OidcCallbackRequest;
}

export interface PassthroughLoginRequest {
    passthroughRequestDto: PassthroughRequestDto;
}

export interface RefreshOidcTokenRequest {
    grantType?: string | null;
    refreshToken?: string | null;
    clientId?: string | null;
    clientSecret?: string | null;
    scope?: string | null;
}

export interface ResetPasswordOperationRequest {
    resetPasswordRequest: ResetPasswordRequest;
}

export interface RopcEmailLoginRequest {
    emailCredentialsRequest: EmailCredentialsRequest;
}

export interface RopcParticipantAuthKeyLoginRequest {
    participantAuthKeyRequest: ParticipantAuthKeyRequest;
}

export interface SetPasswordOperationRequest {
    setPasswordRequest: SetPasswordRequest;
}

/**
 * SigninApi - interface
 * 
 * @export
 * @interface SigninApiInterface
 */
export interface SigninApiInterface {
    /**
     * Exchanges the authorization code for tokens.
     * @summary Handle the OIDC callback from Microsoft (Authorization Code).
     * @param {string} providerName 
     * @param {OidcCallbackRequest} oidcCallbackRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SigninApiInterface
     */
    oidcCallbackRaw(requestParameters: OidcCallbackOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenResponseDto>>;

    /**
     * Exchanges the authorization code for tokens.
     * Handle the OIDC callback from Microsoft (Authorization Code).
     */
    oidcCallback(requestParameters: OidcCallbackOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenResponseDto>;

    /**
     * Exchanges an external Bearer token for our token if valid.
     * @summary Handle passthrough login with Bearer token from upstream.
     * @param {PassthroughRequestDto} passthroughRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SigninApiInterface
     */
    passthroughLoginRaw(requestParameters: PassthroughLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenResponseDto>>;

    /**
     * Exchanges an external Bearer token for our token if valid.
     * Handle passthrough login with Bearer token from upstream.
     */
    passthroughLogin(requestParameters: PassthroughLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenResponseDto>;

    /**
     * Refresh tokens and issue a new access token.
     * @summary Exchange your existing refresh token for a new access token.
     * @param {string} [grantType] 
     * @param {string} [refreshToken] 
     * @param {string} [clientId] 
     * @param {string} [clientSecret] 
     * @param {string} [scope] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SigninApiInterface
     */
    refreshOidcTokenRaw(requestParameters: RefreshOidcTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenResponseDto>>;

    /**
     * Refresh tokens and issue a new access token.
     * Exchange your existing refresh token for a new access token.
     */
    refreshOidcToken(requestParameters: RefreshOidcTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenResponseDto>;

    /**
     * Request a password reset for the specified user.
     * @summary Request a password reset.
     * @param {ResetPasswordRequest} resetPasswordRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SigninApiInterface
     */
    resetPasswordRaw(requestParameters: ResetPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Request a password reset for the specified user.
     * Request a password reset.
     */
    resetPassword(requestParameters: ResetPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Authenticates a user by email and password, then issues tokens.
     * @summary Login via email credentials (ROPC).
     * @param {EmailCredentialsRequest} emailCredentialsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SigninApiInterface
     */
    ropcEmailLoginRaw(requestParameters: RopcEmailLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenResponseDto>>;

    /**
     * Authenticates a user by email and password, then issues tokens.
     * Login via email credentials (ROPC).
     */
    ropcEmailLogin(requestParameters: RopcEmailLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenResponseDto>;

    /**
     * Authenticates a conversation participant by auth key, then issues tokens.
     * @summary Login for participant via auth key (ROPC).
     * @param {ParticipantAuthKeyRequest} participantAuthKeyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SigninApiInterface
     */
    ropcParticipantAuthKeyLoginRaw(requestParameters: RopcParticipantAuthKeyLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenResponseDto>>;

    /**
     * Authenticates a conversation participant by auth key, then issues tokens.
     * Login for participant via auth key (ROPC).
     */
    ropcParticipantAuthKeyLogin(requestParameters: RopcParticipantAuthKeyLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenResponseDto>;

    /**
     * Provide the token and new password to complete the reset.
     * @summary Set password after reset.
     * @param {SetPasswordRequest} setPasswordRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SigninApiInterface
     */
    setPasswordRaw(requestParameters: SetPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Provide the token and new password to complete the reset.
     * Set password after reset.
     */
    setPassword(requestParameters: SetPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class SigninApi extends runtime.BaseAPI implements SigninApiInterface {

    /**
     * Exchanges the authorization code for tokens.
     * Handle the OIDC callback from Microsoft (Authorization Code).
     */
    async oidcCallbackRaw(requestParameters: OidcCallbackOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenResponseDto>> {
        if (requestParameters['providerName'] == null) {
            throw new runtime.RequiredError(
                'providerName',
                'Required parameter "providerName" was null or undefined when calling oidcCallback().'
            );
        }

        if (requestParameters['oidcCallbackRequest'] == null) {
            throw new runtime.RequiredError(
                'oidcCallbackRequest',
                'Required parameter "oidcCallbackRequest" was null or undefined when calling oidcCallback().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/signin/providers/{provider_name}/callback`.replace(`{${"provider_name"}}`, encodeURIComponent(String(requestParameters['providerName']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OidcCallbackRequestToJSON(requestParameters['oidcCallbackRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenResponseDtoFromJSON(jsonValue));
    }

    /**
     * Exchanges the authorization code for tokens.
     * Handle the OIDC callback from Microsoft (Authorization Code).
     */
    async oidcCallback(requestParameters: OidcCallbackOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenResponseDto> {
        const response = await this.oidcCallbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Exchanges an external Bearer token for our token if valid.
     * Handle passthrough login with Bearer token from upstream.
     */
    async passthroughLoginRaw(requestParameters: PassthroughLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenResponseDto>> {
        if (requestParameters['passthroughRequestDto'] == null) {
            throw new runtime.RequiredError(
                'passthroughRequestDto',
                'Required parameter "passthroughRequestDto" was null or undefined when calling passthroughLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/signin/passthrough`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PassthroughRequestDtoToJSON(requestParameters['passthroughRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenResponseDtoFromJSON(jsonValue));
    }

    /**
     * Exchanges an external Bearer token for our token if valid.
     * Handle passthrough login with Bearer token from upstream.
     */
    async passthroughLogin(requestParameters: PassthroughLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenResponseDto> {
        const response = await this.passthroughLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Refresh tokens and issue a new access token.
     * Exchange your existing refresh token for a new access token.
     */
    async refreshOidcTokenRaw(requestParameters: RefreshOidcTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['grantType'] != null) {
            formParams.append('grant_type', requestParameters['grantType'] as any);
        }

        if (requestParameters['refreshToken'] != null) {
            formParams.append('refresh_token', requestParameters['refreshToken'] as any);
        }

        if (requestParameters['clientId'] != null) {
            formParams.append('client_id', requestParameters['clientId'] as any);
        }

        if (requestParameters['clientSecret'] != null) {
            formParams.append('client_secret', requestParameters['clientSecret'] as any);
        }

        if (requestParameters['scope'] != null) {
            formParams.append('scope', requestParameters['scope'] as any);
        }

        const response = await this.request({
            path: `/api/v1/signin/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenResponseDtoFromJSON(jsonValue));
    }

    /**
     * Refresh tokens and issue a new access token.
     * Exchange your existing refresh token for a new access token.
     */
    async refreshOidcToken(requestParameters: RefreshOidcTokenRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenResponseDto> {
        const response = await this.refreshOidcTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Request a password reset for the specified user.
     * Request a password reset.
     */
    async resetPasswordRaw(requestParameters: ResetPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['resetPasswordRequest'] == null) {
            throw new runtime.RequiredError(
                'resetPasswordRequest',
                'Required parameter "resetPasswordRequest" was null or undefined when calling resetPassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/password_reset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetPasswordRequestToJSON(requestParameters['resetPasswordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Request a password reset for the specified user.
     * Request a password reset.
     */
    async resetPassword(requestParameters: ResetPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resetPasswordRaw(requestParameters, initOverrides);
    }

    /**
     * Authenticates a user by email and password, then issues tokens.
     * Login via email credentials (ROPC).
     */
    async ropcEmailLoginRaw(requestParameters: RopcEmailLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenResponseDto>> {
        if (requestParameters['emailCredentialsRequest'] == null) {
            throw new runtime.RequiredError(
                'emailCredentialsRequest',
                'Required parameter "emailCredentialsRequest" was null or undefined when calling ropcEmailLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/signin/email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailCredentialsRequestToJSON(requestParameters['emailCredentialsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenResponseDtoFromJSON(jsonValue));
    }

    /**
     * Authenticates a user by email and password, then issues tokens.
     * Login via email credentials (ROPC).
     */
    async ropcEmailLogin(requestParameters: RopcEmailLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenResponseDto> {
        const response = await this.ropcEmailLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Authenticates a conversation participant by auth key, then issues tokens.
     * Login for participant via auth key (ROPC).
     */
    async ropcParticipantAuthKeyLoginRaw(requestParameters: RopcParticipantAuthKeyLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenResponseDto>> {
        if (requestParameters['participantAuthKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'participantAuthKeyRequest',
                'Required parameter "participantAuthKeyRequest" was null or undefined when calling ropcParticipantAuthKeyLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/signin/participant_auth_key`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ParticipantAuthKeyRequestToJSON(requestParameters['participantAuthKeyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenResponseDtoFromJSON(jsonValue));
    }

    /**
     * Authenticates a conversation participant by auth key, then issues tokens.
     * Login for participant via auth key (ROPC).
     */
    async ropcParticipantAuthKeyLogin(requestParameters: RopcParticipantAuthKeyLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenResponseDto> {
        const response = await this.ropcParticipantAuthKeyLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provide the token and new password to complete the reset.
     * Set password after reset.
     */
    async setPasswordRaw(requestParameters: SetPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['setPasswordRequest'] == null) {
            throw new runtime.RequiredError(
                'setPasswordRequest',
                'Required parameter "setPasswordRequest" was null or undefined when calling setPassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/password_reset/set`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetPasswordRequestToJSON(requestParameters['setPasswordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Provide the token and new password to complete the reset.
     * Set password after reset.
     */
    async setPassword(requestParameters: SetPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setPasswordRaw(requestParameters, initOverrides);
    }

}
