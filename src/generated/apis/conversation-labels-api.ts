/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Conversation,
  ConversationLabelPostRequest,
  ConversationLabelPutRequest,
} from '../models/index';
import {
    ConversationFromJSON,
    ConversationToJSON,
    ConversationLabelPostRequestFromJSON,
    ConversationLabelPostRequestToJSON,
    ConversationLabelPutRequestFromJSON,
    ConversationLabelPutRequestToJSON,
} from '../models/index';

export interface CreateConversationLabelsRequest {
    conversationId: string;
    conversationLabelPostRequest: ConversationLabelPostRequest;
    include?: any;
}

export interface DeleteConversationLabelRequest {
    conversationId: string;
    label: string;
    include?: any;
}

export interface UpdateConversationLabelRequest {
    conversationId: string;
    label: string;
    conversationLabelPutRequest: ConversationLabelPutRequest;
    include?: any;
}

export interface UpdateConversationLabelsRequest {
    conversationId: string;
    conversationLabelPutRequest: ConversationLabelPutRequest;
    include?: any;
}

/**
 * ConversationLabelsApi - interface
 * 
 * @export
 * @interface ConversationLabelsApiInterface
 */
export interface ConversationLabelsApiInterface {
    /**
     * Creates labels for conversations
     * @summary Create new labels for the specified conversation
     * @param {string} conversationId 
     * @param {ConversationLabelPostRequest} conversationLabelPostRequest 
     * @param {any} [include] Include the specified related resources in the response. Supported values: \&#39;PARTICIPANTS\&#39;, \&#39;CONVERSATION_TYPE\&#39;. If empty, no related resource is returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationLabelsApiInterface
     */
    createConversationLabelsRaw(requestParameters: CreateConversationLabelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Conversation>>;

    /**
     * Creates labels for conversations
     * Create new labels for the specified conversation
     */
    createConversationLabels(requestParameters: CreateConversationLabelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Conversation>;

    /**
     * Deletes label for a conversation
     * @summary Deletes a label for the specified conversation
     * @param {string} conversationId 
     * @param {string} label 
     * @param {any} [include] Include the specified related resources in the response. Supported values: \&#39;PARTICIPANTS\&#39;, \&#39;CONVERSATION_TYPE\&#39;. If empty, no related resource is returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationLabelsApiInterface
     */
    deleteConversationLabelRaw(requestParameters: DeleteConversationLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Conversation>>;

    /**
     * Deletes label for a conversation
     * Deletes a label for the specified conversation
     */
    deleteConversationLabel(requestParameters: DeleteConversationLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Conversation>;

    /**
     * Updates a specific label
     * @summary Updates a specific label with a new one
     * @param {string} conversationId 
     * @param {string} label 
     * @param {ConversationLabelPutRequest} conversationLabelPutRequest 
     * @param {any} [include] Include the specified related resources in the response. Supported values: \&#39;PARTICIPANTS\&#39;, \&#39;CONVERSATION_TYPE\&#39;. If empty, no related resource is returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationLabelsApiInterface
     */
    updateConversationLabelRaw(requestParameters: UpdateConversationLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates a specific label
     * Updates a specific label with a new one
     */
    updateConversationLabel(requestParameters: UpdateConversationLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Updates labels for conversations
     * @summary Updates all labels for the specified conversation
     * @param {string} conversationId 
     * @param {ConversationLabelPutRequest} conversationLabelPutRequest 
     * @param {any} [include] Include the specified related resources in the response. Supported values: \&#39;PARTICIPANTS\&#39;, \&#39;CONVERSATION_TYPE\&#39;. If empty, no related resource is returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationLabelsApiInterface
     */
    updateConversationLabelsRaw(requestParameters: UpdateConversationLabelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Conversation>>;

    /**
     * Updates labels for conversations
     * Updates all labels for the specified conversation
     */
    updateConversationLabels(requestParameters: UpdateConversationLabelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Conversation>;

}

/**
 * 
 */
export class ConversationLabelsApi extends runtime.BaseAPI implements ConversationLabelsApiInterface {

    /**
     * Creates labels for conversations
     * Create new labels for the specified conversation
     */
    async createConversationLabelsRaw(requestParameters: CreateConversationLabelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Conversation>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling createConversationLabels().'
            );
        }

        if (requestParameters['conversationLabelPostRequest'] == null) {
            throw new runtime.RequiredError(
                'conversationLabelPostRequest',
                'Required parameter "conversationLabelPostRequest" was null or undefined when calling createConversationLabels().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["OWNER", "API_KEY"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/conversations/{conversation_id}/labels`.replace(`{${"conversation_id"}}`, encodeURIComponent(String(requestParameters['conversationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConversationLabelPostRequestToJSON(requestParameters['conversationLabelPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationFromJSON(jsonValue));
    }

    /**
     * Creates labels for conversations
     * Create new labels for the specified conversation
     */
    async createConversationLabels(requestParameters: CreateConversationLabelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Conversation> {
        const response = await this.createConversationLabelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes label for a conversation
     * Deletes a label for the specified conversation
     */
    async deleteConversationLabelRaw(requestParameters: DeleteConversationLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Conversation>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling deleteConversationLabel().'
            );
        }

        if (requestParameters['label'] == null) {
            throw new runtime.RequiredError(
                'label',
                'Required parameter "label" was null or undefined when calling deleteConversationLabel().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["OWNER", "API_KEY"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/conversations/{conversation_id}/labels/{label}`.replace(`{${"conversation_id"}}`, encodeURIComponent(String(requestParameters['conversationId']))).replace(`{${"label"}}`, encodeURIComponent(String(requestParameters['label']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationFromJSON(jsonValue));
    }

    /**
     * Deletes label for a conversation
     * Deletes a label for the specified conversation
     */
    async deleteConversationLabel(requestParameters: DeleteConversationLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Conversation> {
        const response = await this.deleteConversationLabelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a specific label
     * Updates a specific label with a new one
     */
    async updateConversationLabelRaw(requestParameters: UpdateConversationLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling updateConversationLabel().'
            );
        }

        if (requestParameters['label'] == null) {
            throw new runtime.RequiredError(
                'label',
                'Required parameter "label" was null or undefined when calling updateConversationLabel().'
            );
        }

        if (requestParameters['conversationLabelPutRequest'] == null) {
            throw new runtime.RequiredError(
                'conversationLabelPutRequest',
                'Required parameter "conversationLabelPutRequest" was null or undefined when calling updateConversationLabel().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["OWNER", "API_KEY"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/conversations/{conversation_id}/labels/{label}`.replace(`{${"conversation_id"}}`, encodeURIComponent(String(requestParameters['conversationId']))).replace(`{${"label"}}`, encodeURIComponent(String(requestParameters['label']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ConversationLabelPutRequestToJSON(requestParameters['conversationLabelPutRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a specific label
     * Updates a specific label with a new one
     */
    async updateConversationLabel(requestParameters: UpdateConversationLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateConversationLabelRaw(requestParameters, initOverrides);
    }

    /**
     * Updates labels for conversations
     * Updates all labels for the specified conversation
     */
    async updateConversationLabelsRaw(requestParameters: UpdateConversationLabelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Conversation>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling updateConversationLabels().'
            );
        }

        if (requestParameters['conversationLabelPutRequest'] == null) {
            throw new runtime.RequiredError(
                'conversationLabelPutRequest',
                'Required parameter "conversationLabelPutRequest" was null or undefined when calling updateConversationLabels().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["OWNER", "API_KEY"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/conversations/{conversation_id}/labels`.replace(`{${"conversation_id"}}`, encodeURIComponent(String(requestParameters['conversationId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ConversationLabelPutRequestToJSON(requestParameters['conversationLabelPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationFromJSON(jsonValue));
    }

    /**
     * Updates labels for conversations
     * Updates all labels for the specified conversation
     */
    async updateConversationLabels(requestParameters: UpdateConversationLabelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Conversation> {
        const response = await this.updateConversationLabelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
