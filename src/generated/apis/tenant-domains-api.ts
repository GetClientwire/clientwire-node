/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TenantDomain,
  TenantDomainCreate,
  TenantDomainUpdate,
} from '../models/index';
import {
    TenantDomainFromJSON,
    TenantDomainToJSON,
    TenantDomainCreateFromJSON,
    TenantDomainCreateToJSON,
    TenantDomainUpdateFromJSON,
    TenantDomainUpdateToJSON,
} from '../models/index';

export interface CreateDomainRequest {
    tenantId: string;
    tenantDomainCreate: TenantDomainCreate;
}

export interface DeleteDomainRequest {
    domainId: string;
    tenantId: string;
}

export interface GetDomainsRequest {
    tenantId: string;
    type?: string | null;
}

export interface UpdateDomainRequest {
    domainId: string;
    tenantId: string;
    tenantDomainUpdate: TenantDomainUpdate;
}

/**
 * TenantDomainsApi - interface
 * 
 * @export
 * @interface TenantDomainsApiInterface
 */
export interface TenantDomainsApiInterface {
    /**
     * Create a new custom domain for a tenant. Only one custom domain is allowed per tenant per type (client/main).
     * @summary Create a custom domain
     * @param {string} tenantId The tenant ID
     * @param {TenantDomainCreate} tenantDomainCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantDomainsApiInterface
     */
    createDomainRaw(requestParameters: CreateDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantDomain>>;

    /**
     * Create a new custom domain for a tenant. Only one custom domain is allowed per tenant per type (client/main).
     * Create a custom domain
     */
    createDomain(requestParameters: CreateDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantDomain>;

    /**
     * Delete a custom domain for a tenant. System domains cannot be deleted.
     * @summary Delete a custom domain
     * @param {string} domainId The domain ID to delete
     * @param {string} tenantId The tenant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantDomainsApiInterface
     */
    deleteDomainRaw(requestParameters: DeleteDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a custom domain for a tenant. System domains cannot be deleted.
     * Delete a custom domain
     */
    deleteDomain(requestParameters: DeleteDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * List all domains (custom and system) associated with a tenant
     * @summary Get all domains for a tenant
     * @param {string} tenantId The tenant ID
     * @param {string} [type] Filter domains by type (system or custom)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantDomainsApiInterface
     */
    getDomainsRaw(requestParameters: GetDomainsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TenantDomain>>>;

    /**
     * List all domains (custom and system) associated with a tenant
     * Get all domains for a tenant
     */
    getDomains(requestParameters: GetDomainsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TenantDomain>>;

    /**
     * Update an existing custom domain for a tenant. System domains cannot be updated.
     * @summary Update a custom domain
     * @param {string} domainId The domain ID to update
     * @param {string} tenantId The tenant ID
     * @param {TenantDomainUpdate} tenantDomainUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantDomainsApiInterface
     */
    updateDomainRaw(requestParameters: UpdateDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantDomain>>;

    /**
     * Update an existing custom domain for a tenant. System domains cannot be updated.
     * Update a custom domain
     */
    updateDomain(requestParameters: UpdateDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantDomain>;

}

/**
 * 
 */
export class TenantDomainsApi extends runtime.BaseAPI implements TenantDomainsApiInterface {

    /**
     * Create a new custom domain for a tenant. Only one custom domain is allowed per tenant per type (client/main).
     * Create a custom domain
     */
    async createDomainRaw(requestParameters: CreateDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantDomain>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling createDomain().'
            );
        }

        if (requestParameters['tenantDomainCreate'] == null) {
            throw new runtime.RequiredError(
                'tenantDomainCreate',
                'Required parameter "tenantDomainCreate" was null or undefined when calling createDomain().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["OWNER", "API_KEY"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/tenants/{tenant_id}/domains`.replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TenantDomainCreateToJSON(requestParameters['tenantDomainCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantDomainFromJSON(jsonValue));
    }

    /**
     * Create a new custom domain for a tenant. Only one custom domain is allowed per tenant per type (client/main).
     * Create a custom domain
     */
    async createDomain(requestParameters: CreateDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantDomain> {
        const response = await this.createDomainRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a custom domain for a tenant. System domains cannot be deleted.
     * Delete a custom domain
     */
    async deleteDomainRaw(requestParameters: DeleteDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['domainId'] == null) {
            throw new runtime.RequiredError(
                'domainId',
                'Required parameter "domainId" was null or undefined when calling deleteDomain().'
            );
        }

        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling deleteDomain().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["OWNER"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/tenants/{tenant_id}/domains/{domain_id}`.replace(`{${"domain_id"}}`, encodeURIComponent(String(requestParameters['domainId']))).replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a custom domain for a tenant. System domains cannot be deleted.
     * Delete a custom domain
     */
    async deleteDomain(requestParameters: DeleteDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDomainRaw(requestParameters, initOverrides);
    }

    /**
     * List all domains (custom and system) associated with a tenant
     * Get all domains for a tenant
     */
    async getDomainsRaw(requestParameters: GetDomainsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TenantDomain>>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling getDomains().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["OWNER", "API_KEY"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/tenants/{tenant_id}/domains`.replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TenantDomainFromJSON));
    }

    /**
     * List all domains (custom and system) associated with a tenant
     * Get all domains for a tenant
     */
    async getDomains(requestParameters: GetDomainsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TenantDomain>> {
        const response = await this.getDomainsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing custom domain for a tenant. System domains cannot be updated.
     * Update a custom domain
     */
    async updateDomainRaw(requestParameters: UpdateDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantDomain>> {
        if (requestParameters['domainId'] == null) {
            throw new runtime.RequiredError(
                'domainId',
                'Required parameter "domainId" was null or undefined when calling updateDomain().'
            );
        }

        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling updateDomain().'
            );
        }

        if (requestParameters['tenantDomainUpdate'] == null) {
            throw new runtime.RequiredError(
                'tenantDomainUpdate',
                'Required parameter "tenantDomainUpdate" was null or undefined when calling updateDomain().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["OWNER"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/tenants/{tenant_id}/domains/{domain_id}`.replace(`{${"domain_id"}}`, encodeURIComponent(String(requestParameters['domainId']))).replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TenantDomainUpdateToJSON(requestParameters['tenantDomainUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantDomainFromJSON(jsonValue));
    }

    /**
     * Update an existing custom domain for a tenant. System domains cannot be updated.
     * Update a custom domain
     */
    async updateDomain(requestParameters: UpdateDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantDomain> {
        const response = await this.updateDomainRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
