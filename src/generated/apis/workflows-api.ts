/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Workflow,
  WorkflowPaginatedResponse,
  WorkflowPostRequest,
  WorkflowPutRequest,
} from '../models/index';
import {
    WorkflowFromJSON,
    WorkflowToJSON,
    WorkflowPaginatedResponseFromJSON,
    WorkflowPaginatedResponseToJSON,
    WorkflowPostRequestFromJSON,
    WorkflowPostRequestToJSON,
    WorkflowPutRequestFromJSON,
    WorkflowPutRequestToJSON,
} from '../models/index';

export interface CreateWorkflowRequest {
    workflowPostRequest: WorkflowPostRequest;
}

export interface DeleteWorkflowRequest {
    workflowId: string;
}

export interface GetWorkflowRequest {
    workflowId: string;
}

export interface ListWorkflowsRequest {
    conversationTypeId?: string | null;
    direction?: string | null;
    limit?: number;
    offset?: number;
    sortBy?: string | null;
}

export interface UpdateWorkflowRequest {
    workflowId: string;
    workflowPutRequest: WorkflowPutRequest;
}

/**
 * WorkflowsApi - interface
 * 
 * @export
 * @interface WorkflowsApiInterface
 */
export interface WorkflowsApiInterface {
    /**
     * Creates a workflow.
     * @summary Create a new workflow for the specified tenant.
     * @param {WorkflowPostRequest} workflowPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiInterface
     */
    createWorkflowRaw(requestParameters: CreateWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Workflow>>;

    /**
     * Creates a workflow.
     * Create a new workflow for the specified tenant.
     */
    createWorkflow(requestParameters: CreateWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Workflow>;

    /**
     * Removes a workflow by ID.
     * @summary Delete a workflow.
     * @param {string} workflowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiInterface
     */
    deleteWorkflowRaw(requestParameters: DeleteWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Removes a workflow by ID.
     * Delete a workflow.
     */
    deleteWorkflow(requestParameters: DeleteWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieves workflow by ID.
     * @summary Get a single workflow.
     * @param {string} workflowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiInterface
     */
    getWorkflowRaw(requestParameters: GetWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Workflow>>;

    /**
     * Retrieves workflow by ID.
     * Get a single workflow.
     */
    getWorkflow(requestParameters: GetWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Workflow>;

    /**
     * Returns a list of workflows for the tenant.
     * @summary List all workflows for the specified tenant.
     * @param {string} [conversationTypeId] 
     * @param {string} [direction] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiInterface
     */
    listWorkflowsRaw(requestParameters: ListWorkflowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowPaginatedResponse>>;

    /**
     * Returns a list of workflows for the tenant.
     * List all workflows for the specified tenant.
     */
    listWorkflows(requestParameters: ListWorkflowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowPaginatedResponse>;

    /**
     * Updates a workflow by ID.
     * @summary Update a workflow.
     * @param {string} workflowId 
     * @param {WorkflowPutRequest} workflowPutRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiInterface
     */
    updateWorkflowRaw(requestParameters: UpdateWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Workflow>>;

    /**
     * Updates a workflow by ID.
     * Update a workflow.
     */
    updateWorkflow(requestParameters: UpdateWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Workflow>;

}

/**
 * 
 */
export class WorkflowsApi extends runtime.BaseAPI implements WorkflowsApiInterface {

    /**
     * Creates a workflow.
     * Create a new workflow for the specified tenant.
     */
    async createWorkflowRaw(requestParameters: CreateWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Workflow>> {
        if (requestParameters['workflowPostRequest'] == null) {
            throw new runtime.RequiredError(
                'workflowPostRequest',
                'Required parameter "workflowPostRequest" was null or undefined when calling createWorkflow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["OWNER", "API_KEY"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/workflows`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowPostRequestToJSON(requestParameters['workflowPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowFromJSON(jsonValue));
    }

    /**
     * Creates a workflow.
     * Create a new workflow for the specified tenant.
     */
    async createWorkflow(requestParameters: CreateWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Workflow> {
        const response = await this.createWorkflowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a workflow by ID.
     * Delete a workflow.
     */
    async deleteWorkflowRaw(requestParameters: DeleteWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workflowId'] == null) {
            throw new runtime.RequiredError(
                'workflowId',
                'Required parameter "workflowId" was null or undefined when calling deleteWorkflow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["OWNER", "API_KEY"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/workflows/{workflow_id}`.replace(`{${"workflow_id"}}`, encodeURIComponent(String(requestParameters['workflowId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a workflow by ID.
     * Delete a workflow.
     */
    async deleteWorkflow(requestParameters: DeleteWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWorkflowRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves workflow by ID.
     * Get a single workflow.
     */
    async getWorkflowRaw(requestParameters: GetWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Workflow>> {
        if (requestParameters['workflowId'] == null) {
            throw new runtime.RequiredError(
                'workflowId',
                'Required parameter "workflowId" was null or undefined when calling getWorkflow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["USER", "OWNER", "API_KEY", "CLIENT_PARTICIPANT"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/workflows/{workflow_id}`.replace(`{${"workflow_id"}}`, encodeURIComponent(String(requestParameters['workflowId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowFromJSON(jsonValue));
    }

    /**
     * Retrieves workflow by ID.
     * Get a single workflow.
     */
    async getWorkflow(requestParameters: GetWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Workflow> {
        const response = await this.getWorkflowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of workflows for the tenant.
     * List all workflows for the specified tenant.
     */
    async listWorkflowsRaw(requestParameters: ListWorkflowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowPaginatedResponse>> {
        const queryParameters: any = {};

        if (requestParameters['conversationTypeId'] != null) {
            queryParameters['conversation_type_id'] = requestParameters['conversationTypeId'];
        }

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["USER", "OWNER", "API_KEY"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/workflows`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowPaginatedResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of workflows for the tenant.
     * List all workflows for the specified tenant.
     */
    async listWorkflows(requestParameters: ListWorkflowsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowPaginatedResponse> {
        const response = await this.listWorkflowsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a workflow by ID.
     * Update a workflow.
     */
    async updateWorkflowRaw(requestParameters: UpdateWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Workflow>> {
        if (requestParameters['workflowId'] == null) {
            throw new runtime.RequiredError(
                'workflowId',
                'Required parameter "workflowId" was null or undefined when calling updateWorkflow().'
            );
        }

        if (requestParameters['workflowPutRequest'] == null) {
            throw new runtime.RequiredError(
                'workflowPutRequest',
                'Required parameter "workflowPutRequest" was null or undefined when calling updateWorkflow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["OWNER", "API_KEY"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/workflows/{workflow_id}`.replace(`{${"workflow_id"}}`, encodeURIComponent(String(requestParameters['workflowId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowPutRequestToJSON(requestParameters['workflowPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowFromJSON(jsonValue));
    }

    /**
     * Updates a workflow by ID.
     * Update a workflow.
     */
    async updateWorkflow(requestParameters: UpdateWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Workflow> {
        const response = await this.updateWorkflowRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
