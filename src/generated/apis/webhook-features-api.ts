/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TenantWebhookFeature,
  UpdateTenantWebhookFeature,
} from '../models/index';
import {
    TenantWebhookFeatureFromJSON,
    TenantWebhookFeatureToJSON,
    UpdateTenantWebhookFeatureFromJSON,
    UpdateTenantWebhookFeatureToJSON,
} from '../models/index';

export interface DeleteWebhookFeatureRequest {
    webhookType: string;
}

export interface UpdateWebhookFeatureRequest {
    updateTenantWebhookFeature: UpdateTenantWebhookFeature;
}

/**
 * WebhookFeaturesApi - interface
 * 
 * @export
 * @interface WebhookFeaturesApiInterface
 */
export interface WebhookFeaturesApiInterface {
    /**
     * Deletes a webhook feature setting for the specified tenant
     * @summary Delete a webhook feature setting
     * @param {string} webhookType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookFeaturesApiInterface
     */
    deleteWebhookFeatureRaw(requestParameters: DeleteWebhookFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a webhook feature setting for the specified tenant
     * Delete a webhook feature setting
     */
    deleteWebhookFeature(requestParameters: DeleteWebhookFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Returns all webhook feature settings for the specified tenant
     * @summary Get webhook feature settings for a tenant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookFeaturesApiInterface
     */
    getWebhookFeaturesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TenantWebhookFeature>>>;

    /**
     * Returns all webhook feature settings for the specified tenant
     * Get webhook feature settings for a tenant
     */
    getWebhookFeatures(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TenantWebhookFeature>>;

    /**
     * Returns all available webhook types from the catalog
     * @summary Get available webhook types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookFeaturesApiInterface
     */
    listAvailableWebhookTypesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * Returns all available webhook types from the catalog
     * Get available webhook types
     */
    listAvailableWebhookTypes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>>;

    /**
     * Updates or creates a webhook feature setting for the specified tenant
     * @summary Update a webhook feature setting
     * @param {UpdateTenantWebhookFeature} updateTenantWebhookFeature 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookFeaturesApiInterface
     */
    updateWebhookFeatureRaw(requestParameters: UpdateWebhookFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantWebhookFeature>>;

    /**
     * Updates or creates a webhook feature setting for the specified tenant
     * Update a webhook feature setting
     */
    updateWebhookFeature(requestParameters: UpdateWebhookFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantWebhookFeature>;

}

/**
 * 
 */
export class WebhookFeaturesApi extends runtime.BaseAPI implements WebhookFeaturesApiInterface {

    /**
     * Deletes a webhook feature setting for the specified tenant
     * Delete a webhook feature setting
     */
    async deleteWebhookFeatureRaw(requestParameters: DeleteWebhookFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['webhookType'] == null) {
            throw new runtime.RequiredError(
                'webhookType',
                'Required parameter "webhookType" was null or undefined when calling deleteWebhookFeature().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["OWNER", "API_KEY"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/webhooks/features/{webhookType}`.replace(`{${"webhookType"}}`, encodeURIComponent(String(requestParameters['webhookType']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a webhook feature setting for the specified tenant
     * Delete a webhook feature setting
     */
    async deleteWebhookFeature(requestParameters: DeleteWebhookFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWebhookFeatureRaw(requestParameters, initOverrides);
    }

    /**
     * Returns all webhook feature settings for the specified tenant
     * Get webhook feature settings for a tenant
     */
    async getWebhookFeaturesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TenantWebhookFeature>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["OWNER", "API_KEY"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/webhooks/features`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TenantWebhookFeatureFromJSON));
    }

    /**
     * Returns all webhook feature settings for the specified tenant
     * Get webhook feature settings for a tenant
     */
    async getWebhookFeatures(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TenantWebhookFeature>> {
        const response = await this.getWebhookFeaturesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns all available webhook types from the catalog
     * Get available webhook types
     */
    async listAvailableWebhookTypesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["OWNER", "API_KEY"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/webhooks/features/available`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns all available webhook types from the catalog
     * Get available webhook types
     */
    async listAvailableWebhookTypes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.listAvailableWebhookTypesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Updates or creates a webhook feature setting for the specified tenant
     * Update a webhook feature setting
     */
    async updateWebhookFeatureRaw(requestParameters: UpdateWebhookFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantWebhookFeature>> {
        if (requestParameters['updateTenantWebhookFeature'] == null) {
            throw new runtime.RequiredError(
                'updateTenantWebhookFeature',
                'Required parameter "updateTenantWebhookFeature" was null or undefined when calling updateWebhookFeature().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["OWNER", "API_KEY"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/webhooks/features`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTenantWebhookFeatureToJSON(requestParameters['updateTenantWebhookFeature']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantWebhookFeatureFromJSON(jsonValue));
    }

    /**
     * Updates or creates a webhook feature setting for the specified tenant
     * Update a webhook feature setting
     */
    async updateWebhookFeature(requestParameters: UpdateWebhookFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantWebhookFeature> {
        const response = await this.updateWebhookFeatureRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
