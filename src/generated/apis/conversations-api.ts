/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Conversation,
  ConversationListResponse,
  ConversationLockRequest,
  ConversationPaginatedResponse,
  ConversationPatchRequest,
  ConversationPostRequest,
  ConversationPutRequest,
  ConversationsByIdsRequest,
} from '../models/index';
import {
    ConversationFromJSON,
    ConversationToJSON,
    ConversationListResponseFromJSON,
    ConversationListResponseToJSON,
    ConversationLockRequestFromJSON,
    ConversationLockRequestToJSON,
    ConversationPaginatedResponseFromJSON,
    ConversationPaginatedResponseToJSON,
    ConversationPatchRequestFromJSON,
    ConversationPatchRequestToJSON,
    ConversationPostRequestFromJSON,
    ConversationPostRequestToJSON,
    ConversationPutRequestFromJSON,
    ConversationPutRequestToJSON,
    ConversationsByIdsRequestFromJSON,
    ConversationsByIdsRequestToJSON,
} from '../models/index';

export interface CreateConversationRequest {
    conversationPostRequest: ConversationPostRequest;
    includes?: any;
}

export interface CreateOrUpdateConversationRequest {
    conversationId: string;
    conversationPutRequest: ConversationPutRequest;
    includes?: any;
}

export interface DeleteConversationRequest {
    conversationId: string;
}

export interface GetConversationRequest {
    conversationId: string;
    includes?: any;
}

export interface GetConversationsRequest {
    archived?: boolean | null;
    createdAfter?: any;
    createdBefore?: any;
    includes?: any;
    limit?: number;
    offset?: number;
    order?: any;
    orderBy?: any;
    search?: string | null;
    updatedAfter?: any;
    updatedBefore?: any;
}

export interface GetConversationsByIdsRequest {
    conversationsByIdsRequest: ConversationsByIdsRequest;
    includes?: any;
}

export interface LockConversationRequest {
    conversationId: string;
    conversationLockRequest: ConversationLockRequest;
    includes?: any;
}

export interface UnlockConversationRequest {
    conversationId: string;
    includes?: any;
}

export interface UnlockConversationsFromUsersRequest {
    userId: string;
}

export interface UpdateConversationRequest {
    conversationId: string;
    conversationPatchRequest: ConversationPatchRequest;
    includes?: any;
}

/**
 * ConversationsApi - interface
 * 
 * @export
 * @interface ConversationsApiInterface
 */
export interface ConversationsApiInterface {
    /**
     * Creates a conversation and optional participants.
     * @summary Create a new conversation for the specified tenant.
     * @param {ConversationPostRequest} conversationPostRequest 
     * @param {any} [includes] Include the specified related resources in the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApiInterface
     */
    createConversationRaw(requestParameters: CreateConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Conversation>>;

    /**
     * Creates a conversation and optional participants.
     * Create a new conversation for the specified tenant.
     */
    createConversation(requestParameters: CreateConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Conversation>;

    /**
     * If it doesn\'t exist, creates it; otherwise updates it.
     * @summary Create or update a conversation.
     * @param {string} conversationId 
     * @param {ConversationPutRequest} conversationPutRequest 
     * @param {any} [includes] Include the specified related resources in the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApiInterface
     */
    createOrUpdateConversationRaw(requestParameters: CreateOrUpdateConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Conversation>>;

    /**
     * If it doesn\'t exist, creates it; otherwise updates it.
     * Create or update a conversation.
     */
    createOrUpdateConversation(requestParameters: CreateOrUpdateConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Conversation>;

    /**
     * Removes a conversation by ID.
     * @summary Delete a conversation.
     * @param {string} conversationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApiInterface
     */
    deleteConversationRaw(requestParameters: DeleteConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Removes a conversation by ID.
     * Delete a conversation.
     */
    deleteConversation(requestParameters: DeleteConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieves conversation details by ID.
     * @summary Get a single conversation.
     * @param {string} conversationId 
     * @param {any} [includes] Include the specified related resources in the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApiInterface
     */
    getConversationRaw(requestParameters: GetConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Conversation>>;

    /**
     * Retrieves conversation details by ID.
     * Get a single conversation.
     */
    getConversation(requestParameters: GetConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Conversation>;

    /**
     * Returns a paginated list of conversations for the tenant.
     * @summary List all conversations for the specified tenant.
     * @param {boolean} [archived] 
     * @param {any} [createdAfter] Only include messages created after this date-time
     * @param {any} [createdBefore] Only include messages created before this date-time
     * @param {any} [includes] Include the specified related resources in the response.
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {any} [order] Direction of the sort. Possible values: ASC, DESC. If not provided will fallback to DESC.
     * @param {any} [orderBy] Sort result based on this field. Possible values: created_at, updated_at. If not provided it will fallback to created_at
     * @param {string} [search] 
     * @param {any} [updatedAfter] Only include messages updated after this date-time
     * @param {any} [updatedBefore] Only include messages updated before this date-time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApiInterface
     */
    getConversationsRaw(requestParameters: GetConversationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationPaginatedResponse>>;

    /**
     * Returns a paginated list of conversations for the tenant.
     * List all conversations for the specified tenant.
     */
    getConversations(requestParameters: GetConversationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationPaginatedResponse>;

    /**
     * Retrieves multiple conversations by their public IDs in a POST request body.
     * @summary Get a list of conversations by their ids.
     * @param {ConversationsByIdsRequest} conversationsByIdsRequest 
     * @param {any} [includes] Include the specified related resources in the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApiInterface
     */
    getConversationsByIdsRaw(requestParameters: GetConversationsByIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationListResponse>>;

    /**
     * Retrieves multiple conversations by their public IDs in a POST request body.
     * Get a list of conversations by their ids.
     */
    getConversationsByIds(requestParameters: GetConversationsByIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationListResponse>;

    /**
     * Lock a conversation until a specified time, optionally create a note also
     * @summary Lock a conversation
     * @param {string} conversationId 
     * @param {ConversationLockRequest} conversationLockRequest 
     * @param {any} [includes] Include the specified related resources in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApiInterface
     */
    lockConversationRaw(requestParameters: LockConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Conversation>>;

    /**
     * Lock a conversation until a specified time, optionally create a note also
     * Lock a conversation
     */
    lockConversation(requestParameters: LockConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Conversation>;

    /**
     * Unlock a conversation
     * @summary Unlock a conversation
     * @param {string} conversationId 
     * @param {any} [includes] Include the specified related resources in the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApiInterface
     */
    unlockConversationRaw(requestParameters: UnlockConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Conversation>>;

    /**
     * Unlock a conversation
     * Unlock a conversation
     */
    unlockConversation(requestParameters: UnlockConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Conversation>;

    /**
     * Unlock all conversations locked by this user
     * @summary Unlock conversations locked by user
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApiInterface
     */
    unlockConversationsFromUsersRaw(requestParameters: UnlockConversationsFromUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Unlock all conversations locked by this user
     * Unlock conversations locked by user
     */
    unlockConversationsFromUsers(requestParameters: UnlockConversationsFromUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Allows patching id, archived, conversation_data, etc.
     * @summary Update partial fields of an existing conversation.
     * @param {string} conversationId 
     * @param {ConversationPatchRequest} conversationPatchRequest The patch body for updating conversation fields.
     * @param {any} [includes] Include the specified related resources in the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApiInterface
     */
    updateConversationRaw(requestParameters: UpdateConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Conversation>>;

    /**
     * Allows patching id, archived, conversation_data, etc.
     * Update partial fields of an existing conversation.
     */
    updateConversation(requestParameters: UpdateConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Conversation>;

}

/**
 * 
 */
export class ConversationsApi extends runtime.BaseAPI implements ConversationsApiInterface {

    /**
     * Creates a conversation and optional participants.
     * Create a new conversation for the specified tenant.
     */
    async createConversationRaw(requestParameters: CreateConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Conversation>> {
        if (requestParameters['conversationPostRequest'] == null) {
            throw new runtime.RequiredError(
                'conversationPostRequest',
                'Required parameter "conversationPostRequest" was null or undefined when calling createConversation().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includes'] != null) {
            queryParameters['includes'] = requestParameters['includes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["OWNER", "API_KEY", "USER"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/conversations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConversationPostRequestToJSON(requestParameters['conversationPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationFromJSON(jsonValue));
    }

    /**
     * Creates a conversation and optional participants.
     * Create a new conversation for the specified tenant.
     */
    async createConversation(requestParameters: CreateConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Conversation> {
        const response = await this.createConversationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * If it doesn\'t exist, creates it; otherwise updates it.
     * Create or update a conversation.
     */
    async createOrUpdateConversationRaw(requestParameters: CreateOrUpdateConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Conversation>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling createOrUpdateConversation().'
            );
        }

        if (requestParameters['conversationPutRequest'] == null) {
            throw new runtime.RequiredError(
                'conversationPutRequest',
                'Required parameter "conversationPutRequest" was null or undefined when calling createOrUpdateConversation().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includes'] != null) {
            queryParameters['includes'] = requestParameters['includes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["OWNER", "API_KEY", "USER"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/conversations/{conversation_id}`.replace(`{${"conversation_id"}}`, encodeURIComponent(String(requestParameters['conversationId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ConversationPutRequestToJSON(requestParameters['conversationPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationFromJSON(jsonValue));
    }

    /**
     * If it doesn\'t exist, creates it; otherwise updates it.
     * Create or update a conversation.
     */
    async createOrUpdateConversation(requestParameters: CreateOrUpdateConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Conversation> {
        const response = await this.createOrUpdateConversationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a conversation by ID.
     * Delete a conversation.
     */
    async deleteConversationRaw(requestParameters: DeleteConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling deleteConversation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["OWNER", "API_KEY"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/conversations/{conversation_id}`.replace(`{${"conversation_id"}}`, encodeURIComponent(String(requestParameters['conversationId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a conversation by ID.
     * Delete a conversation.
     */
    async deleteConversation(requestParameters: DeleteConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteConversationRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves conversation details by ID.
     * Get a single conversation.
     */
    async getConversationRaw(requestParameters: GetConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Conversation>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling getConversation().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includes'] != null) {
            queryParameters['includes'] = requestParameters['includes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["USER", "OWNER", "API_KEY", "CLIENT_PARTICIPANT"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/conversations/{conversation_id}`.replace(`{${"conversation_id"}}`, encodeURIComponent(String(requestParameters['conversationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationFromJSON(jsonValue));
    }

    /**
     * Retrieves conversation details by ID.
     * Get a single conversation.
     */
    async getConversation(requestParameters: GetConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Conversation> {
        const response = await this.getConversationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a paginated list of conversations for the tenant.
     * List all conversations for the specified tenant.
     */
    async getConversationsRaw(requestParameters: GetConversationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationPaginatedResponse>> {
        const queryParameters: any = {};

        if (requestParameters['archived'] != null) {
            queryParameters['archived'] = requestParameters['archived'];
        }

        if (requestParameters['createdAfter'] != null) {
            queryParameters['created_after'] = requestParameters['createdAfter'];
        }

        if (requestParameters['createdBefore'] != null) {
            queryParameters['created_before'] = requestParameters['createdBefore'];
        }

        if (requestParameters['includes'] != null) {
            queryParameters['includes'] = requestParameters['includes'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['order_by'] = requestParameters['orderBy'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['updatedAfter'] != null) {
            queryParameters['updated_after'] = requestParameters['updatedAfter'];
        }

        if (requestParameters['updatedBefore'] != null) {
            queryParameters['updated_before'] = requestParameters['updatedBefore'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["USER", "OWNER", "API_KEY"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/conversations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationPaginatedResponseFromJSON(jsonValue));
    }

    /**
     * Returns a paginated list of conversations for the tenant.
     * List all conversations for the specified tenant.
     */
    async getConversations(requestParameters: GetConversationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationPaginatedResponse> {
        const response = await this.getConversationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves multiple conversations by their public IDs in a POST request body.
     * Get a list of conversations by their ids.
     */
    async getConversationsByIdsRaw(requestParameters: GetConversationsByIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationListResponse>> {
        if (requestParameters['conversationsByIdsRequest'] == null) {
            throw new runtime.RequiredError(
                'conversationsByIdsRequest',
                'Required parameter "conversationsByIdsRequest" was null or undefined when calling getConversationsByIds().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includes'] != null) {
            queryParameters['includes'] = requestParameters['includes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["USER", "OWNER", "API_KEY"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/conversations/by_ids`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConversationsByIdsRequestToJSON(requestParameters['conversationsByIdsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves multiple conversations by their public IDs in a POST request body.
     * Get a list of conversations by their ids.
     */
    async getConversationsByIds(requestParameters: GetConversationsByIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationListResponse> {
        const response = await this.getConversationsByIdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lock a conversation until a specified time, optionally create a note also
     * Lock a conversation
     */
    async lockConversationRaw(requestParameters: LockConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Conversation>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling lockConversation().'
            );
        }

        if (requestParameters['conversationLockRequest'] == null) {
            throw new runtime.RequiredError(
                'conversationLockRequest',
                'Required parameter "conversationLockRequest" was null or undefined when calling lockConversation().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includes'] != null) {
            queryParameters['includes'] = requestParameters['includes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["USER", "OWNER", "API_KEY"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/conversations/{conversation_id}/lock`.replace(`{${"conversation_id"}}`, encodeURIComponent(String(requestParameters['conversationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConversationLockRequestToJSON(requestParameters['conversationLockRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationFromJSON(jsonValue));
    }

    /**
     * Lock a conversation until a specified time, optionally create a note also
     * Lock a conversation
     */
    async lockConversation(requestParameters: LockConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Conversation> {
        const response = await this.lockConversationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unlock a conversation
     * Unlock a conversation
     */
    async unlockConversationRaw(requestParameters: UnlockConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Conversation>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling unlockConversation().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includes'] != null) {
            queryParameters['includes'] = requestParameters['includes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["USER", "OWNER", "API_KEY"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/conversations/{conversation_id}/unlock`.replace(`{${"conversation_id"}}`, encodeURIComponent(String(requestParameters['conversationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationFromJSON(jsonValue));
    }

    /**
     * Unlock a conversation
     * Unlock a conversation
     */
    async unlockConversation(requestParameters: UnlockConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Conversation> {
        const response = await this.unlockConversationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unlock all conversations locked by this user
     * Unlock conversations locked by user
     */
    async unlockConversationsFromUsersRaw(requestParameters: UnlockConversationsFromUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling unlockConversationsFromUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["OWNER", "API_KEY"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/conversations/{user_id}/unlock`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Unlock all conversations locked by this user
     * Unlock conversations locked by user
     */
    async unlockConversationsFromUsers(requestParameters: UnlockConversationsFromUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unlockConversationsFromUsersRaw(requestParameters, initOverrides);
    }

    /**
     * Allows patching id, archived, conversation_data, etc.
     * Update partial fields of an existing conversation.
     */
    async updateConversationRaw(requestParameters: UpdateConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Conversation>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling updateConversation().'
            );
        }

        if (requestParameters['conversationPatchRequest'] == null) {
            throw new runtime.RequiredError(
                'conversationPatchRequest',
                'Required parameter "conversationPatchRequest" was null or undefined when calling updateConversation().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includes'] != null) {
            queryParameters['includes'] = requestParameters['includes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["OWNER", "API_KEY", "USER"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/conversations/{conversation_id}`.replace(`{${"conversation_id"}}`, encodeURIComponent(String(requestParameters['conversationId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ConversationPatchRequestToJSON(requestParameters['conversationPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationFromJSON(jsonValue));
    }

    /**
     * Allows patching id, archived, conversation_data, etc.
     * Update partial fields of an existing conversation.
     */
    async updateConversation(requestParameters: UpdateConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Conversation> {
        const response = await this.updateConversationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
