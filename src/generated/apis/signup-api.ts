/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SignupMachineRequest,
  SignupRequest,
  SignupResponse,
} from '../models/index';
import {
    SignupMachineRequestFromJSON,
    SignupMachineRequestToJSON,
    SignupRequestFromJSON,
    SignupRequestToJSON,
    SignupResponseFromJSON,
    SignupResponseToJSON,
} from '../models/index';

export interface SignupOperationRequest {
    signupRequest: SignupRequest;
}

export interface SignupAsMachineRequest {
    signupMachineRequest: SignupMachineRequest;
}

/**
 * SignupApi - interface
 * 
 * @export
 * @interface SignupApiInterface
 */
export interface SignupApiInterface {
    /**
     * Tenant and user created successfully. You should now be able to login.
     * @summary Create a new account and user.
     * @param {SignupRequest} signupRequest The data needed to sign up a new tenant and user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignupApiInterface
     */
    signupRaw(requestParameters: SignupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SignupResponse>>;

    /**
     * Tenant and user created successfully. You should now be able to login.
     * Create a new account and user.
     */
    signup(requestParameters: SignupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SignupResponse>;

    /**
     * Signup for automated new tenant creation. You will need an existing \'main\' tenant thathas been provisioned to allow machine setup. Instead of creating a user, we will create anAPI key for you.
     * @summary Signup for automation/machines.
     * @param {SignupMachineRequest} signupMachineRequest The data needed to sign up a new tenant with api key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignupApiInterface
     */
    signupAsMachineRaw(requestParameters: SignupAsMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SignupResponse>>;

    /**
     * Signup for automated new tenant creation. You will need an existing \'main\' tenant thathas been provisioned to allow machine setup. Instead of creating a user, we will create anAPI key for you.
     * Signup for automation/machines.
     */
    signupAsMachine(requestParameters: SignupAsMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SignupResponse>;

}

/**
 * 
 */
export class SignupApi extends runtime.BaseAPI implements SignupApiInterface {

    /**
     * Tenant and user created successfully. You should now be able to login.
     * Create a new account and user.
     */
    async signupRaw(requestParameters: SignupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SignupResponse>> {
        if (requestParameters['signupRequest'] == null) {
            throw new runtime.RequiredError(
                'signupRequest',
                'Required parameter "signupRequest" was null or undefined when calling signup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/signup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignupRequestToJSON(requestParameters['signupRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignupResponseFromJSON(jsonValue));
    }

    /**
     * Tenant and user created successfully. You should now be able to login.
     * Create a new account and user.
     */
    async signup(requestParameters: SignupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SignupResponse> {
        const response = await this.signupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Signup for automated new tenant creation. You will need an existing \'main\' tenant thathas been provisioned to allow machine setup. Instead of creating a user, we will create anAPI key for you.
     * Signup for automation/machines.
     */
    async signupAsMachineRaw(requestParameters: SignupAsMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SignupResponse>> {
        if (requestParameters['signupMachineRequest'] == null) {
            throw new runtime.RequiredError(
                'signupMachineRequest',
                'Required parameter "signupMachineRequest" was null or undefined when calling signupAsMachine().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/signup/machine`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignupMachineRequestToJSON(requestParameters['signupMachineRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignupResponseFromJSON(jsonValue));
    }

    /**
     * Signup for automated new tenant creation. You will need an existing \'main\' tenant thathas been provisioned to allow machine setup. Instead of creating a user, we will create anAPI key for you.
     * Signup for automation/machines.
     */
    async signupAsMachine(requestParameters: SignupAsMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SignupResponse> {
        const response = await this.signupAsMachineRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
