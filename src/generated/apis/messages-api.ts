/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Message,
  MessagePaginatedResponse,
  MessagePostRequest,
} from '../models/index';
import {
    MessageFromJSON,
    MessageToJSON,
    MessagePaginatedResponseFromJSON,
    MessagePaginatedResponseToJSON,
    MessagePostRequestFromJSON,
    MessagePostRequestToJSON,
} from '../models/index';

export interface CreateMessageRequest {
    conversationId: string;
    messagePostRequest: MessagePostRequest;
}

export interface GetMessageRequest {
    conversationId: string;
    messageId: string;
}

export interface GetMessagesRequest {
    conversationId: string;
    createdAfter?: any;
    createdBefore?: any;
    lastSequence?: number | null;
    limit?: number | null;
    offset?: number | null;
    order?: string | null;
    orderBy?: string | null;
    updatedAfter?: any;
    updatedBefore?: any;
}

/**
 * MessagesApi - interface
 * 
 * @export
 * @interface MessagesApiInterface
 */
export interface MessagesApiInterface {
    /**
     * Queues a message to be added to the conversation.
     * @summary Add a new message to a conversation.
     * @param {string} conversationId 
     * @param {MessagePostRequest} messagePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApiInterface
     */
    createMessageRaw(requestParameters: CreateMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Message>>;

    /**
     * Queues a message to be added to the conversation.
     * Add a new message to a conversation.
     */
    createMessage(requestParameters: CreateMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Message>;

    /**
     * Retrieves details of a specific message by ID.
     * @summary Get a single message in the specified conversation.
     * @param {string} conversationId 
     * @param {string} messageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApiInterface
     */
    getMessageRaw(requestParameters: GetMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Message>>;

    /**
     * Retrieves details of a specific message by ID.
     * Get a single message in the specified conversation.
     */
    getMessage(requestParameters: GetMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Message>;

    /**
     * Returns a paginated list of messages for the conversation.
     * @summary Get messages of a conversation.
     * @param {string} conversationId 
     * @param {any} [createdAfter] Only include messages created after this date-time
     * @param {any} [createdBefore] Only include messages created before this date-time
     * @param {number} [lastSequence] If using sequence-based pagination, the last known sequence.
     * @param {number} [limit] Max number of messages to return (page size)
     * @param {number} [offset] Starting offset for pagination
     * @param {string} [order] Sort direction (asc/desc)
     * @param {string} [orderBy] Field to sort by, e.g. \&#39;createdAt\&#39; or \&#39;updatedAt\&#39;
     * @param {any} [updatedAfter] Only include messages updated after this date-time
     * @param {any} [updatedBefore] Only include messages updated before this date-time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApiInterface
     */
    getMessagesRaw(requestParameters: GetMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessagePaginatedResponse>>;

    /**
     * Returns a paginated list of messages for the conversation.
     * Get messages of a conversation.
     */
    getMessages(requestParameters: GetMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessagePaginatedResponse>;

}

/**
 * 
 */
export class MessagesApi extends runtime.BaseAPI implements MessagesApiInterface {

    /**
     * Queues a message to be added to the conversation.
     * Add a new message to a conversation.
     */
    async createMessageRaw(requestParameters: CreateMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Message>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling createMessage().'
            );
        }

        if (requestParameters['messagePostRequest'] == null) {
            throw new runtime.RequiredError(
                'messagePostRequest',
                'Required parameter "messagePostRequest" was null or undefined when calling createMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["CLIENT_PARTICIPANT", "USER", "OWNER", "API_KEY"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/conversations/{conversation_id}/messages`.replace(`{${"conversation_id"}}`, encodeURIComponent(String(requestParameters['conversationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MessagePostRequestToJSON(requestParameters['messagePostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageFromJSON(jsonValue));
    }

    /**
     * Queues a message to be added to the conversation.
     * Add a new message to a conversation.
     */
    async createMessage(requestParameters: CreateMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Message> {
        const response = await this.createMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves details of a specific message by ID.
     * Get a single message in the specified conversation.
     */
    async getMessageRaw(requestParameters: GetMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Message>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling getMessage().'
            );
        }

        if (requestParameters['messageId'] == null) {
            throw new runtime.RequiredError(
                'messageId',
                'Required parameter "messageId" was null or undefined when calling getMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["CLIENT_PARTICIPANT", "USER", "OWNER", "API_KEY"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/conversations/{conversation_id}/messages/{message_id}`.replace(`{${"conversation_id"}}`, encodeURIComponent(String(requestParameters['conversationId']))).replace(`{${"message_id"}}`, encodeURIComponent(String(requestParameters['messageId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageFromJSON(jsonValue));
    }

    /**
     * Retrieves details of a specific message by ID.
     * Get a single message in the specified conversation.
     */
    async getMessage(requestParameters: GetMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Message> {
        const response = await this.getMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a paginated list of messages for the conversation.
     * Get messages of a conversation.
     */
    async getMessagesRaw(requestParameters: GetMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessagePaginatedResponse>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling getMessages().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['createdAfter'] != null) {
            queryParameters['created_after'] = requestParameters['createdAfter'];
        }

        if (requestParameters['createdBefore'] != null) {
            queryParameters['created_before'] = requestParameters['createdBefore'];
        }

        if (requestParameters['lastSequence'] != null) {
            queryParameters['last_sequence'] = requestParameters['lastSequence'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['order_by'] = requestParameters['orderBy'];
        }

        if (requestParameters['updatedAfter'] != null) {
            queryParameters['updated_after'] = requestParameters['updatedAfter'];
        }

        if (requestParameters['updatedBefore'] != null) {
            queryParameters['updated_before'] = requestParameters['updatedBefore'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["CLIENT_PARTICIPANT", "USER", "OWNER", "API_KEY"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/conversations/{conversation_id}/messages`.replace(`{${"conversation_id"}}`, encodeURIComponent(String(requestParameters['conversationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessagePaginatedResponseFromJSON(jsonValue));
    }

    /**
     * Returns a paginated list of messages for the conversation.
     * Get messages of a conversation.
     */
    async getMessages(requestParameters: GetMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessagePaginatedResponse> {
        const response = await this.getMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
