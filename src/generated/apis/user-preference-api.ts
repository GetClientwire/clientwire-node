/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UserPreference,
  UserPreferencePostRequest,
  UserPreferencePostRequest1,
} from '../models/index';
import {
    UserPreferenceFromJSON,
    UserPreferenceToJSON,
    UserPreferencePostRequestFromJSON,
    UserPreferencePostRequestToJSON,
    UserPreferencePostRequest1FromJSON,
    UserPreferencePostRequest1ToJSON,
} from '../models/index';

export interface CreateOrUpdateUserPreferenceRequest {
    userId: string;
    userPreferencePostRequest1: UserPreferencePostRequest1;
}

export interface CreateUserPreferenceRequest {
    userId: string;
    userPreferencePostRequest: UserPreferencePostRequest;
}

export interface GetUserPreferenceRequest {
    userId: string;
}

/**
 * UserPreferenceApi - interface
 * 
 * @export
 * @interface UserPreferenceApiInterface
 */
export interface UserPreferenceApiInterface {
    /**
     * Updates user preferences.
     * @summary Update user preferences.
     * @param {string} userId 
     * @param {UserPreferencePostRequest1} userPreferencePostRequest1 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPreferenceApiInterface
     */
    createOrUpdateUserPreferenceRaw(requestParameters: CreateOrUpdateUserPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPreference>>;

    /**
     * Updates user preferences.
     * Update user preferences.
     */
    createOrUpdateUserPreference(requestParameters: CreateOrUpdateUserPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPreference>;

    /**
     * Creates user preferences.
     * @summary Create user preferences.
     * @param {string} userId 
     * @param {UserPreferencePostRequest} userPreferencePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPreferenceApiInterface
     */
    createUserPreferenceRaw(requestParameters: CreateUserPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPreference>>;

    /**
     * Creates user preferences.
     * Create user preferences.
     */
    createUserPreference(requestParameters: CreateUserPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPreference>;

    /**
     * Retrieves user preferences by user ID.
     * @summary Get user preferences.
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPreferenceApiInterface
     */
    getUserPreferenceRaw(requestParameters: GetUserPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPreference>>;

    /**
     * Retrieves user preferences by user ID.
     * Get user preferences.
     */
    getUserPreference(requestParameters: GetUserPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPreference>;

}

/**
 * 
 */
export class UserPreferenceApi extends runtime.BaseAPI implements UserPreferenceApiInterface {

    /**
     * Updates user preferences.
     * Update user preferences.
     */
    async createOrUpdateUserPreferenceRaw(requestParameters: CreateOrUpdateUserPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPreference>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling createOrUpdateUserPreference().'
            );
        }

        if (requestParameters['userPreferencePostRequest1'] == null) {
            throw new runtime.RequiredError(
                'userPreferencePostRequest1',
                'Required parameter "userPreferencePostRequest1" was null or undefined when calling createOrUpdateUserPreference().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["USER", "OWNER", "API_KEY"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/users/{user_id}/preferences`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserPreferencePostRequest1ToJSON(requestParameters['userPreferencePostRequest1']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserPreferenceFromJSON(jsonValue));
    }

    /**
     * Updates user preferences.
     * Update user preferences.
     */
    async createOrUpdateUserPreference(requestParameters: CreateOrUpdateUserPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPreference> {
        const response = await this.createOrUpdateUserPreferenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates user preferences.
     * Create user preferences.
     */
    async createUserPreferenceRaw(requestParameters: CreateUserPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPreference>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling createUserPreference().'
            );
        }

        if (requestParameters['userPreferencePostRequest'] == null) {
            throw new runtime.RequiredError(
                'userPreferencePostRequest',
                'Required parameter "userPreferencePostRequest" was null or undefined when calling createUserPreference().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["USER", "OWNER", "API_KEY"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/users/{user_id}/preferences`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserPreferencePostRequestToJSON(requestParameters['userPreferencePostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserPreferenceFromJSON(jsonValue));
    }

    /**
     * Creates user preferences.
     * Create user preferences.
     */
    async createUserPreference(requestParameters: CreateUserPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPreference> {
        const response = await this.createUserPreferenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves user preferences by user ID.
     * Get user preferences.
     */
    async getUserPreferenceRaw(requestParameters: GetUserPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPreference>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUserPreference().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["USER", "OWNER", "API_KEY"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/users/{user_id}/preferences`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserPreferenceFromJSON(jsonValue));
    }

    /**
     * Retrieves user preferences by user ID.
     * Get user preferences.
     */
    async getUserPreference(requestParameters: GetUserPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPreference> {
        const response = await this.getUserPreferenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
