/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MessageTemplate,
  MessageTemplatePaginatedResponse,
  MessageTemplatePostRequest,
  MessageTemplatePutRequest,
} from '../models/index';
import {
    MessageTemplateFromJSON,
    MessageTemplateToJSON,
    MessageTemplatePaginatedResponseFromJSON,
    MessageTemplatePaginatedResponseToJSON,
    MessageTemplatePostRequestFromJSON,
    MessageTemplatePostRequestToJSON,
    MessageTemplatePutRequestFromJSON,
    MessageTemplatePutRequestToJSON,
} from '../models/index';

export interface CreateMessageTemplateRequest {
    messageTemplatePostRequest: MessageTemplatePostRequest;
}

export interface DeleteMessageTemplateRequest {
    name: string;
}

export interface GetMessageTemplateByIdRequest {
    name: string;
    includes?: any;
}

export interface ListMessageTemplatesRequest {
    direction?: string | null;
    includes?: any;
    limit?: number;
    offset?: number;
    sortBy?: string | null;
}

export interface UpdateMessageTemplateRequest {
    name: string;
    messageTemplatePutRequest: MessageTemplatePutRequest;
    includes?: any;
}

/**
 * MessageTemplatesApi - interface
 * 
 * @export
 * @interface MessageTemplatesApiInterface
 */
export interface MessageTemplatesApiInterface {
    /**
     * Creates a message template.
     * @summary Create a new message template for the specified tenant.
     * @param {MessageTemplatePostRequest} messageTemplatePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplatesApiInterface
     */
    createMessageTemplateRaw(requestParameters: CreateMessageTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Creates a message template.
     * Create a new message template for the specified tenant.
     */
    createMessageTemplate(requestParameters: CreateMessageTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * Removes a message template by ID.
     * @summary Delete a message template.
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplatesApiInterface
     */
    deleteMessageTemplateRaw(requestParameters: DeleteMessageTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Removes a message template by ID.
     * Delete a message template.
     */
    deleteMessageTemplate(requestParameters: DeleteMessageTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Fetches message templates by id.
     * @summary Message template
     * @param {string} name 
     * @param {any} [includes] Include the specified related resources in the response. Supported values: \&#39;PARAMETERS\&#39;, \&#39;TEXTS\&#39;. If empty, no related resource is returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplatesApiInterface
     */
    getMessageTemplateByIdRaw(requestParameters: GetMessageTemplateByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageTemplate>>;

    /**
     * Fetches message templates by id.
     * Message template
     */
    getMessageTemplateById(requestParameters: GetMessageTemplateByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageTemplate>;

    /**
     * Fetches message templates for the tenant.
     * @summary Paged message templates.
     * @param {string} [direction] 
     * @param {any} [includes] Include the specified related resources in the response. Supported values: \&#39;PARAMETERS\&#39;, \&#39;TEXTS\&#39;. If empty, no related resource is returned
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplatesApiInterface
     */
    listMessageTemplatesRaw(requestParameters: ListMessageTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageTemplatePaginatedResponse>>;

    /**
     * Fetches message templates for the tenant.
     * Paged message templates.
     */
    listMessageTemplates(requestParameters: ListMessageTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageTemplatePaginatedResponse>;

    /**
     * Updates a message template.
     * @summary Update a message template.
     * @param {string} name 
     * @param {MessageTemplatePutRequest} messageTemplatePutRequest 
     * @param {any} [includes] Include the specified related resources in the response. Supported values: \&#39;PARAMETERS\&#39;, \&#39;TEXTS\&#39;. If empty, no related resource is returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplatesApiInterface
     */
    updateMessageTemplateRaw(requestParameters: UpdateMessageTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Updates a message template.
     * Update a message template.
     */
    updateMessageTemplate(requestParameters: UpdateMessageTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

}

/**
 * 
 */
export class MessageTemplatesApi extends runtime.BaseAPI implements MessageTemplatesApiInterface {

    /**
     * Creates a message template.
     * Create a new message template for the specified tenant.
     */
    async createMessageTemplateRaw(requestParameters: CreateMessageTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['messageTemplatePostRequest'] == null) {
            throw new runtime.RequiredError(
                'messageTemplatePostRequest',
                'Required parameter "messageTemplatePostRequest" was null or undefined when calling createMessageTemplate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["OWNER", "API_KEY"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/message_templates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MessageTemplatePostRequestToJSON(requestParameters['messageTemplatePostRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Creates a message template.
     * Create a new message template for the specified tenant.
     */
    async createMessageTemplate(requestParameters: CreateMessageTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.createMessageTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a message template by ID.
     * Delete a message template.
     */
    async deleteMessageTemplateRaw(requestParameters: DeleteMessageTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteMessageTemplate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["OWNER", "API_KEY"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/message_templates/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a message template by ID.
     * Delete a message template.
     */
    async deleteMessageTemplate(requestParameters: DeleteMessageTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteMessageTemplateRaw(requestParameters, initOverrides);
    }

    /**
     * Fetches message templates by id.
     * Message template
     */
    async getMessageTemplateByIdRaw(requestParameters: GetMessageTemplateByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageTemplate>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getMessageTemplateById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includes'] != null) {
            queryParameters['includes'] = requestParameters['includes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["OWNER", "API_KEY"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/message_templates/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageTemplateFromJSON(jsonValue));
    }

    /**
     * Fetches message templates by id.
     * Message template
     */
    async getMessageTemplateById(requestParameters: GetMessageTemplateByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageTemplate> {
        const response = await this.getMessageTemplateByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches message templates for the tenant.
     * Paged message templates.
     */
    async listMessageTemplatesRaw(requestParameters: ListMessageTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageTemplatePaginatedResponse>> {
        const queryParameters: any = {};

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        if (requestParameters['includes'] != null) {
            queryParameters['includes'] = requestParameters['includes'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["OWNER", "API_KEY"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/message_templates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageTemplatePaginatedResponseFromJSON(jsonValue));
    }

    /**
     * Fetches message templates for the tenant.
     * Paged message templates.
     */
    async listMessageTemplates(requestParameters: ListMessageTemplatesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageTemplatePaginatedResponse> {
        const response = await this.listMessageTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a message template.
     * Update a message template.
     */
    async updateMessageTemplateRaw(requestParameters: UpdateMessageTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling updateMessageTemplate().'
            );
        }

        if (requestParameters['messageTemplatePutRequest'] == null) {
            throw new runtime.RequiredError(
                'messageTemplatePutRequest',
                'Required parameter "messageTemplatePutRequest" was null or undefined when calling updateMessageTemplate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includes'] != null) {
            queryParameters['includes'] = requestParameters['includes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["OWNER", "API_KEY"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/message_templates/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MessageTemplatePutRequestToJSON(requestParameters['messageTemplatePutRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Updates a message template.
     * Update a message template.
     */
    async updateMessageTemplate(requestParameters: UpdateMessageTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.updateMessageTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
