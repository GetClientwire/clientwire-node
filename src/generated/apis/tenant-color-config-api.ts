/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Conversation,
  TenantColorConfig,
} from '../models/index';
import {
    ConversationFromJSON,
    ConversationToJSON,
    TenantColorConfigFromJSON,
    TenantColorConfigToJSON,
} from '../models/index';

export interface CreateOrUpdateTenantColorConfigRequest {
    tenantColorConfig: TenantColorConfig;
}

/**
 * TenantColorConfigApi - interface
 * 
 * @export
 * @interface TenantColorConfigApiInterface
 */
export interface TenantColorConfigApiInterface {
    /**
     * If it doesn\'t exist, creates it; otherwise updates it.
     * @summary Create or update tenant color config.
     * @param {TenantColorConfig} tenantColorConfig 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantColorConfigApiInterface
     */
    createOrUpdateTenantColorConfigRaw(requestParameters: CreateOrUpdateTenantColorConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Conversation>>;

    /**
     * If it doesn\'t exist, creates it; otherwise updates it.
     * Create or update tenant color config.
     */
    createOrUpdateTenantColorConfig(requestParameters: CreateOrUpdateTenantColorConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Conversation>;

}

/**
 * 
 */
export class TenantColorConfigApi extends runtime.BaseAPI implements TenantColorConfigApiInterface {

    /**
     * If it doesn\'t exist, creates it; otherwise updates it.
     * Create or update tenant color config.
     */
    async createOrUpdateTenantColorConfigRaw(requestParameters: CreateOrUpdateTenantColorConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Conversation>> {
        if (requestParameters['tenantColorConfig'] == null) {
            throw new runtime.RequiredError(
                'tenantColorConfig',
                'Required parameter "tenantColorConfig" was null or undefined when calling createOrUpdateTenantColorConfig().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["OWNER", "API_KEY"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/tenant/color/config`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TenantColorConfigToJSON(requestParameters['tenantColorConfig']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationFromJSON(jsonValue));
    }

    /**
     * If it doesn\'t exist, creates it; otherwise updates it.
     * Create or update tenant color config.
     */
    async createOrUpdateTenantColorConfig(requestParameters: CreateOrUpdateTenantColorConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Conversation> {
        const response = await this.createOrUpdateTenantColorConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
