/* tslint:disable */
/* eslint-disable */
/**
 * Wire API (development)
 * The API for the Clientwire messaging service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@clientwire.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateOidcConfigRequest,
  OidcConfig,
  OidcConfigList,
} from '../models/index';
import {
    CreateOidcConfigRequestFromJSON,
    CreateOidcConfigRequestToJSON,
    OidcConfigFromJSON,
    OidcConfigToJSON,
    OidcConfigListFromJSON,
    OidcConfigListToJSON,
} from '../models/index';

export interface CreateOidcProviderRequest {
    createOidcConfigRequest: CreateOidcConfigRequest;
}

export interface DeleteOidcProviderRequest {
    providerName: string;
}

export interface GetOidcProviderRequest {
    providerName: string;
}

export interface PatchOidcProviderRequest {
    providerName: string;
    requestBody: { [key: string]: any; };
}

/**
 * OIDCConfigsApi - interface
 * 
 * @export
 * @interface OIDCConfigsApiInterface
 */
export interface OIDCConfigsApiInterface {
    /**
     * Creates an OIDC config if it does not already exist for that provider.
     * @summary Create a new OIDC provider config for the specified tenant.
     * @param {CreateOidcConfigRequest} createOidcConfigRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OIDCConfigsApiInterface
     */
    createOidcProviderRaw(requestParameters: CreateOidcProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OidcConfig>>;

    /**
     * Creates an OIDC config if it does not already exist for that provider.
     * Create a new OIDC provider config for the specified tenant.
     */
    createOidcProvider(requestParameters: CreateOidcProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OidcConfig>;

    /**
     * Removes an OIDC provider config from the tenant’s configuration.
     * @summary Delete an OIDC provider config.
     * @param {string} providerName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OIDCConfigsApiInterface
     */
    deleteOidcProviderRaw(requestParameters: DeleteOidcProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Removes an OIDC provider config from the tenant’s configuration.
     * Delete an OIDC provider config.
     */
    deleteOidcProvider(requestParameters: DeleteOidcProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Finds an OIDC provider config by its provider name.
     * @summary Get a single OIDC provider config by provider name.
     * @param {string} providerName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OIDCConfigsApiInterface
     */
    getOidcProviderRaw(requestParameters: GetOidcProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OidcConfig>>;

    /**
     * Finds an OIDC provider config by its provider name.
     * Get a single OIDC provider config by provider name.
     */
    getOidcProvider(requestParameters: GetOidcProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OidcConfig>;

    /**
     * Retrieves all OIDC configs for the given tenant.
     * @summary List all OIDC provider configs for the specified tenant.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OIDCConfigsApiInterface
     */
    listOidcProvidersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OidcConfigList>>;

    /**
     * Retrieves all OIDC configs for the given tenant.
     * List all OIDC provider configs for the specified tenant.
     */
    listOidcProviders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OidcConfigList>;

    /**
     * Allows updating only certain fields like client_id, authority_url, client_secret, scope.
     * @summary Update partial fields of an existing OIDC provider config.
     * @param {string} providerName 
     * @param {{ [key: string]: any; }} requestBody The patch body for updating OIDC provider config fields.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OIDCConfigsApiInterface
     */
    patchOidcProviderRaw(requestParameters: PatchOidcProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OidcConfig>>;

    /**
     * Allows updating only certain fields like client_id, authority_url, client_secret, scope.
     * Update partial fields of an existing OIDC provider config.
     */
    patchOidcProvider(requestParameters: PatchOidcProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OidcConfig>;

}

/**
 * 
 */
export class OIDCConfigsApi extends runtime.BaseAPI implements OIDCConfigsApiInterface {

    /**
     * Creates an OIDC config if it does not already exist for that provider.
     * Create a new OIDC provider config for the specified tenant.
     */
    async createOidcProviderRaw(requestParameters: CreateOidcProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OidcConfig>> {
        if (requestParameters['createOidcConfigRequest'] == null) {
            throw new runtime.RequiredError(
                'createOidcConfigRequest',
                'Required parameter "createOidcConfigRequest" was null or undefined when calling createOidcProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["API_KEY", "OWNER"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/oidc-configs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOidcConfigRequestToJSON(requestParameters['createOidcConfigRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OidcConfigFromJSON(jsonValue));
    }

    /**
     * Creates an OIDC config if it does not already exist for that provider.
     * Create a new OIDC provider config for the specified tenant.
     */
    async createOidcProvider(requestParameters: CreateOidcProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OidcConfig> {
        const response = await this.createOidcProviderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes an OIDC provider config from the tenant’s configuration.
     * Delete an OIDC provider config.
     */
    async deleteOidcProviderRaw(requestParameters: DeleteOidcProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['providerName'] == null) {
            throw new runtime.RequiredError(
                'providerName',
                'Required parameter "providerName" was null or undefined when calling deleteOidcProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["API_KEY", "OWNER"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/oidc-configs/{provider_name}`.replace(`{${"provider_name"}}`, encodeURIComponent(String(requestParameters['providerName']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes an OIDC provider config from the tenant’s configuration.
     * Delete an OIDC provider config.
     */
    async deleteOidcProvider(requestParameters: DeleteOidcProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOidcProviderRaw(requestParameters, initOverrides);
    }

    /**
     * Finds an OIDC provider config by its provider name.
     * Get a single OIDC provider config by provider name.
     */
    async getOidcProviderRaw(requestParameters: GetOidcProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OidcConfig>> {
        if (requestParameters['providerName'] == null) {
            throw new runtime.RequiredError(
                'providerName',
                'Required parameter "providerName" was null or undefined when calling getOidcProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["API_KEY", "OWNER"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/oidc-configs/{provider_name}`.replace(`{${"provider_name"}}`, encodeURIComponent(String(requestParameters['providerName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OidcConfigFromJSON(jsonValue));
    }

    /**
     * Finds an OIDC provider config by its provider name.
     * Get a single OIDC provider config by provider name.
     */
    async getOidcProvider(requestParameters: GetOidcProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OidcConfig> {
        const response = await this.getOidcProviderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all OIDC configs for the given tenant.
     * List all OIDC provider configs for the specified tenant.
     */
    async listOidcProvidersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OidcConfigList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["API_KEY", "OWNER"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/oidc-configs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OidcConfigListFromJSON(jsonValue));
    }

    /**
     * Retrieves all OIDC configs for the given tenant.
     * List all OIDC provider configs for the specified tenant.
     */
    async listOidcProviders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OidcConfigList> {
        const response = await this.listOidcProvidersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Allows updating only certain fields like client_id, authority_url, client_secret, scope.
     * Update partial fields of an existing OIDC provider config.
     */
    async patchOidcProviderRaw(requestParameters: PatchOidcProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OidcConfig>> {
        if (requestParameters['providerName'] == null) {
            throw new runtime.RequiredError(
                'providerName',
                'Required parameter "providerName" was null or undefined when calling patchOidcProvider().'
            );
        }

        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling patchOidcProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["API_KEY", "OWNER"]);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/oidc-configs/{provider_name}`.replace(`{${"provider_name"}}`, encodeURIComponent(String(requestParameters['providerName']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OidcConfigFromJSON(jsonValue));
    }

    /**
     * Allows updating only certain fields like client_id, authority_url, client_secret, scope.
     * Update partial fields of an existing OIDC provider config.
     */
    async patchOidcProvider(requestParameters: PatchOidcProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OidcConfig> {
        const response = await this.patchOidcProviderRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
